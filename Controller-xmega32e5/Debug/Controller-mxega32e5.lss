
Controller-mxega32e5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  00001e70  00001f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003e6  00802004  00802004  00001f08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001f78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000063a9  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000211d  00000000  00000000  00008551  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e7  00000000  00000000  0000a66e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ac  00000000  00000000  0000c058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001d100  00000000  00000000  0000c604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d20  00000000  00000000  00029704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0002a424  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007e62  00000000  00000000  0002a614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
       6:	00 00       	nop
       8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__vector_3>
      10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__vector_5>
      18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <__vector_7>
      20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
      22:	00 00       	nop
      24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
      26:	00 00       	nop
      28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
      32:	00 00       	nop
      34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
      36:	00 00       	nop
      38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
      42:	00 00       	nop
      44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__vector_18>
      4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
      52:	00 00       	nop
      54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
      56:	00 00       	nop
      58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
      62:	00 00       	nop
      64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
      66:	00 00       	nop
      68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
      72:	00 00       	nop
      74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
      76:	00 00       	nop
      78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
      82:	00 00       	nop
      84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
      86:	00 00       	nop
      88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2c c0       	rjmp	.+88     	; 0xe6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	2a c0       	rjmp	.+84     	; 0xe6 <__bad_interrupt>
      92:	00 00       	nop
      94:	28 c0       	rjmp	.+80     	; 0xe6 <__bad_interrupt>
      96:	00 00       	nop
      98:	26 c0       	rjmp	.+76     	; 0xe6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	24 c0       	rjmp	.+72     	; 0xe6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	22 c0       	rjmp	.+68     	; 0xe6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	20 c0       	rjmp	.+64     	; 0xe6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1e c0       	rjmp	.+60     	; 0xe6 <__bad_interrupt>
	...

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	cd bf       	out	0x3d, r28	; 61
      b4:	df e2       	ldi	r29, 0x2F	; 47
      b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
      b8:	10 e2       	ldi	r17, 0x20	; 32
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b0 e2       	ldi	r27, 0x20	; 32
      be:	e0 e7       	ldi	r30, 0x70	; 112
      c0:	fe e1       	ldi	r31, 0x1E	; 30
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a4 30       	cpi	r26, 0x04	; 4
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	23 e2       	ldi	r18, 0x23	; 35
      d0:	a4 e0       	ldi	r26, 0x04	; 4
      d2:	b0 e2       	ldi	r27, 0x20	; 32
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	aa 3e       	cpi	r26, 0xEA	; 234
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <main>
      e2:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <_exit>

000000e6 <__bad_interrupt>:
      e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <_1101010101_>:

#if ((_STATIC_PORT_PIN_CONF_ == 1) && (QTOUCH_SNS_PORT_COUNT >= 1))

GLOBAL_FUNCTION _1101010101_
_1101010101_:
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
      e8:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f7602>
    sts	CONCAT( PORT, SNSK1, _DIRCLR ), p_2
      ec:	60 93 02 06 	sts	0x0602, r22	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f7602>
    sts	CONCAT( PORT, SNS1, _OUTSET), p_1
      f0:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7f7605>
    sts	CONCAT( PORT, SNSK1, _OUTCLR), p_2    
      f4:	60 93 06 06 	sts	0x0606, r22	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f7606>
    sts	CONCAT( PORT, SNSK1, _DIRSET), p_2   
      f8:	60 93 01 06 	sts	0x0601, r22	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f7601>
    ret
      fc:	08 95       	ret

000000fe <_1101010111_>:


GLOBAL_FUNCTION _1101010111_
_1101010111_:
    push r19
      fe:	3f 93       	push	r19
    sts	CONCAT( PORT, SNSK1, _DIRCLR), p_2
     100:	60 93 02 06 	sts	0x0602, r22	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f7602>
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     104:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f7601>
    _10100011_
    _01101001_
    _00011001_
    _00011001_
#endif
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     108:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f7602>
    sts	CONCAT( PORT, SNSK1, _DIRSET ), p_2 
     10c:	60 93 01 06 	sts	0x0601, r22	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f7601>
    pop  r19
     110:	3f 91       	pop	r19
    lds	r_v, CONCAT(PORT, SNS1, _IN )
     112:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f7608>
    and	r_v, p_3
     116:	84 23       	and	r24, r20
    ret
     118:	08 95       	ret

0000011a <_1101010110_>:

GLOBAL_FUNCTION _1101010110_
_1101010110_:
    sts	CONCAT( PORT, SNS1, _OUTCLR), p_1
     11a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f7606>
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     11e:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f7601>
    ret
     122:	08 95       	ret

00000124 <burst_1_1_00_0_1>:
     124:	a1 e0       	ldi	r26, 0x01	; 1
     126:	b0 e0       	ldi	r27, 0x00	; 0
     128:	e8 e9       	ldi	r30, 0x98	; 152
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__prologue_saves__+0xc>
     130:	ff b6       	in	r15, 0x3f	; 63
     132:	90 e8       	ldi	r25, 0x80	; 128
     134:	f9 22       	and	r15, r25
     136:	19 82       	std	Y+1, r1	; 0x01
     138:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <__data_end>
     13c:	91 30       	cpi	r25, 0x01	; 1
     13e:	19 f0       	breq	.+6      	; 0x146 <burst_1_1_00_0_1+0x22>
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	90 93 04 20 	sts	0x2004, r25	; 0x802004 <__data_end>
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	2b e4       	ldi	r18, 0x4B	; 75
     14a:	a2 2e       	mov	r10, r18
     14c:	20 e2       	ldi	r18, 0x20	; 32
     14e:	b2 2e       	mov	r11, r18
     150:	a8 0e       	add	r10, r24
     152:	b9 1e       	adc	r11, r25
     154:	f5 01       	movw	r30, r10
     156:	d0 80       	ld	r13, Z
     158:	89 5b       	subi	r24, 0xB9	; 185
     15a:	9f 4d       	sbci	r25, 0xDF	; 223
     15c:	fc 01       	movw	r30, r24
     15e:	c0 80       	ld	r12, Z
     160:	f8 94       	cli
     162:	dd 20       	and	r13, r13
     164:	09 f4       	brne	.+2      	; 0x168 <burst_1_1_00_0_1+0x44>
     166:	a6 c0       	rjmp	.+332    	; 0x2b4 <burst_1_1_00_0_1+0x190>
     168:	f5 01       	movw	r30, r10
     16a:	80 81       	ld	r24, Z
     16c:	d6 df       	rcall	.-84     	; 0x11a <_1101010110_>
     16e:	8d 2d       	mov	r24, r13
     170:	6c 2d       	mov	r22, r12
     172:	ba df       	rcall	.-140    	; 0xe8 <_1101010101_>
     174:	ed 2c       	mov	r14, r13
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	81 2c       	mov	r8, r1
     17e:	90 e2       	ldi	r25, 0x20	; 32
     180:	99 2e       	mov	r9, r25
     182:	15 ff       	sbrs	r17, 5
     184:	07 c0       	rjmp	.+14     	; 0x194 <burst_1_1_00_0_1+0x70>
     186:	90 91 4c 20 	lds	r25, 0x204C	; 0x80204c <SNS_array+0x1>
     18a:	20 91 4b 20 	lds	r18, 0x204B	; 0x80204b <SNS_array>
     18e:	92 2b       	or	r25, r18
     190:	09 f5       	brne	.+66     	; 0x1d4 <burst_1_1_00_0_1+0xb0>
     192:	32 c0       	rjmp	.+100    	; 0x1f8 <burst_1_1_00_0_1+0xd4>
     194:	8f b7       	in	r24, 0x3f	; 63
     196:	8f 29       	or	r24, r15
     198:	8f bf       	out	0x3f, r24	; 63
     19a:	00 00       	nop
     19c:	f8 94       	cli
     19e:	8d 2d       	mov	r24, r13
     1a0:	6c 2d       	mov	r22, r12
     1a2:	4e 2d       	mov	r20, r14
     1a4:	ac df       	rcall	.-168    	; 0xfe <_1101010111_>
     1a6:	0f 5f       	subi	r16, 0xFF	; 255
     1a8:	1f 4f       	sbci	r17, 0xFF	; 255
     1aa:	90 91 00 20 	lds	r25, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     1ae:	9f 5f       	subi	r25, 0xFF	; 255
     1b0:	90 93 00 20 	sts	0x2000, r25	; 0x802000 <__DATA_REGION_ORIGIN__>
     1b4:	92 30       	cpi	r25, 0x02	; 2
     1b6:	30 f0       	brcs	.+12     	; 0x1c4 <burst_1_1_00_0_1+0xa0>
     1b8:	92 30       	cpi	r25, 0x02	; 2
     1ba:	21 f0       	breq	.+8      	; 0x1c4 <burst_1_1_00_0_1+0xa0>
     1bc:	93 30       	cpi	r25, 0x03	; 3
     1be:	11 f0       	breq	.+4      	; 0x1c4 <burst_1_1_00_0_1+0xa0>
     1c0:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
     1c4:	88 23       	and	r24, r24
     1c6:	e9 f2       	breq	.-70     	; 0x182 <burst_1_1_00_0_1+0x5e>
     1c8:	90 91 4c 20 	lds	r25, 0x204C	; 0x80204c <SNS_array+0x1>
     1cc:	20 91 4b 20 	lds	r18, 0x204B	; 0x80204b <SNS_array>
     1d0:	92 2b       	or	r25, r18
     1d2:	14 c0       	rjmp	.+40     	; 0x1fc <burst_1_1_00_0_1+0xd8>
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	e0 fe       	sbrs	r14, 0
     1d8:	09 c0       	rjmp	.+18     	; 0x1ec <burst_1_1_00_0_1+0xc8>
     1da:	e2 2f       	mov	r30, r18
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	ee 0f       	add	r30, r30
     1e0:	ff 1f       	adc	r31, r31
     1e2:	e3 5f       	subi	r30, 0xF3	; 243
     1e4:	ff 4d       	sbci	r31, 0xDF	; 223
     1e6:	80 82       	st	Z, r8
     1e8:	91 82       	std	Z+1, r9	; 0x01
     1ea:	01 c0       	rjmp	.+2      	; 0x1ee <burst_1_1_00_0_1+0xca>
     1ec:	90 fd       	sbrc	r25, 0
     1ee:	2f 5f       	subi	r18, 0xFF	; 255
     1f0:	96 95       	lsr	r25
     1f2:	e6 94       	lsr	r14
     1f4:	99 23       	and	r25, r25
     1f6:	79 f7       	brne	.-34     	; 0x1d6 <burst_1_1_00_0_1+0xb2>
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	ee 24       	eor	r14, r14
     1fc:	2f b7       	in	r18, 0x3f	; 63
     1fe:	2f 29       	or	r18, r15
     200:	2f bf       	out	0x3f, r18	; 63
     202:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <m.3087>
     206:	99 23       	and	r25, r25
     208:	d1 f1       	breq	.+116    	; 0x27e <burst_1_1_00_0_1+0x15a>
     20a:	ee 20       	and	r14, r14
     20c:	c1 f1       	breq	.+112    	; 0x27e <burst_1_1_00_0_1+0x15a>
     20e:	20 91 48 20 	lds	r18, 0x2048	; 0x802048 <SNSK_array+0x1>
     212:	30 91 47 20 	lds	r19, 0x2047	; 0x802047 <SNSK_array>
     216:	23 2b       	or	r18, r19
     218:	58 2f       	mov	r21, r24
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	21 c0       	rjmp	.+66     	; 0x266 <burst_1_1_00_0_1+0x142>
     224:	50 ff       	sbrs	r21, 0
     226:	18 c0       	rjmp	.+48     	; 0x258 <burst_1_1_00_0_1+0x134>
     228:	12 c0       	rjmp	.+36     	; 0x24e <burst_1_1_00_0_1+0x12a>
     22a:	20 ff       	sbrs	r18, 0
     22c:	0f c0       	rjmp	.+30     	; 0x24c <burst_1_1_00_0_1+0x128>
     22e:	46 17       	cp	r20, r22
     230:	61 f4       	brne	.+24     	; 0x24a <burst_1_1_00_0_1+0x126>
     232:	e3 2f       	mov	r30, r19
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	e3 5f       	subi	r30, 0xF3	; 243
     23c:	ff 4d       	sbci	r31, 0xDF	; 223
     23e:	00 83       	st	Z, r16
     240:	11 83       	std	Z+1, r17	; 0x01
     242:	e5 2f       	mov	r30, r21
     244:	ee 7f       	andi	r30, 0xFE	; 254
     246:	31 f0       	breq	.+12     	; 0x254 <burst_1_1_00_0_1+0x130>
     248:	08 c0       	rjmp	.+16     	; 0x25a <burst_1_1_00_0_1+0x136>
     24a:	6f 5f       	subi	r22, 0xFF	; 255
     24c:	26 95       	lsr	r18
     24e:	22 23       	and	r18, r18
     250:	61 f7       	brne	.-40     	; 0x22a <burst_1_1_00_0_1+0x106>
     252:	03 c0       	rjmp	.+6      	; 0x25a <burst_1_1_00_0_1+0x136>
     254:	71 e0       	ldi	r23, 0x01	; 1
     256:	01 c0       	rjmp	.+2      	; 0x25a <burst_1_1_00_0_1+0x136>
     258:	90 fd       	sbrc	r25, 0
     25a:	4f 5f       	subi	r20, 0xFF	; 255
     25c:	90 fd       	sbrc	r25, 0
     25e:	3f 5f       	subi	r19, 0xFF	; 255
     260:	56 95       	lsr	r21
     262:	96 95       	lsr	r25
     264:	11 f0       	breq	.+4      	; 0x26a <burst_1_1_00_0_1+0x146>
     266:	55 23       	and	r21, r21
     268:	e9 f6       	brne	.-70     	; 0x224 <burst_1_1_00_0_1+0x100>
     26a:	30 93 05 20 	sts	0x2005, r19	; 0x802005 <m.3087>
     26e:	80 95       	com	r24
     270:	e8 22       	and	r14, r24
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	71 30       	cpi	r23, 0x01	; 1
     276:	d1 f4       	brne	.+52     	; 0x2ac <burst_1_1_00_0_1+0x188>
     278:	ee 20       	and	r14, r14
     27a:	b1 f0       	breq	.+44     	; 0x2a8 <burst_1_1_00_0_1+0x184>
     27c:	17 c0       	rjmp	.+46     	; 0x2ac <burst_1_1_00_0_1+0x188>
     27e:	90 91 4c 20 	lds	r25, 0x204C	; 0x80204c <SNS_array+0x1>
     282:	20 91 4b 20 	lds	r18, 0x204B	; 0x80204b <SNS_array>
     286:	92 2b       	or	r25, r18
     288:	99 83       	std	Y+1, r25	; 0x01
     28a:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <m.3087>
     28e:	06 c0       	rjmp	.+12     	; 0x29c <burst_1_1_00_0_1+0x178>
     290:	29 81       	ldd	r18, Y+1	; 0x01
     292:	20 fd       	sbrc	r18, 0
     294:	9f 5f       	subi	r25, 0xFF	; 255
     296:	29 81       	ldd	r18, Y+1	; 0x01
     298:	26 95       	lsr	r18
     29a:	29 83       	std	Y+1, r18	; 0x01
     29c:	29 81       	ldd	r18, Y+1	; 0x01
     29e:	22 23       	and	r18, r18
     2a0:	b9 f7       	brne	.-18     	; 0x290 <burst_1_1_00_0_1+0x16c>
     2a2:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <m.3087>
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <burst_1_1_00_0_1+0x188>
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	10 e0       	ldi	r17, 0x00	; 0
     2ac:	f8 94       	cli
     2ae:	ee 20       	and	r14, r14
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <burst_1_1_00_0_1+0x190>
     2b2:	67 cf       	rjmp	.-306    	; 0x182 <burst_1_1_00_0_1+0x5e>
     2b4:	f5 01       	movw	r30, r10
     2b6:	80 81       	ld	r24, Z
     2b8:	30 df       	rcall	.-416    	; 0x11a <_1101010110_>
     2ba:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <temp_flag>
     2be:	8f b7       	in	r24, 0x3f	; 63
     2c0:	8f 29       	or	r24, r15
     2c2:	8f bf       	out	0x3f, r24	; 63
     2c4:	21 96       	adiw	r28, 0x01	; 1
     2c6:	ec e0       	ldi	r30, 0x0C	; 12
     2c8:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__epilogue_restores__+0xc>

000002cc <qt_init_sensing_with_burst>:
     2cc:	ff 92       	push	r15
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	8c 01       	movw	r16, r24
     2d8:	eb 01       	movw	r28, r22
     2da:	ff 24       	eor	r15, r15
     2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <qt_init_sensing_with_burst+0x18>
     2de:	8f 2d       	mov	r24, r15
     2e0:	49 d1       	rcall	.+658    	; 0x574 <start_cal_sensor>
     2e2:	f3 94       	inc	r15
     2e4:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <num_sensors>
     2e8:	f8 16       	cp	r15, r24
     2ea:	c8 f3       	brcs	.-14     	; 0x2de <qt_init_sensing_with_burst+0x12>
     2ec:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <time_of_last_call_ms>
     2f0:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <time_of_last_call_ms+0x1>
     2f4:	00 93 07 20 	sts	0x2007, r16	; 0x802007 <burst_proc>
     2f8:	10 93 08 20 	sts	0x2008, r17	; 0x802008 <burst_proc+0x1>
     2fc:	ce 01       	movw	r24, r28
     2fe:	06 d4       	rcall	.+2060   	; 0xb0c <burst_init>
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	e5 e0       	ldi	r30, 0x05	; 5
     306:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__epilogue_restores__+0x1a>

0000030a <qt_get_library_sig>:
     30a:	fc 01       	movw	r30, r24
     30c:	80 e2       	ldi	r24, 0x20	; 32
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	80 83       	st	Z, r24
     312:	91 83       	std	Z+1, r25	; 0x01
     314:	12 82       	std	Z+2, r1	; 0x02
     316:	13 82       	std	Z+3, r1	; 0x03
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	95 e0       	ldi	r25, 0x05	; 5
     31c:	84 83       	std	Z+4, r24	; 0x04
     31e:	95 83       	std	Z+5, r25	; 0x05
     320:	08 95       	ret

00000322 <qt_calibrate_sensing>:
     322:	cf 93       	push	r28
     324:	c0 e0       	ldi	r28, 0x00	; 0
     326:	03 c0       	rjmp	.+6      	; 0x32e <qt_calibrate_sensing+0xc>
     328:	8c 2f       	mov	r24, r28
     32a:	24 d1       	rcall	.+584    	; 0x574 <start_cal_sensor>
     32c:	cf 5f       	subi	r28, 0xFF	; 255
     32e:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <num_sensors>
     332:	c8 17       	cp	r28, r24
     334:	c8 f3       	brcs	.-14     	; 0x328 <qt_calibrate_sensing+0x6>
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <qt_reset_sensing>:
     33a:	10 92 2a 20 	sts	0x202A, r1	; 0x80202a <num_sensors>
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <qt_config_data+0x1>
     344:	84 e1       	ldi	r24, 0x14	; 20
     346:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <qt_config_data+0x4>
     34a:	95 e0       	ldi	r25, 0x05	; 5
     34c:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <qt_config_data+0x5>
     350:	10 92 21 20 	sts	0x2021, r1	; 0x802021 <qt_config_data+0x3>
     354:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <qt_config_data+0x2>
     358:	ef e1       	ldi	r30, 0x1F	; 31
     35a:	f0 e2       	ldi	r31, 0x20	; 32
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	82 93       	st	-Z, r24
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	86 83       	std	Z+6, r24	; 0x06
     364:	d8 d3       	rcall	.+1968   	; 0xb16 <burst_reset>
     366:	10 92 0b 20 	sts	0x200B, r1	; 0x80200b <qt_filter_callback>
     36a:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <qt_filter_callback+0x1>
     36e:	08 95       	ret

00000370 <qt_measure_sensors>:
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <lib_status_flags>
     37a:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <lib_status_flags+0x1>
     37e:	40 91 25 20 	lds	r20, 0x2025	; 0x802025 <time_of_last_call_ms>
     382:	50 91 26 20 	lds	r21, 0x2026	; 0x802026 <time_of_last_call_ms+0x1>
     386:	80 93 25 20 	sts	0x2025, r24	; 0x802025 <time_of_last_call_ms>
     38a:	90 93 26 20 	sts	0x2026, r25	; 0x802026 <time_of_last_call_ms+0x1>
     38e:	20 91 27 20 	lds	r18, 0x2027	; 0x802027 <timer_prescale>
     392:	30 91 28 20 	lds	r19, 0x2028	; 0x802028 <timer_prescale+0x1>
     396:	24 1b       	sub	r18, r20
     398:	35 0b       	sbc	r19, r21
     39a:	28 0f       	add	r18, r24
     39c:	39 1f       	adc	r19, r25
     39e:	c0 e0       	ldi	r28, 0x00	; 0
     3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <qt_measure_sensors+0x38>
     3a2:	28 5c       	subi	r18, 0xC8	; 200
     3a4:	30 40       	sbci	r19, 0x00	; 0
     3a6:	cf 5f       	subi	r28, 0xFF	; 255
     3a8:	28 3c       	cpi	r18, 0xC8	; 200
     3aa:	31 05       	cpc	r19, r1
     3ac:	d0 f7       	brcc	.-12     	; 0x3a2 <qt_measure_sensors+0x32>
     3ae:	20 93 27 20 	sts	0x2027, r18	; 0x802027 <timer_prescale>
     3b2:	30 93 28 20 	sts	0x2028, r19	; 0x802028 <timer_prescale+0x1>
     3b6:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <dht_counter>
     3ba:	88 23       	and	r24, r24
     3bc:	41 f0       	breq	.+16     	; 0x3ce <qt_measure_sensors+0x5e>
     3be:	8c 17       	cp	r24, r28
     3c0:	18 f4       	brcc	.+6      	; 0x3c8 <qt_measure_sensors+0x58>
     3c2:	10 92 29 20 	sts	0x2029, r1	; 0x802029 <dht_counter>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <qt_measure_sensors+0x5e>
     3c8:	8c 1b       	sub	r24, r28
     3ca:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <dht_counter>
     3ce:	b4 d3       	rcall	.+1896   	; 0xb38 <burst>
     3d0:	e0 91 0b 20 	lds	r30, 0x200B	; 0x80200b <qt_filter_callback>
     3d4:	f0 91 0c 20 	lds	r31, 0x200C	; 0x80200c <qt_filter_callback+0x1>
     3d8:	30 97       	sbiw	r30, 0x00	; 0
     3da:	09 f0       	breq	.+2      	; 0x3de <qt_measure_sensors+0x6e>
     3dc:	09 95       	icall
     3de:	10 e0       	ldi	r17, 0x00	; 0
     3e0:	d0 e0       	ldi	r29, 0x00	; 0
     3e2:	05 c0       	rjmp	.+10     	; 0x3ee <qt_measure_sensors+0x7e>
     3e4:	8d 2f       	mov	r24, r29
     3e6:	6c 2f       	mov	r22, r28
     3e8:	d9 d0       	rcall	.+434    	; 0x59c <process_sensor>
     3ea:	18 2b       	or	r17, r24
     3ec:	df 5f       	subi	r29, 0xFF	; 255
     3ee:	50 91 2a 20 	lds	r21, 0x202A	; 0x80202a <num_sensors>
     3f2:	d5 17       	cp	r29, r21
     3f4:	b8 f3       	brcs	.-18     	; 0x3e4 <qt_measure_sensors+0x74>
     3f6:	11 23       	and	r17, r17
     3f8:	49 f0       	breq	.+18     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3fa:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <lib_status_flags>
     3fe:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <lib_status_flags+0x1>
     402:	91 60       	ori	r25, 0x01	; 1
     404:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <lib_status_flags>
     408:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <lib_status_flags+0x1>
     40c:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <qt_measure_data+0x10>
     410:	ab e2       	ldi	r26, 0x2B	; 43
     412:	b0 e2       	ldi	r27, 0x20	; 32
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	18 c0       	rjmp	.+48     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     41c:	2c 91       	ld	r18, X
     41e:	28 71       	andi	r18, 0x18	; 24
     420:	99 f0       	breq	.+38     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     422:	e4 2f       	mov	r30, r20
     424:	e6 95       	lsr	r30
     426:	e6 95       	lsr	r30
     428:	e6 95       	lsr	r30
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	e3 5f       	subi	r30, 0xF3	; 243
     42e:	ff 4d       	sbci	r31, 0xDF	; 223
     430:	24 2f       	mov	r18, r20
     432:	27 70       	andi	r18, 0x07	; 7
     434:	bc 01       	movw	r22, r24
     436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     438:	66 0f       	add	r22, r22
     43a:	77 1f       	adc	r23, r23
     43c:	2a 95       	dec	r18
     43e:	e2 f7       	brpl	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     440:	9b 01       	movw	r18, r22
     442:	30 89       	ldd	r19, Z+16	; 0x10
     444:	32 2b       	or	r19, r18
     446:	30 8b       	std	Z+16, r19	; 0x10
     448:	4f 5f       	subi	r20, 0xFF	; 255
     44a:	16 96       	adiw	r26, 0x06	; 6
     44c:	45 17       	cp	r20, r21
     44e:	31 f7       	brne	.-52     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     450:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <lib_status_flags>
     454:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <lib_status_flags+0x1>
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	08 95       	ret

00000460 <qt_enable_key>:
     460:	90 91 2a 20 	lds	r25, 0x202A	; 0x80202a <num_sensors>
     464:	a9 2f       	mov	r26, r25
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	fd 01       	movw	r30, r26
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	ea 0f       	add	r30, r26
     470:	fb 1f       	adc	r31, r27
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	e5 5d       	subi	r30, 0xD5	; 213
     478:	ff 4d       	sbci	r31, 0xDF	; 223
     47a:	43 83       	std	Z+3, r20	; 0x03
     47c:	67 70       	andi	r22, 0x07	; 7
     47e:	85 83       	std	Z+5, r24	; 0x05
     480:	23 70       	andi	r18, 0x03	; 3
     482:	66 0f       	add	r22, r22
     484:	66 0f       	add	r22, r22
     486:	66 0f       	add	r22, r22
     488:	26 2b       	or	r18, r22
     48a:	24 83       	std	Z+4, r18	; 0x04
     48c:	9f 5f       	subi	r25, 0xFF	; 255
     48e:	90 93 2a 20 	sts	0x202A, r25	; 0x80202a <num_sensors>
     492:	08 95       	ret

00000494 <qt_get_sensor_delta>:
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	c8 2f       	mov	r28, r24
     49c:	d0 e0       	ldi	r29, 0x00	; 0
     49e:	fe 01       	movw	r30, r28
     4a0:	ee 0f       	add	r30, r30
     4a2:	ff 1f       	adc	r31, r31
     4a4:	ec 0f       	add	r30, r28
     4a6:	fd 1f       	adc	r31, r29
     4a8:	ee 0f       	add	r30, r30
     4aa:	ff 1f       	adc	r31, r31
     4ac:	e5 5d       	subi	r30, 0xD5	; 213
     4ae:	ff 4d       	sbci	r31, 0xDF	; 223
     4b0:	95 81       	ldd	r25, Z+5	; 0x05
     4b2:	23 81       	ldd	r18, Z+3	; 0x03
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	00 90 1e 20 	lds	r0, 0x201E	; 0x80201e <qt_config_data>
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <qt_get_sensor_delta+0x2c>
     4bc:	35 95       	asr	r19
     4be:	27 95       	ror	r18
     4c0:	0a 94       	dec	r0
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <qt_get_sensor_delta+0x28>
     4c4:	12 2f       	mov	r17, r18
     4c6:	24 30       	cpi	r18, 0x04	; 4
     4c8:	08 f4       	brcc	.+2      	; 0x4cc <qt_get_sensor_delta+0x38>
     4ca:	14 e0       	ldi	r17, 0x04	; 4
     4cc:	20 91 2a 20 	lds	r18, 0x202A	; 0x80202a <num_sensors>
     4d0:	82 17       	cp	r24, r18
     4d2:	60 f5       	brcc	.+88     	; 0x52c <qt_get_sensor_delta+0x98>
     4d4:	89 2f       	mov	r24, r25
     4d6:	04 d3       	rcall	.+1544   	; 0xae0 <get_channel_delta>
     4d8:	41 2f       	mov	r20, r17
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	16 95       	lsr	r17
     4de:	16 95       	lsr	r17
     4e0:	21 2f       	mov	r18, r17
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	24 1b       	sub	r18, r20
     4e6:	35 0b       	sbc	r19, r21
     4e8:	28 17       	cp	r18, r24
     4ea:	39 07       	cpc	r19, r25
     4ec:	64 f4       	brge	.+24     	; 0x506 <qt_get_sensor_delta+0x72>
     4ee:	fe 01       	movw	r30, r28
     4f0:	ee 0f       	add	r30, r30
     4f2:	ff 1f       	adc	r31, r31
     4f4:	ec 0f       	add	r30, r28
     4f6:	fd 1f       	adc	r31, r29
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	e5 5d       	subi	r30, 0xD5	; 213
     4fe:	ff 4d       	sbci	r31, 0xDF	; 223
     500:	24 81       	ldd	r18, Z+4	; 0x04
     502:	2b 7f       	andi	r18, 0xFB	; 251
     504:	24 83       	std	Z+4, r18	; 0x04
     506:	50 95       	com	r21
     508:	41 95       	neg	r20
     50a:	5f 4f       	sbci	r21, 0xFF	; 255
     50c:	48 17       	cp	r20, r24
     50e:	59 07       	cpc	r21, r25
     510:	7c f0       	brlt	.+30     	; 0x530 <qt_get_sensor_delta+0x9c>
     512:	fe 01       	movw	r30, r28
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	ec 0f       	add	r30, r28
     51a:	fd 1f       	adc	r31, r29
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	e5 5d       	subi	r30, 0xD5	; 213
     522:	ff 4d       	sbci	r31, 0xDF	; 223
     524:	24 81       	ldd	r18, Z+4	; 0x04
     526:	24 60       	ori	r18, 0x04	; 4
     528:	24 83       	std	Z+4, r18	; 0x04
     52a:	02 c0       	rjmp	.+4      	; 0x530 <qt_get_sensor_delta+0x9c>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	08 95       	ret

00000538 <goto_no_detect>:
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	fc 01       	movw	r30, r24
     53c:	ee 0f       	add	r30, r30
     53e:	ff 1f       	adc	r31, r31
     540:	e8 0f       	add	r30, r24
     542:	f9 1f       	adc	r31, r25
     544:	ee 0f       	add	r30, r30
     546:	ff 1f       	adc	r31, r31
     548:	e5 5d       	subi	r30, 0xD5	; 213
     54a:	ff 4d       	sbci	r31, 0xDF	; 223
     54c:	25 81       	ldd	r18, Z+5	; 0x05
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	80 83       	st	Z, r24
     552:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <lib_status_flags>
     556:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <lib_status_flags+0x1>
     55a:	82 60       	ori	r24, 0x02	; 2
     55c:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <lib_status_flags>
     560:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <lib_status_flags+0x1>
     564:	12 82       	std	Z+2, r1	; 0x02
     566:	e2 2f       	mov	r30, r18
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	ed 5b       	subi	r30, 0xBD	; 189
     56c:	ff 4d       	sbci	r31, 0xDF	; 223
     56e:	80 e8       	ldi	r24, 0x80	; 128
     570:	80 83       	st	Z, r24
     572:	08 95       	ret

00000574 <start_cal_sensor>:
     574:	cf 93       	push	r28
     576:	c8 2f       	mov	r28, r24
     578:	df df       	rcall	.-66     	; 0x538 <goto_no_detect>
     57a:	8c 2f       	mov	r24, r28
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	fc 01       	movw	r30, r24
     580:	ee 0f       	add	r30, r30
     582:	ff 1f       	adc	r31, r31
     584:	e8 0f       	add	r30, r24
     586:	f9 1f       	adc	r31, r25
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	e5 5d       	subi	r30, 0xD5	; 213
     58e:	ff 4d       	sbci	r31, 0xDF	; 223
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	80 83       	st	Z, r24
     594:	8f e0       	ldi	r24, 0x0F	; 15
     596:	81 83       	std	Z+1, r24	; 0x01
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <process_sensor>:
     59c:	2f 92       	push	r2
     59e:	3f 92       	push	r3
     5a0:	4f 92       	push	r4
     5a2:	5f 92       	push	r5
     5a4:	6f 92       	push	r6
     5a6:	7f 92       	push	r7
     5a8:	8f 92       	push	r8
     5aa:	9f 92       	push	r9
     5ac:	bf 92       	push	r11
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	0f 92       	push	r0
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	08 2f       	mov	r16, r24
     5c6:	16 2f       	mov	r17, r22
     5c8:	65 df       	rcall	.-310    	; 0x494 <qt_get_sensor_delta>
     5ca:	4c 01       	movw	r8, r24
     5cc:	c0 2e       	mov	r12, r16
     5ce:	dd 24       	eor	r13, r13
     5d0:	b6 01       	movw	r22, r12
     5d2:	66 0f       	add	r22, r22
     5d4:	77 1f       	adc	r23, r23
     5d6:	fb 01       	movw	r30, r22
     5d8:	ec 0d       	add	r30, r12
     5da:	fd 1d       	adc	r31, r13
     5dc:	ee 0f       	add	r30, r30
     5de:	ff 1f       	adc	r31, r31
     5e0:	e5 5d       	subi	r30, 0xD5	; 213
     5e2:	ff 4d       	sbci	r31, 0xDF	; 223
     5e4:	24 81       	ldd	r18, Z+4	; 0x04
     5e6:	43 81       	ldd	r20, Z+3	; 0x03
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	82 2f       	mov	r24, r18
     5ec:	83 70       	andi	r24, 0x03	; 3
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	fa 01       	movw	r30, r20
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <process_sensor+0x5e>
     5f6:	f5 95       	asr	r31
     5f8:	e7 95       	ror	r30
     5fa:	8a 95       	dec	r24
     5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <process_sensor+0x5a>
     5fe:	cf 01       	movw	r24, r30
     600:	e2 30       	cpi	r30, 0x02	; 2
     602:	08 f4       	brcc	.+2      	; 0x606 <process_sensor+0x6a>
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	da 01       	movw	r26, r20
     608:	a8 1b       	sub	r26, r24
     60a:	b1 09       	sbc	r27, r1
     60c:	fb 01       	movw	r30, r22
     60e:	ec 0d       	add	r30, r12
     610:	fd 1d       	adc	r31, r13
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	e5 5d       	subi	r30, 0xD5	; 213
     618:	ff 4d       	sbci	r31, 0xDF	; 223
     61a:	80 81       	ld	r24, Z
     61c:	84 30       	cpi	r24, 0x04	; 4
     61e:	09 f4       	brne	.+2      	; 0x622 <process_sensor+0x86>
     620:	e3 c0       	rjmp	.+454    	; 0x7e8 <process_sensor+0x24c>
     622:	85 30       	cpi	r24, 0x05	; 5
     624:	30 f4       	brcc	.+12     	; 0x632 <process_sensor+0x96>
     626:	81 30       	cpi	r24, 0x01	; 1
     628:	71 f0       	breq	.+28     	; 0x646 <process_sensor+0xaa>
     62a:	82 30       	cpi	r24, 0x02	; 2
     62c:	09 f0       	breq	.+2      	; 0x630 <process_sensor+0x94>
     62e:	44 c2       	rjmp	.+1160   	; 0xab8 <process_sensor+0x51c>
     630:	60 c0       	rjmp	.+192    	; 0x6f2 <process_sensor+0x156>
     632:	80 31       	cpi	r24, 0x10	; 16
     634:	09 f4       	brne	.+2      	; 0x638 <process_sensor+0x9c>
     636:	77 c1       	rjmp	.+750    	; 0x926 <process_sensor+0x38a>
     638:	80 32       	cpi	r24, 0x20	; 32
     63a:	09 f4       	brne	.+2      	; 0x63e <process_sensor+0xa2>
     63c:	15 c2       	rjmp	.+1066   	; 0xa68 <process_sensor+0x4cc>
     63e:	88 30       	cpi	r24, 0x08	; 8
     640:	09 f0       	breq	.+2      	; 0x644 <process_sensor+0xa8>
     642:	3a c2       	rjmp	.+1140   	; 0xab8 <process_sensor+0x51c>
     644:	d8 c1       	rjmp	.+944    	; 0x9f6 <process_sensor+0x45a>
     646:	40 91 09 20 	lds	r20, 0x2009	; 0x802009 <lib_status_flags>
     64a:	50 91 0a 20 	lds	r21, 0x200A	; 0x80200a <lib_status_flags+0x1>
     64e:	ca 01       	movw	r24, r20
     650:	92 60       	ori	r25, 0x02	; 2
     652:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <lib_status_flags>
     656:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <lib_status_flags+0x1>
     65a:	85 81       	ldd	r24, Z+5	; 0x05
     65c:	61 81       	ldd	r22, Z+1	; 0x01
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	6a 30       	cpi	r22, 0x0A	; 10
     662:	80 f0       	brcs	.+32     	; 0x684 <process_sensor+0xe8>
     664:	fc 01       	movw	r30, r24
     666:	ee 0f       	add	r30, r30
     668:	ff 1f       	adc	r31, r31
     66a:	eb 5e       	subi	r30, 0xEB	; 235
     66c:	ff 4d       	sbci	r31, 0xDF	; 223
     66e:	dc 01       	movw	r26, r24
     670:	aa 0f       	add	r26, r26
     672:	bb 1f       	adc	r27, r27
     674:	a3 5f       	subi	r26, 0xF3	; 243
     676:	bf 4d       	sbci	r27, 0xDF	; 223
     678:	8d 91       	ld	r24, X+
     67a:	9c 91       	ld	r25, X
     67c:	11 97       	sbiw	r26, 0x01	; 1
     67e:	80 83       	st	Z, r24
     680:	91 83       	std	Z+1, r25	; 0x01
     682:	1d c0       	rjmp	.+58     	; 0x6be <process_sensor+0x122>
     684:	dc 01       	movw	r26, r24
     686:	aa 0f       	add	r26, r26
     688:	bb 1f       	adc	r27, r27
     68a:	ab 5e       	subi	r26, 0xEB	; 235
     68c:	bf 4d       	sbci	r27, 0xDF	; 223
     68e:	2d 91       	ld	r18, X+
     690:	3c 91       	ld	r19, X
     692:	11 97       	sbiw	r26, 0x01	; 1
     694:	fc 01       	movw	r30, r24
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	e3 5f       	subi	r30, 0xF3	; 243
     69c:	ff 4d       	sbci	r31, 0xDF	; 223
     69e:	80 81       	ld	r24, Z
     6a0:	91 81       	ldd	r25, Z+1	; 0x01
     6a2:	82 17       	cp	r24, r18
     6a4:	93 07       	cpc	r25, r19
     6a6:	18 f4       	brcc	.+6      	; 0x6ae <process_sensor+0x112>
     6a8:	21 50       	subi	r18, 0x01	; 1
     6aa:	30 40       	sbci	r19, 0x00	; 0
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <process_sensor+0x11c>
     6ae:	28 17       	cp	r18, r24
     6b0:	39 07       	cpc	r19, r25
     6b2:	58 f4       	brcc	.+22     	; 0x6ca <process_sensor+0x12e>
     6b4:	2f 5f       	subi	r18, 0xFF	; 255
     6b6:	3f 4f       	sbci	r19, 0xFF	; 255
     6b8:	2d 93       	st	X+, r18
     6ba:	3c 93       	st	X, r19
     6bc:	11 97       	sbiw	r26, 0x01	; 1
     6be:	48 60       	ori	r20, 0x08	; 8
     6c0:	52 60       	ori	r21, 0x02	; 2
     6c2:	40 93 09 20 	sts	0x2009, r20	; 0x802009 <lib_status_flags>
     6c6:	50 93 0a 20 	sts	0x200A, r21	; 0x80200a <lib_status_flags+0x1>
     6ca:	61 50       	subi	r22, 0x01	; 1
     6cc:	f6 01       	movw	r30, r12
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	ec 0d       	add	r30, r12
     6d4:	fd 1d       	adc	r31, r13
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	e5 5d       	subi	r30, 0xD5	; 213
     6dc:	ff 4d       	sbci	r31, 0xDF	; 223
     6de:	61 83       	std	Z+1, r22	; 0x01
     6e0:	66 23       	and	r22, r22
     6e2:	11 f4       	brne	.+4      	; 0x6e8 <process_sensor+0x14c>
     6e4:	80 2f       	mov	r24, r16
     6e6:	28 df       	rcall	.-432    	; 0x538 <goto_no_detect>
     6e8:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <qt_config_data+0x2>
     6ec:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <dht_counter>
     6f0:	db c1       	rjmp	.+950    	; 0xaa8 <process_sensor+0x50c>
     6f2:	22 ff       	sbrs	r18, 2
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <process_sensor+0x16a>
     6f6:	a5 81       	ldd	r26, Z+5	; 0x05
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	ad 5b       	subi	r26, 0xBD	; 189
     6fc:	bf 4d       	sbci	r27, 0xDF	; 223
     6fe:	1c 92       	st	X, r1
     700:	80 e2       	ldi	r24, 0x20	; 32
     702:	80 83       	st	Z, r24
     704:	c8 c1       	rjmp	.+912    	; 0xa96 <process_sensor+0x4fa>
     706:	c4 01       	movw	r24, r8
     708:	97 fe       	sbrs	r9, 7
     70a:	02 c0       	rjmp	.+4      	; 0x710 <process_sensor+0x174>
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	84 17       	cp	r24, r20
     712:	95 07       	cpc	r25, r21
     714:	68 f0       	brcs	.+26     	; 0x730 <process_sensor+0x194>
     716:	f6 01       	movw	r30, r12
     718:	ee 0f       	add	r30, r30
     71a:	ff 1f       	adc	r31, r31
     71c:	ec 0d       	add	r30, r12
     71e:	fd 1d       	adc	r31, r13
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	e5 5d       	subi	r30, 0xD5	; 213
     726:	ff 4d       	sbci	r31, 0xDF	; 223
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	80 83       	st	Z, r24
     72c:	12 82       	std	Z+2, r1	; 0x02
     72e:	be c1       	rjmp	.+892    	; 0xaac <process_sensor+0x510>
     730:	11 23       	and	r17, r17
     732:	09 f4       	brne	.+2      	; 0x736 <process_sensor+0x19a>
     734:	c1 c1       	rjmp	.+898    	; 0xab8 <process_sensor+0x51c>
     736:	80 91 29 20 	lds	r24, 0x2029	; 0x802029 <dht_counter>
     73a:	88 23       	and	r24, r24
     73c:	09 f0       	breq	.+2      	; 0x740 <process_sensor+0x1a4>
     73e:	bc c1       	rjmp	.+888    	; 0xab8 <process_sensor+0x51c>
     740:	f6 01       	movw	r30, r12
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	ec 0d       	add	r30, r12
     748:	fd 1d       	adc	r31, r13
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	e5 5d       	subi	r30, 0xD5	; 213
     750:	ff 4d       	sbci	r31, 0xDF	; 223
     752:	25 81       	ldd	r18, Z+5	; 0x05
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	d9 01       	movw	r26, r18
     758:	aa 0f       	add	r26, r26
     75a:	bb 1f       	adc	r27, r27
     75c:	ab 5e       	subi	r26, 0xEB	; 235
     75e:	bf 4d       	sbci	r27, 0xDF	; 223
     760:	8d 91       	ld	r24, X+
     762:	9c 91       	ld	r25, X
     764:	11 97       	sbiw	r26, 0x01	; 1
     766:	f9 01       	movw	r30, r18
     768:	ee 0f       	add	r30, r30
     76a:	ff 1f       	adc	r31, r31
     76c:	e3 5f       	subi	r30, 0xF3	; 243
     76e:	ff 4d       	sbci	r31, 0xDF	; 223
     770:	40 81       	ld	r20, Z
     772:	51 81       	ldd	r21, Z+1	; 0x01
     774:	f9 01       	movw	r30, r18
     776:	ed 5b       	subi	r30, 0xBD	; 189
     778:	ff 4d       	sbci	r31, 0xDF	; 223
     77a:	84 17       	cp	r24, r20
     77c:	95 07       	cpc	r25, r21
     77e:	68 f4       	brcc	.+26     	; 0x79a <process_sensor+0x1fe>
     780:	20 81       	ld	r18, Z
     782:	21 0f       	add	r18, r17
     784:	20 83       	st	Z, r18
     786:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <qt_config_data+0x5>
     78a:	30 58       	subi	r19, 0x80	; 128
     78c:	23 17       	cp	r18, r19
     78e:	08 f4       	brcc	.+2      	; 0x792 <process_sensor+0x1f6>
     790:	93 c1       	rjmp	.+806    	; 0xab8 <process_sensor+0x51c>
     792:	20 e8       	ldi	r18, 0x80	; 128
     794:	20 83       	st	Z, r18
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	10 c0       	rjmp	.+32     	; 0x7ba <process_sensor+0x21e>
     79a:	48 17       	cp	r20, r24
     79c:	59 07       	cpc	r21, r25
     79e:	d0 f4       	brcc	.+52     	; 0x7d4 <process_sensor+0x238>
     7a0:	20 81       	ld	r18, Z
     7a2:	21 1b       	sub	r18, r17
     7a4:	20 83       	st	Z, r18
     7a6:	30 e8       	ldi	r19, 0x80	; 128
     7a8:	40 91 22 20 	lds	r20, 0x2022	; 0x802022 <qt_config_data+0x4>
     7ac:	53 2f       	mov	r21, r19
     7ae:	54 1b       	sub	r21, r20
     7b0:	52 17       	cp	r21, r18
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <process_sensor+0x21a>
     7b4:	81 c1       	rjmp	.+770    	; 0xab8 <process_sensor+0x51c>
     7b6:	30 83       	st	Z, r19
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	8d 93       	st	X+, r24
     7bc:	9c 93       	st	X, r25
     7be:	11 97       	sbiw	r26, 0x01	; 1
     7c0:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <lib_status_flags>
     7c4:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <lib_status_flags+0x1>
     7c8:	88 60       	ori	r24, 0x08	; 8
     7ca:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <lib_status_flags>
     7ce:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <lib_status_flags+0x1>
     7d2:	72 c1       	rjmp	.+740    	; 0xab8 <process_sensor+0x51c>
     7d4:	80 81       	ld	r24, Z
     7d6:	81 38       	cpi	r24, 0x81	; 129
     7d8:	10 f0       	brcs	.+4      	; 0x7de <process_sensor+0x242>
     7da:	81 50       	subi	r24, 0x01	; 1
     7dc:	80 83       	st	Z, r24
     7de:	80 81       	ld	r24, Z
     7e0:	87 fd       	sbrc	r24, 7
     7e2:	6a c1       	rjmp	.+724    	; 0xab8 <process_sensor+0x51c>
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	4c c1       	rjmp	.+664    	; 0xa80 <process_sensor+0x4e4>
     7e8:	c4 01       	movw	r24, r8
     7ea:	97 fe       	sbrs	r9, 7
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <process_sensor+0x256>
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	84 17       	cp	r24, r20
     7f4:	95 07       	cpc	r25, r21
     7f6:	08 f4       	brcc	.+2      	; 0x7fa <process_sensor+0x25e>
     7f8:	45 c1       	rjmp	.+650    	; 0xa84 <process_sensor+0x4e8>
     7fa:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <qt_config_data+0x2>
     7fe:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <dht_counter>
     802:	f6 01       	movw	r30, r12
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	ec 0d       	add	r30, r12
     80a:	fd 1d       	adc	r31, r13
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	e5 5d       	subi	r30, 0xD5	; 213
     812:	ff 4d       	sbci	r31, 0xDF	; 223
     814:	82 81       	ldd	r24, Z+2	; 0x02
     816:	8f 5f       	subi	r24, 0xFF	; 255
     818:	82 83       	std	Z+2, r24	; 0x02
     81a:	84 81       	ldd	r24, Z+4	; 0x04
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	88 73       	andi	r24, 0x38	; 56
     820:	90 70       	andi	r25, 0x00	; 0
     822:	a3 e0       	ldi	r26, 0x03	; 3
     824:	96 95       	lsr	r25
     826:	87 95       	ror	r24
     828:	aa 95       	dec	r26
     82a:	e1 f7       	brne	.-8      	; 0x824 <process_sensor+0x288>
     82c:	b8 2e       	mov	r11, r24
     82e:	88 23       	and	r24, r24
     830:	d1 f5       	brne	.+116    	; 0x8a6 <process_sensor+0x30a>
     832:	4d c0       	rjmp	.+154    	; 0x8ce <process_sensor+0x332>
     834:	10 17       	cp	r17, r16
     836:	a9 f1       	breq	.+106    	; 0x8a2 <process_sensor+0x306>
     838:	81 2f       	mov	r24, r17
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	1c 01       	movw	r2, r24
     83e:	22 0c       	add	r2, r2
     840:	33 1c       	adc	r3, r3
     842:	28 0e       	add	r2, r24
     844:	39 1e       	adc	r3, r25
     846:	22 0c       	add	r2, r2
     848:	33 1c       	adc	r3, r3
     84a:	6b e2       	ldi	r22, 0x2B	; 43
     84c:	70 e2       	ldi	r23, 0x20	; 32
     84e:	26 0e       	add	r2, r22
     850:	37 1e       	adc	r3, r23
     852:	f1 01       	movw	r30, r2
     854:	84 81       	ldd	r24, Z+4	; 0x04
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	88 73       	andi	r24, 0x38	; 56
     85a:	90 70       	andi	r25, 0x00	; 0
     85c:	53 e0       	ldi	r21, 0x03	; 3
     85e:	96 95       	lsr	r25
     860:	87 95       	ror	r24
     862:	5a 95       	dec	r21
     864:	e1 f7       	brne	.-8      	; 0x85e <process_sensor+0x2c2>
     866:	b8 16       	cp	r11, r24
     868:	e1 f4       	brne	.+56     	; 0x8a2 <process_sensor+0x306>
     86a:	81 2f       	mov	r24, r17
     86c:	29 83       	std	Y+1, r18	; 0x01
     86e:	12 de       	rcall	.-988    	; 0x494 <qt_get_sensor_delta>
     870:	f1 01       	movw	r30, r2
     872:	33 81       	ldd	r19, Z+3	; 0x03
     874:	ac 01       	movw	r20, r24
     876:	43 1b       	sub	r20, r19
     878:	51 09       	sbc	r21, r1
     87a:	f2 01       	movw	r30, r4
     87c:	80 81       	ld	r24, Z
     87e:	b4 01       	movw	r22, r8
     880:	68 1b       	sub	r22, r24
     882:	71 09       	sbc	r23, r1
     884:	29 81       	ldd	r18, Y+1	; 0x01
     886:	64 17       	cp	r22, r20
     888:	75 07       	cpc	r23, r21
     88a:	14 f4       	brge	.+4      	; 0x890 <process_sensor+0x2f4>
     88c:	f3 01       	movw	r30, r6
     88e:	07 c0       	rjmp	.+14     	; 0x89e <process_sensor+0x302>
     890:	f1 01       	movw	r30, r2
     892:	80 81       	ld	r24, Z
     894:	80 31       	cpi	r24, 0x10	; 16
     896:	11 f0       	breq	.+4      	; 0x89c <process_sensor+0x300>
     898:	88 30       	cpi	r24, 0x08	; 8
     89a:	19 f4       	brne	.+6      	; 0x8a2 <process_sensor+0x306>
     89c:	f7 01       	movw	r30, r14
     89e:	10 82       	st	Z, r1
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	1f 5f       	subi	r17, 0xFF	; 255
     8a4:	0d c0       	rjmp	.+26     	; 0x8c0 <process_sensor+0x324>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	48 2e       	mov	r4, r24
     8ae:	51 2c       	mov	r5, r1
     8b0:	4e 0e       	add	r4, r30
     8b2:	5f 1e       	adc	r5, r31
     8b4:	7f 01       	movw	r14, r30
     8b6:	62 e0       	ldi	r22, 0x02	; 2
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	e6 0e       	add	r14, r22
     8bc:	f7 1e       	adc	r15, r23
     8be:	37 01       	movw	r6, r14
     8c0:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <num_sensors>
     8c4:	18 17       	cp	r17, r24
     8c6:	08 f4       	brcc	.+2      	; 0x8ca <process_sensor+0x32e>
     8c8:	b5 cf       	rjmp	.-150    	; 0x834 <process_sensor+0x298>
     8ca:	22 23       	and	r18, r18
     8cc:	79 f4       	brne	.+30     	; 0x8ec <process_sensor+0x350>
     8ce:	80 91 1f 20 	lds	r24, 0x201F	; 0x80201f <qt_config_data+0x1>
     8d2:	88 23       	and	r24, r24
     8d4:	59 f0       	breq	.+22     	; 0x8ec <process_sensor+0x350>
     8d6:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <lib_status_flags>
     8da:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <lib_status_flags+0x1>
     8de:	98 60       	ori	r25, 0x08	; 8
     8e0:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <lib_status_flags>
     8e4:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <lib_status_flags+0x1>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	01 c0       	rjmp	.+2      	; 0x8ee <process_sensor+0x352>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f6 01       	movw	r30, r12
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	ec 0d       	add	r30, r12
     8f6:	fd 1d       	adc	r31, r13
     8f8:	ee 0f       	add	r30, r30
     8fa:	ff 1f       	adc	r31, r31
     8fc:	e5 5d       	subi	r30, 0xD5	; 213
     8fe:	ff 4d       	sbci	r31, 0xDF	; 223
     900:	22 81       	ldd	r18, Z+2	; 0x02
     902:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <qt_config_data+0x1>
     906:	29 17       	cp	r18, r25
     908:	08 f4       	brcc	.+2      	; 0x90c <process_sensor+0x370>
     90a:	d7 c0       	rjmp	.+430    	; 0xaba <process_sensor+0x51e>
     90c:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <lib_status_flags>
     910:	30 91 0a 20 	lds	r19, 0x200A	; 0x80200a <lib_status_flags+0x1>
     914:	23 60       	ori	r18, 0x03	; 3
     916:	20 93 09 20 	sts	0x2009, r18	; 0x802009 <lib_status_flags>
     91a:	30 93 0a 20 	sts	0x200A, r19	; 0x80200a <lib_status_flags+0x1>
     91e:	90 e1       	ldi	r25, 0x10	; 16
     920:	90 83       	st	Z, r25
     922:	11 82       	std	Z+1, r1	; 0x01
     924:	ca c0       	rjmp	.+404    	; 0xaba <process_sensor+0x51e>
     926:	40 91 09 20 	lds	r20, 0x2009	; 0x802009 <lib_status_flags>
     92a:	50 91 0a 20 	lds	r21, 0x200A	; 0x80200a <lib_status_flags+0x1>
     92e:	22 ff       	sbrs	r18, 2
     930:	0e c0       	rjmp	.+28     	; 0x94e <process_sensor+0x3b2>
     932:	a5 81       	ldd	r26, Z+5	; 0x05
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	ad 5b       	subi	r26, 0xBD	; 189
     938:	bf 4d       	sbci	r27, 0xDF	; 223
     93a:	80 e8       	ldi	r24, 0x80	; 128
     93c:	8c 93       	st	X, r24
     93e:	80 e2       	ldi	r24, 0x20	; 32
     940:	80 83       	st	Z, r24
     942:	50 61       	ori	r21, 0x10	; 16
     944:	40 93 09 20 	sts	0x2009, r20	; 0x802009 <lib_status_flags>
     948:	50 93 0a 20 	sts	0x200A, r21	; 0x80200a <lib_status_flags+0x1>
     94c:	4c c0       	rjmp	.+152    	; 0x9e6 <process_sensor+0x44a>
     94e:	c4 01       	movw	r24, r8
     950:	97 fe       	sbrs	r9, 7
     952:	02 c0       	rjmp	.+4      	; 0x958 <process_sensor+0x3bc>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	96 01       	movw	r18, r12
     95a:	22 0f       	add	r18, r18
     95c:	33 1f       	adc	r19, r19
     95e:	8a 17       	cp	r24, r26
     960:	9b 07       	cpc	r25, r27
     962:	78 f4       	brcc	.+30     	; 0x982 <process_sensor+0x3e6>
     964:	2c 0d       	add	r18, r12
     966:	3d 1d       	adc	r19, r13
     968:	22 0f       	add	r18, r18
     96a:	33 1f       	adc	r19, r19
     96c:	25 5d       	subi	r18, 0xD5	; 213
     96e:	3f 4d       	sbci	r19, 0xDF	; 223
     970:	88 e0       	ldi	r24, 0x08	; 8
     972:	f9 01       	movw	r30, r18
     974:	80 83       	st	Z, r24
     976:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <lib_status_flags>
     97a:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <lib_status_flags+0x1>
     97e:	94 60       	ori	r25, 0x04	; 4
     980:	2e c0       	rjmp	.+92     	; 0x9de <process_sensor+0x442>
     982:	ca 01       	movw	r24, r20
     984:	81 60       	ori	r24, 0x01	; 1
     986:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <lib_status_flags>
     98a:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <lib_status_flags+0x1>
     98e:	f9 01       	movw	r30, r18
     990:	ec 0d       	add	r30, r12
     992:	fd 1d       	adc	r31, r13
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	e5 5d       	subi	r30, 0xD5	; 213
     99a:	ff 4d       	sbci	r31, 0xDF	; 223
     99c:	82 81       	ldd	r24, Z+2	; 0x02
     99e:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <qt_config_data+0x1>
     9a2:	89 17       	cp	r24, r25
     9a4:	10 f4       	brcc	.+4      	; 0x9aa <process_sensor+0x40e>
     9a6:	8f 5f       	subi	r24, 0xFF	; 255
     9a8:	82 83       	std	Z+2, r24	; 0x02
     9aa:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <qt_config_data+0x3>
     9ae:	99 23       	and	r25, r25
     9b0:	e1 f0       	breq	.+56     	; 0x9ea <process_sensor+0x44e>
     9b2:	f6 01       	movw	r30, r12
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	ec 0d       	add	r30, r12
     9ba:	fd 1d       	adc	r31, r13
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	e5 5d       	subi	r30, 0xD5	; 213
     9c2:	ff 4d       	sbci	r31, 0xDF	; 223
     9c4:	81 81       	ldd	r24, Z+1	; 0x01
     9c6:	89 17       	cp	r24, r25
     9c8:	18 f4       	brcc	.+6      	; 0x9d0 <process_sensor+0x434>
     9ca:	81 0f       	add	r24, r17
     9cc:	81 83       	std	Z+1, r24	; 0x01
     9ce:	0d c0       	rjmp	.+26     	; 0x9ea <process_sensor+0x44e>
     9d0:	80 2f       	mov	r24, r16
     9d2:	d0 dd       	rcall	.-1120   	; 0x574 <start_cal_sensor>
     9d4:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <lib_status_flags>
     9d8:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <lib_status_flags+0x1>
     9dc:	92 60       	ori	r25, 0x02	; 2
     9de:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <lib_status_flags>
     9e2:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <lib_status_flags+0x1>
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <process_sensor+0x450>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 91 20 20 	lds	r25, 0x2020	; 0x802020 <qt_config_data+0x2>
     9f0:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <dht_counter>
     9f4:	62 c0       	rjmp	.+196    	; 0xaba <process_sensor+0x51e>
     9f6:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <qt_config_data+0x2>
     9fa:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <dht_counter>
     9fe:	82 81       	ldd	r24, Z+2	; 0x02
     a00:	88 23       	and	r24, r24
     a02:	09 f4       	brne	.+2      	; 0xa06 <process_sensor+0x46a>
     a04:	3f c0       	rjmp	.+126    	; 0xa84 <process_sensor+0x4e8>
     a06:	c4 01       	movw	r24, r8
     a08:	97 fe       	sbrs	r9, 7
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <process_sensor+0x474>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <lib_status_flags>
     a14:	30 91 0a 20 	lds	r19, 0x200A	; 0x80200a <lib_status_flags+0x1>
     a18:	a8 17       	cp	r26, r24
     a1a:	b9 07       	cpc	r27, r25
     a1c:	90 f4       	brcc	.+36     	; 0xa42 <process_sensor+0x4a6>
     a1e:	f6 01       	movw	r30, r12
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	ec 0d       	add	r30, r12
     a26:	fd 1d       	adc	r31, r13
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	e5 5d       	subi	r30, 0xD5	; 213
     a2e:	ff 4d       	sbci	r31, 0xDF	; 223
     a30:	80 e1       	ldi	r24, 0x10	; 16
     a32:	80 83       	st	Z, r24
     a34:	21 60       	ori	r18, 0x01	; 1
     a36:	20 93 09 20 	sts	0x2009, r18	; 0x802009 <lib_status_flags>
     a3a:	30 93 0a 20 	sts	0x200A, r19	; 0x80200a <lib_status_flags+0x1>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	06 c0       	rjmp	.+12     	; 0xa4e <process_sensor+0x4b2>
     a42:	34 60       	ori	r19, 0x04	; 4
     a44:	20 93 09 20 	sts	0x2009, r18	; 0x802009 <lib_status_flags>
     a48:	30 93 0a 20 	sts	0x200A, r19	; 0x80200a <lib_status_flags+0x1>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	f6 01       	movw	r30, r12
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	ec 0d       	add	r30, r12
     a56:	fd 1d       	adc	r31, r13
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	e5 5d       	subi	r30, 0xD5	; 213
     a5e:	ff 4d       	sbci	r31, 0xDF	; 223
     a60:	92 81       	ldd	r25, Z+2	; 0x02
     a62:	91 50       	subi	r25, 0x01	; 1
     a64:	92 83       	std	Z+2, r25	; 0x02
     a66:	29 c0       	rjmp	.+82     	; 0xaba <process_sensor+0x51e>
     a68:	a5 81       	ldd	r26, Z+5	; 0x05
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	ad 5b       	subi	r26, 0xBD	; 189
     a6e:	bf 4d       	sbci	r27, 0xDF	; 223
     a70:	8c 91       	ld	r24, X
     a72:	8f 5f       	subi	r24, 0xFF	; 255
     a74:	8c 93       	st	X, r24
     a76:	22 fd       	sbrc	r18, 2
     a78:	08 c0       	rjmp	.+16     	; 0xa8a <process_sensor+0x4ee>
     a7a:	87 ff       	sbrs	r24, 7
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <process_sensor+0x4e8>
     a7e:	80 e1       	ldi	r24, 0x10	; 16
     a80:	80 83       	st	Z, r24
     a82:	1a c0       	rjmp	.+52     	; 0xab8 <process_sensor+0x51c>
     a84:	80 2f       	mov	r24, r16
     a86:	58 dd       	rcall	.-1360   	; 0x538 <goto_no_detect>
     a88:	17 c0       	rjmp	.+46     	; 0xab8 <process_sensor+0x51c>
     a8a:	90 91 24 20 	lds	r25, 0x2024	; 0x802024 <qt_config_data+0x6>
     a8e:	89 17       	cp	r24, r25
     a90:	68 f0       	brcs	.+26     	; 0xaac <process_sensor+0x510>
     a92:	80 2f       	mov	r24, r16
     a94:	6f dd       	rcall	.-1314   	; 0x574 <start_cal_sensor>
     a96:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <lib_status_flags>
     a9a:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <lib_status_flags+0x1>
     a9e:	90 61       	ori	r25, 0x10	; 16
     aa0:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <lib_status_flags>
     aa4:	90 93 0a 20 	sts	0x200A, r25	; 0x80200a <lib_status_flags+0x1>
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	07 c0       	rjmp	.+14     	; 0xaba <process_sensor+0x51e>
     aac:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <lib_status_flags>
     ab0:	90 91 0a 20 	lds	r25, 0x200A	; 0x80200a <lib_status_flags+0x1>
     ab4:	94 60       	ori	r25, 0x04	; 4
     ab6:	f4 cf       	rjmp	.-24     	; 0xaa0 <process_sensor+0x504>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0f 90       	pop	r0
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	bf 90       	pop	r11
     ace:	9f 90       	pop	r9
     ad0:	8f 90       	pop	r8
     ad2:	7f 90       	pop	r7
     ad4:	6f 90       	pop	r6
     ad6:	5f 90       	pop	r5
     ad8:	4f 90       	pop	r4
     ada:	3f 90       	pop	r3
     adc:	2f 90       	pop	r2
     ade:	08 95       	ret

00000ae0 <get_channel_delta>:
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	fc 01       	movw	r30, r24
     ae4:	34 96       	adiw	r30, 0x04	; 4
     ae6:	2d e0       	ldi	r18, 0x0D	; 13
     ae8:	30 e2       	ldi	r19, 0x20	; 32
     aea:	ee 0f       	add	r30, r30
     aec:	ff 1f       	adc	r31, r31
     aee:	e2 0f       	add	r30, r18
     af0:	f3 1f       	adc	r31, r19
     af2:	dc 01       	movw	r26, r24
     af4:	aa 0f       	add	r26, r26
     af6:	bb 1f       	adc	r27, r27
     af8:	a2 0f       	add	r26, r18
     afa:	b3 1f       	adc	r27, r19
     afc:	80 81       	ld	r24, Z
     afe:	91 81       	ldd	r25, Z+1	; 0x01
     b00:	2d 91       	ld	r18, X+
     b02:	3c 91       	ld	r19, X
     b04:	11 97       	sbiw	r26, 0x01	; 1
     b06:	82 1b       	sub	r24, r18
     b08:	93 0b       	sbc	r25, r19
     b0a:	08 95       	ret

00000b0c <burst_init>:
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	11 f0       	breq	.+4      	; 0xb14 <burst_init+0x8>
     b10:	fc 01       	movw	r30, r24
     b12:	09 95       	icall
     b14:	08 95       	ret

00000b16 <burst_reset>:
     b16:	10 92 4b 20 	sts	0x204B, r1	; 0x80204b <SNS_array>
     b1a:	10 92 4c 20 	sts	0x204C, r1	; 0x80204c <SNS_array+0x1>
     b1e:	10 92 47 20 	sts	0x2047, r1	; 0x802047 <SNSK_array>
     b22:	10 92 48 20 	sts	0x2048, r1	; 0x802048 <SNSK_array+0x1>
     b26:	10 92 4d 20 	sts	0x204D, r1	; 0x80204d <SNS_array+0x2>
     b2a:	10 92 4e 20 	sts	0x204E, r1	; 0x80204e <SNS_array+0x3>
     b2e:	10 92 49 20 	sts	0x2049, r1	; 0x802049 <SNSK_array+0x2>
     b32:	10 92 4a 20 	sts	0x204A, r1	; 0x80204a <SNSK_array+0x3>
     b36:	08 95       	ret

00000b38 <burst>:
     b38:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <SNS_array+0x2>
     b3c:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <SNS_array>
     b40:	89 2b       	or	r24, r25
     b42:	41 f0       	breq	.+16     	; 0xb54 <burst+0x1c>
     b44:	e0 91 07 20 	lds	r30, 0x2007	; 0x802007 <burst_proc>
     b48:	f0 91 08 20 	lds	r31, 0x2008	; 0x802008 <burst_proc+0x1>
     b4c:	30 97       	sbiw	r30, 0x00	; 0
     b4e:	11 f0       	breq	.+4      	; 0xb54 <burst+0x1c>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	09 95       	icall
     b54:	80 91 4e 20 	lds	r24, 0x204E	; 0x80204e <SNS_array+0x3>
     b58:	90 91 4c 20 	lds	r25, 0x204C	; 0x80204c <SNS_array+0x1>
     b5c:	89 2b       	or	r24, r25
     b5e:	41 f0       	breq	.+16     	; 0xb70 <burst+0x38>
     b60:	e0 91 07 20 	lds	r30, 0x2007	; 0x802007 <burst_proc>
     b64:	f0 91 08 20 	lds	r31, 0x2008	; 0x802008 <burst_proc+0x1>
     b68:	30 97       	sbiw	r30, 0x00	; 0
     b6a:	11 f0       	breq	.+4      	; 0xb70 <burst+0x38>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	09 95       	icall
     b70:	08 95       	ret

00000b72 <init_start_mode_pins>:

}

void init_audio_timer()
{
	TCC4.CTRLA =
     b72:	e0 e6       	ldi	r30, 0x60	; 96
     b74:	f6 e0       	ldi	r31, 0x06	; 6
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	81 83       	std	Z+1, r24	; 0x01
     b7a:	80 e1       	ldi	r24, 0x10	; 16
     b7c:	86 8b       	std	Z+22, r24	; 0x16
     b7e:	80 e4       	ldi	r24, 0x40	; 64
     b80:	82 83       	std	Z+2, r24	; 0x02
     b82:	08 95       	ret

00000b84 <init_clock>:
     b84:	e0 e5       	ldi	r30, 0x50	; 80
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	82 60       	ori	r24, 0x02	; 2
     b8c:	80 83       	st	Z, r24
     b8e:	e1 e5       	ldi	r30, 0x51	; 81
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	81 ff       	sbrs	r24, 1
     b96:	fd cf       	rjmp	.-6      	; 0xb92 <init_clock+0xe>
     b98:	88 ed       	ldi	r24, 0xD8	; 216
     b9a:	84 bf       	out	0x34, r24	; 52
     b9c:	e0 e4       	ldi	r30, 0x40	; 64
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	80 83       	st	Z, r24
     ba4:	83 83       	std	Z+3, r24	; 0x03
     ba6:	08 95       	ret

00000ba8 <init_pins_normal>:
     ba8:	85 e0       	ldi	r24, 0x05	; 5
     baa:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f7601>
     bae:	e0 e6       	ldi	r30, 0x60	; 96
     bb0:	f6 e0       	ldi	r31, 0x06	; 6
     bb2:	8a e9       	ldi	r24, 0x9A	; 154
     bb4:	81 83       	std	Z+1, r24	; 0x01
     bb6:	84 e4       	ldi	r24, 0x44	; 68
     bb8:	82 83       	std	Z+2, r24	; 0x02
     bba:	e0 e4       	ldi	r30, 0x40	; 64
     bbc:	f6 e0       	ldi	r31, 0x06	; 6
     bbe:	10 8a       	std	Z+16, r1	; 0x10
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	81 8b       	std	Z+17, r24	; 0x11
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	83 8b       	std	Z+19, r24	; 0x13
     bc8:	8b e0       	ldi	r24, 0x0B	; 11
     bca:	81 83       	std	Z+1, r24	; 0x01
     bcc:	08 95       	ret

00000bce <init_usart_normal>:
     bce:	e0 ec       	ldi	r30, 0xC0	; 192
     bd0:	f9 e0       	ldi	r31, 0x09	; 9
     bd2:	12 82       	std	Z+2, r1	; 0x02
     bd4:	88 e1       	ldi	r24, 0x18	; 24
     bd6:	83 83       	std	Z+3, r24	; 0x03
     bd8:	80 ec       	ldi	r24, 0xC0	; 192
     bda:	84 83       	std	Z+4, r24	; 0x04
     bdc:	15 82       	std	Z+5, r1	; 0x05
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 c6 09 	sts	0x09C6, r24	; 0x8009c6 <__TEXT_REGION_LENGTH__+0x7f79c6>
     be4:	17 82       	std	Z+7, r1	; 0x07
     be6:	e0 ec       	ldi	r30, 0xC0	; 192
     be8:	f8 e0       	ldi	r31, 0x08	; 8
     bea:	83 e1       	ldi	r24, 0x13	; 19
     bec:	86 83       	std	Z+6, r24	; 0x06
     bee:	17 82       	std	Z+7, r1	; 0x07
     bf0:	12 82       	std	Z+2, r1	; 0x02
     bf2:	82 ec       	ldi	r24, 0xC2	; 194
     bf4:	84 83       	std	Z+4, r24	; 0x04
     bf6:	15 82       	std	Z+5, r1	; 0x05
     bf8:	88 e0       	ldi	r24, 0x08	; 8
     bfa:	83 83       	std	Z+3, r24	; 0x03
     bfc:	08 95       	ret

00000bfe <init_edma_normal>:
     bfe:	e0 e0       	ldi	r30, 0x00	; 0
     c00:	f1 e0       	ldi	r31, 0x01	; 1
     c02:	94 e0       	ldi	r25, 0x04	; 4
     c04:	90 8b       	std	Z+16, r25	; 0x10
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	81 8b       	std	Z+17, r24	; 0x11
     c0a:	81 e3       	ldi	r24, 0x31	; 49
     c0c:	82 8b       	std	Z+18, r24	; 0x12
     c0e:	2c e6       	ldi	r18, 0x6C	; 108
     c10:	24 8b       	std	Z+20, r18	; 0x14
     c12:	90 a3       	std	Z+32, r25	; 0x20
     c14:	11 a2       	std	Z+33, r1	; 0x21
     c16:	90 e3       	ldi	r25, 0x30	; 48
     c18:	92 a3       	std	Z+34, r25	; 0x22
     c1a:	9d e6       	ldi	r25, 0x6D	; 109
     c1c:	94 a3       	std	Z+36, r25	; 0x24
     c1e:	82 ab       	std	Z+50, r24	; 0x32
     c20:	86 e1       	ldi	r24, 0x16	; 22
     c22:	84 ab       	std	Z+52, r24	; 0x34
     c24:	85 e0       	ldi	r24, 0x05	; 5
     c26:	80 ab       	std	Z+48, r24	; 0x30
     c28:	82 e1       	ldi	r24, 0x12	; 18
     c2a:	81 ab       	std	Z+49, r24	; 0x31
     c2c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f7141>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7f7142>
     c36:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f7143>
     c3a:	80 ec       	ldi	r24, 0xC0	; 192
     c3c:	98 e0       	ldi	r25, 0x08	; 8
     c3e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x7f714c>
     c42:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x7f714d>
     c46:	8d e4       	ldi	r24, 0x4D	; 77
     c48:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__TEXT_REGION_LENGTH__+0x7f7144>
     c4c:	81 e8       	ldi	r24, 0x81	; 129
     c4e:	80 83       	st	Z, r24
     c50:	08 95       	ret

00000c52 <init_xcl>:
     c52:	e0 e6       	ldi	r30, 0x60	; 96
     c54:	f4 e0       	ldi	r31, 0x04	; 4
     c56:	81 e1       	ldi	r24, 0x11	; 17
     c58:	84 83       	std	Z+4, r24	; 0x04
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	85 83       	std	Z+5, r24	; 0x05
     c5e:	8e e9       	ldi	r24, 0x9E	; 158
     c60:	86 83       	std	Z+6, r24	; 0x06
     c62:	86 e1       	ldi	r24, 0x16	; 22
     c64:	86 87       	std	Z+14, r24	; 0x0e
     c66:	8d e0       	ldi	r24, 0x0D	; 13
     c68:	84 87       	std	Z+12, r24	; 0x0c
     c6a:	84 e4       	ldi	r24, 0x44	; 68
     c6c:	80 83       	st	Z, r24
     c6e:	80 e5       	ldi	r24, 0x50	; 80
     c70:	81 83       	std	Z+1, r24	; 0x01
     c72:	80 e4       	ldi	r24, 0x40	; 64
     c74:	82 83       	std	Z+2, r24	; 0x02
     c76:	80 ea       	ldi	r24, 0xA0	; 160
     c78:	83 83       	std	Z+3, r24	; 0x03
     c7a:	08 95       	ret

00000c7c <init_light_map_timer>:
	TC_CLKSEL_DIV1_gc;		//  prescaler clk/1
}

void init_light_map_timer()
{
	TCC5_CTRLA = 0; //Prescaler off
     c7c:	e0 e4       	ldi	r30, 0x40	; 64
     c7e:	f8 e0       	ldi	r31, 0x08	; 8
     c80:	10 82       	st	Z, r1
	TCC5_INTCTRLA = TC_OVFINTLVL_LO_gc;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <__TEXT_REGION_LENGTH__+0x7f7846>

	TCC5.PER = TIMER_PER_MS;
     c88:	8d e7       	ldi	r24, 0x7D	; 125
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	86 a3       	std	Z+38, r24	; 0x26
     c8e:	97 a3       	std	Z+39, r25	; 0x27
     c90:	08 95       	ret

00000c92 <init_qTouch_timer>:
}

void init_qTouch_timer()
{
	RTC.PER = TICKS_PER_MS * qt_measurement_period_msec;
     c92:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <qt_measurement_period_msec>
     c96:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <qt_measurement_period_msec+0x1>
     c9a:	e0 e0       	ldi	r30, 0x00	; 0
     c9c:	f4 e0       	ldi	r31, 0x04	; 4
     c9e:	82 87       	std	Z+10, r24	; 0x0a
     ca0:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
     ca6:	82 83       	std	Z+2, r24	; 0x02
     ca8:	08 95       	ret

00000caa <init_event_channels>:

void init_event_channels()
{
	
	//Audio
	EVSYS.CH1MUX = EVSYS_CHMUX_TCC4_OVF_gc;        // Event ch0 = tcc4 overflow
     caa:	e0 e8       	ldi	r30, 0x80	; 128
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	80 ec       	ldi	r24, 0xC0	; 192
     cb0:	81 83       	std	Z+1, r24	; 0x01
	
	//Lights
	// Setup Event channel 0 to TxD (async)
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN3_gc;
     cb2:	83 e6       	ldi	r24, 0x63	; 99
     cb4:	80 83       	st	Z, r24
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
     cb6:	10 86       	std	Z+8, r1	; 0x08
	// Setup Event channel 6 to XCK rising edge
	EVSYS.CH6MUX = EVSYS_CHMUX_PORTC_PIN1_gc;
     cb8:	81 e6       	ldi	r24, 0x61	; 97
     cba:	86 83       	std	Z+6, r24	; 0x06
	EVSYS.CH6CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
     cbc:	16 86       	std	Z+14, r1	; 0x0e
     cbe:	08 95       	ret

00000cc0 <init_DAC>:
}

void init_DAC()
{
	DACA.CTRLB =
     cc0:	e0 e0       	ldi	r30, 0x00	; 0
     cc2:	f3 e0       	ldi	r31, 0x03	; 3
     cc4:	82 e2       	ldi	r24, 0x22	; 34
     cc6:	81 83       	std	Z+1, r24	; 0x01
	DAC_CHSEL_SINGLE1_gc |          // DAC ch1 is active
	DAC_CH1TRIG_bm;			// DAC ch1 auto triggered by an event (CH1)
	DACA.CTRLC =
     cc8:	88 e0       	ldi	r24, 0x08	; 8
     cca:	82 83       	std	Z+2, r24	; 0x02
	DAC_REFSEL_AVCC_gc;// | DAC_LEFTADJ_bm ;             // Use AVCC (3.3v), non-left adj
	DACA.EVCTRL =
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	83 83       	std	Z+3, r24	; 0x03
	DAC_EVSEL_1_gc;                 // Event Ch1 triggers the DAC conversion
	DACA.CTRLA = DAC_CH1EN_bm | DAC_ENABLE_bm;  // enable DACA channel 1
     cd0:	89 e0       	ldi	r24, 0x09	; 9
     cd2:	80 83       	st	Z, r24
     cd4:	08 95       	ret

00000cd6 <qt_set_parameters>:
}

void qt_set_parameters( void )
{
	/*  This will be modified by the user to different values   */
	qt_config_data.qt_di              = DEF_QT_DI;
     cd6:	ee e1       	ldi	r30, 0x1E	; 30
     cd8:	f0 e2       	ldi	r31, 0x20	; 32
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	81 83       	std	Z+1, r24	; 0x01
	qt_config_data.qt_neg_drift_rate  = DEF_QT_NEG_DRIFT_RATE;
     cde:	84 e1       	ldi	r24, 0x14	; 20
     ce0:	84 83       	std	Z+4, r24	; 0x04
	qt_config_data.qt_pos_drift_rate  = DEF_QT_POS_DRIFT_RATE;
     ce2:	95 e0       	ldi	r25, 0x05	; 5
     ce4:	95 83       	std	Z+5, r25	; 0x05
	qt_config_data.qt_max_on_duration = DEF_QT_MAX_ON_DURATION;
     ce6:	13 82       	std	Z+3, r1	; 0x03
	qt_config_data.qt_drift_hold_time = DEF_QT_DRIFT_HOLD_TIME;
     ce8:	82 83       	std	Z+2, r24	; 0x02
	qt_config_data.qt_recal_threshold = DEF_QT_RECAL_THRESHOLD;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 83       	st	Z, r24
	qt_config_data.qt_pos_recal_delay = DEF_QT_POS_RECAL_DELAY;
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	86 83       	std	Z+6, r24	; 0x06
     cf2:	08 95       	ret

00000cf4 <config_keys>:
}

void config_keys(void)
{
	/*  enable sensors 0..3: keys on channels 0..3  */
	qt_enable_key( CHANNEL_0, NO_AKS_GROUP, 10u, HYST_6_25 );
     cf4:	23 e0       	ldi	r18, 0x03	; 3
     cf6:	4a e0       	ldi	r20, 0x0A	; 10
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	b1 db       	rcall	.-2206   	; 0x460 <qt_enable_key>
	qt_enable_key( CHANNEL_1, NO_AKS_GROUP, 10u, HYST_6_25 );
     cfe:	23 e0       	ldi	r18, 0x03	; 3
     d00:	4a e0       	ldi	r20, 0x0A	; 10
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	ac db       	rcall	.-2216   	; 0x460 <qt_enable_key>
	qt_enable_key( CHANNEL_2, NO_AKS_GROUP, 10u, HYST_6_25 );
     d08:	23 e0       	ldi	r18, 0x03	; 3
     d0a:	4a e0       	ldi	r20, 0x0A	; 10
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	a7 cb       	rjmp	.-2226   	; 0x460 <qt_enable_key>
     d12:	08 95       	ret

00000d14 <init_input_timeout_timer>:

/*Start of mem access init*/

void init_input_timeout_timer()
{
	RTC.PER = INPUT_TIMEOUT_PER_MS;
     d14:	e0 e0       	ldi	r30, 0x00	; 0
     d16:	f4 e0       	ldi	r31, 0x04	; 4
     d18:	88 ee       	ldi	r24, 0xE8	; 232
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	82 87       	std	Z+10, r24	; 0x0a
     d1e:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	80 83       	st	Z, r24
     d24:	08 95       	ret

00000d26 <init_pins_mem_access>:

}

void init_pins_mem_access()
{
	PORTA.DIRSET = PIN0_bm | PIN2_bm;
     d26:	85 e0       	ldi	r24, 0x05	; 5
     d28:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f7601>

	PORTD.DIRSET = PIN1_bm | PIN3_bm | PIN4_bm | PIN7_bm;
     d2c:	e0 e6       	ldi	r30, 0x60	; 96
     d2e:	f6 e0       	ldi	r31, 0x06	; 6
     d30:	8a e9       	ldi	r24, 0x9A	; 154
     d32:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm | PIN6_bm;
     d34:	84 e4       	ldi	r24, 0x44	; 68
     d36:	82 83       	std	Z+2, r24	; 0x02
	
	PORTC.DIRSET = PIN3_bm;
     d38:	e0 e4       	ldi	r30, 0x40	; 64
     d3a:	f6 e0       	ldi	r31, 0x06	; 6
     d3c:	88 e0       	ldi	r24, 0x08	; 8
     d3e:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	82 83       	std	Z+2, r24	; 0x02
     d44:	08 95       	ret

00000d46 <init_edma_mem_access>:
}

void init_edma_mem_access()
{
	//RX
	EDMA.CH0.CTRLA = EDMA_CH_SINGLE_bm;//no repeat, single shot, burst len = 1
     d46:	e0 e0       	ldi	r30, 0x00	; 0
     d48:	f1 e0       	ldi	r31, 0x01	; 1
     d4a:	94 e0       	ldi	r25, 0x04	; 4
     d4c:	90 8b       	std	Z+16, r25	; 0x10
	EDMA.CH0.CTRLB = EDMA_CH_TRNINTLVL_HI_gc; //ERR level = 0, TRN int level hi
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	81 8b       	std	Z+17, r24	; 0x11
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
     d52:	81 e3       	ldi	r24, 0x31	; 49
     d54:	82 8b       	std	Z+18, r24	; 0x12
	EDMA.CH0.TRIGSRC = EDMA_CH_TRIGSRC_USARTD0_RXC_gc;
     d56:	2c e6       	ldi	r18, 0x6C	; 108
     d58:	24 8b       	std	Z+20, r18	; 0x14

	//TX
	EDMA.CH1.CTRLA = EDMA_CH_SINGLE_bm;//no repeat, single shot, burst len = 1
     d5a:	90 a3       	std	Z+32, r25	; 0x20
	EDMA.CH1.CTRLB =  0; //EDMA_CH_TRNINTLVL_HI_gc; //ERR level = 0, TRN int level hi
     d5c:	11 a2       	std	Z+33, r1	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
     d5e:	82 a3       	std	Z+34, r24	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTD0_DRE_gc;
     d60:	8d e6       	ldi	r24, 0x6D	; 109
     d62:	84 a3       	std	Z+36, r24	; 0x24
	
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_PRIMODE_RR123_gc; //perif mode, no double buff,  Ch0 > round robin
     d64:	81 e8       	ldi	r24, 0x81	; 129
     d66:	80 83       	st	Z, r24
     d68:	08 95       	ret

00000d6a <init_usart_mem_access>:
void init_usart_mem_access()
{

	
	//Mem USART in SPI
	USARTD0.CTRLA = USART_TXCINTLVL_OFF_gc; //No interrupts
     d6a:	e0 ec       	ldi	r30, 0xC0	; 192
     d6c:	f9 e0       	ldi	r31, 0x09	; 9
     d6e:	12 82       	std	Z+2, r1	; 0x02
	USARTD0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;// | USART_CLK2X_bm;
     d70:	88 e1       	ldi	r24, 0x18	; 24
     d72:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.CTRLC = USART_CMODE_MSPI_gc;
     d74:	90 ec       	ldi	r25, 0xC0	; 192
     d76:	94 83       	std	Z+4, r25	; 0x04
	USARTD0.CTRLD = 0; //No decoding or encoding
     d78:	15 82       	std	Z+5, r1	; 0x05
	USARTD0_BAUDCTRLA = 1;
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	90 93 c6 09 	sts	0x09C6, r25	; 0x8009c6 <__TEXT_REGION_LENGTH__+0x7f79c6>
	USARTD0.BAUDCTRLB = 0;
     d80:	17 82       	std	Z+7, r1	; 0x07
	

	
	//interface. BAUD=921600
	USARTC0.BAUDCTRLA = 75;// 131;
     d82:	e0 ec       	ldi	r30, 0xC0	; 192
     d84:	f8 e0       	ldi	r31, 0x08	; 8
     d86:	9b e4       	ldi	r25, 0x4B	; 75
     d88:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 0xA0;//-6 0xD0; //-3
     d8a:	90 ea       	ldi	r25, 0xA0	; 160
     d8c:	97 83       	std	Z+7, r25	; 0x07
	USARTC0.CTRLA = USART_TXCINTLVL_OFF_gc; //No interrupts
     d8e:	12 82       	std	Z+2, r1	; 0x02
	USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
     d90:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc; //Mode:Async,8,None,1
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	84 83       	std	Z+4, r24	; 0x04
	USARTC0.CTRLD = 0; //No decoding or encoding
     d96:	15 82       	std	Z+5, r1	; 0x05
     d98:	08 95       	ret

00000d9a <init_main_config>:



void init_main_config()
{
	init_pins_normal();
     d9a:	06 df       	rcall	.-500    	; 0xba8 <init_pins_normal>

}

void enable_interrupts()
{
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm 	;	  //  enable interrupts
     d9c:	87 e0       	ldi	r24, 0x07	; 7
     d9e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f70a2>
{
	init_pins_normal();
	enable_interrupts();
	
	#ifdef QTOUCH_STUDIO_MASKS
	SNS_array[0][0]= 0x51;
     da2:	eb e4       	ldi	r30, 0x4B	; 75
     da4:	f0 e2       	ldi	r31, 0x20	; 32
     da6:	81 e5       	ldi	r24, 0x51	; 81
     da8:	80 83       	st	Z, r24
	SNS_array[0][1]= 0x0;
     daa:	11 82       	std	Z+1, r1	; 0x01
	SNS_array[1][0]= 0x0;
     dac:	12 82       	std	Z+2, r1	; 0x02
	SNS_array[1][1]= 0x0;
     dae:	13 82       	std	Z+3, r1	; 0x03

	SNSK_array[0][0]= 0xa2;
     db0:	e7 e4       	ldi	r30, 0x47	; 71
     db2:	f0 e2       	ldi	r31, 0x20	; 32
     db4:	82 ea       	ldi	r24, 0xA2	; 162
     db6:	80 83       	st	Z, r24
	SNSK_array[0][1]= 0x0;
     db8:	11 82       	std	Z+1, r1	; 0x01
	SNSK_array[1][0]= 0x0;
     dba:	12 82       	std	Z+2, r1	; 0x02
	SNSK_array[1][1]= 0x0;
     dbc:	13 82       	std	Z+3, r1	; 0x03
	#endif	
	
	cli();
	
	init_clock();
     dbe:	f8 94       	cli
	init_usart_normal();
     dc0:	e1 de       	rcall	.-574    	; 0xb84 <init_clock>
	init_edma_normal();
     dc2:	05 df       	rcall	.-502    	; 0xbce <init_usart_normal>
     dc4:	1c df       	rcall	.-456    	; 0xbfe <init_edma_normal>
	
	init_event_channels();
     dc6:	71 df       	rcall	.-286    	; 0xcaa <init_event_channels>

}

void init_audio_timer()
{
	TCC4.CTRLA =
     dc8:	81 e0       	ldi	r24, 0x01	; 1
	init_usart_normal();
	init_edma_normal();
	
	init_event_channels();
	init_audio_timer();
	init_qTouch_timer();
     dca:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f7800>
	init_DAC();
     dce:	61 df       	rcall	.-318    	; 0xc92 <init_qTouch_timer>
     dd0:	77 df       	rcall	.-274    	; 0xcc0 <init_DAC>
	
	init_light_map_timer();
     dd2:	54 df       	rcall	.-344    	; 0xc7c <init_light_map_timer>
	init_xcl();
     dd4:	3e df       	rcall	.-388    	; 0xc52 <init_xcl>
     dd6:	8e df       	rcall	.-228    	; 0xcf4 <config_keys>
	
	//Configure the Sensors as keys
	config_keys();
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
		
	//initialize touch sensing
	qt_init_sensing();
     ddc:	82 e9       	ldi	r24, 0x92	; 146
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	75 da       	rcall	.-2838   	; 0x2cc <qt_init_sensing_with_burst>
     de2:	79 df       	rcall	.-270    	; 0xcd6 <qt_set_parameters>
     de4:	78 94       	sei
     de6:	80 e1       	ldi	r24, 0x10	; 16
		
	//Set the parameters like recalibration threshold, Max_On_Duration etc in this function by the user */
	qt_set_parameters( );
     de8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7f7665>
	
	sei();
     dec:	08 95       	ret

00000dee <init_mem_access_config>:
	
	//Set CS high
	PORTD.OUTSET = PIN4_bm;
     dee:	87 e0       	ldi	r24, 0x07	; 7
     df0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f70a2>
     df4:	98 df       	rcall	.-208    	; 0xd26 <init_pins_mem_access>
	enable_interrupts();
	init_pins_mem_access();
	
	cli();
	
	init_clock();
     df6:	f8 94       	cli
	init_usart_mem_access();
     df8:	c5 de       	rcall	.-630    	; 0xb84 <init_clock>
	init_edma_mem_access();
     dfa:	b7 df       	rcall	.-146    	; 0xd6a <init_usart_mem_access>
     dfc:	a4 df       	rcall	.-184    	; 0xd46 <init_edma_mem_access>
	init_input_timeout_timer();
     dfe:	8a df       	rcall	.-236    	; 0xd14 <init_input_timeout_timer>
     e00:	78 94       	sei
	
	sei();
     e02:	80 e1       	ldi	r24, 0x10	; 16
	
	//Set CS high
	PORTD.OUTSET = PIN4_bm;
     e04:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7f7665>
     e08:	08 95       	ret

00000e0a <read_mem>:
     e0a:	cf 92       	push	r12
	CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm; //Set the RTC clock source to the 1kHz ULP and enable it.
}

void disable_rtc()
{
	CLK.RTCCTRL = 0;
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	00 d0       	rcall	.+0      	; 0xe18 <read_mem+0xe>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <read_mem+0x10>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	31 e0       	ldi	r19, 0x01	; 1
     e20:	30 93 54 20 	sts	0x2054, r19	; 0x802054 <_readingMem>
     e24:	10 92 53 20 	sts	0x2053, r1	; 0x802053 <_setCS>
     e28:	30 e1       	ldi	r19, 0x10	; 16
     e2a:	30 93 66 06 	sts	0x0666, r19	; 0x800666 <__TEXT_REGION_LENGTH__+0x7f7666>
     e2e:	33 e0       	ldi	r19, 0x03	; 3
     e30:	39 83       	std	Y+1, r19	; 0x01
     e32:	6c 01       	movw	r12, r24
     e34:	ee 24       	eor	r14, r14
     e36:	ff 24       	eor	r15, r15
     e38:	ca 82       	std	Y+2, r12	; 0x02
     e3a:	c7 2e       	mov	r12, r23
     e3c:	d8 2e       	mov	r13, r24
     e3e:	e9 2e       	mov	r14, r25
     e40:	ff 24       	eor	r15, r15
     e42:	cb 82       	std	Y+3, r12	; 0x03
     e44:	6c 83       	std	Y+4, r22	; 0x04
     e46:	e0 e0       	ldi	r30, 0x00	; 0
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	64 e0       	ldi	r22, 0x04	; 4
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	66 8b       	std	Z+22, r22	; 0x16
     e50:	77 8b       	std	Z+23, r23	; 0x17
     e52:	40 8f       	std	Z+24, r20	; 0x18
     e54:	51 8f       	std	Z+25, r21	; 0x19
     e56:	80 89       	ldd	r24, Z+16	; 0x10
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	80 8b       	std	Z+16, r24	; 0x10
     e5c:	66 a3       	std	Z+38, r22	; 0x26
     e5e:	77 a3       	std	Z+39, r23	; 0x27
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	80 a7       	std	Z+40, r24	; 0x28
     e66:	91 a7       	std	Z+41, r25	; 0x29
     e68:	81 e3       	ldi	r24, 0x31	; 49
     e6a:	82 a3       	std	Z+34, r24	; 0x22
     e6c:	80 a1       	ldd	r24, Z+32	; 0x20
     e6e:	80 69       	ori	r24, 0x90	; 144
     e70:	80 a3       	std	Z+32, r24	; 0x20
     e72:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
     e76:	81 11       	cpse	r24, r1
     e78:	fc cf       	rjmp	.-8      	; 0xe72 <read_mem+0x68>
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	80 93 54 20 	sts	0x2054, r24	; 0x802054 <_readingMem>
     e80:	80 93 53 20 	sts	0x2053, r24	; 0x802053 <_setCS>
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	e0 e0       	ldi	r30, 0x00	; 0
     e88:	f1 e0       	ldi	r31, 0x01	; 1
     e8a:	26 8b       	std	Z+22, r18	; 0x16
     e8c:	37 8b       	std	Z+23, r19	; 0x17
     e8e:	40 8f       	std	Z+24, r20	; 0x18
     e90:	51 8f       	std	Z+25, r21	; 0x19
     e92:	80 89       	ldd	r24, Z+16	; 0x10
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	80 8b       	std	Z+16, r24	; 0x10
     e98:	26 a3       	std	Z+38, r18	; 0x26
     e9a:	37 a3       	std	Z+39, r19	; 0x27
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e2       	ldi	r25, 0x20	; 32
     ea0:	80 a7       	std	Z+40, r24	; 0x28
     ea2:	91 a7       	std	Z+41, r25	; 0x29
     ea4:	80 e3       	ldi	r24, 0x30	; 48
     ea6:	82 a3       	std	Z+34, r24	; 0x22
     ea8:	80 a1       	ldd	r24, Z+32	; 0x20
     eaa:	80 69       	ori	r24, 0x90	; 144
     eac:	80 a3       	std	Z+32, r24	; 0x20
     eae:	24 96       	adiw	r28, 0x04	; 4
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	08 95       	ret

00000ec2 <write_lights>:
     ec2:	8b e6       	ldi	r24, 0x6B	; 107
     ec4:	92 e2       	ldi	r25, 0x22	; 34
     ec6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__TEXT_REGION_LENGTH__+0x7f7148>
     eca:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x7f7149>
     ece:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <_lightMetadata+0x2>
     ed2:	90 91 79 21 	lds	r25, 0x2179	; 0x802179 <_lightMetadata+0x3>
     ed6:	9c 01       	movw	r18, r24
     ed8:	22 0f       	add	r18, r18
     eda:	33 1f       	adc	r19, r19
     edc:	82 0f       	add	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__TEXT_REGION_LENGTH__+0x7f7146>
     ee4:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__TEXT_REGION_LENGTH__+0x7f7147>
     ee8:	84 e8       	ldi	r24, 0x84	; 132
     eea:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x7f7140>
     eee:	08 95       	ret

00000ef0 <load_entry_count>:
     ef0:	22 e0       	ldi	r18, 0x02	; 2
     ef2:	4f e5       	ldi	r20, 0x5F	; 95
     ef4:	50 e2       	ldi	r21, 0x20	; 32
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	cb 01       	movw	r24, r22
     efc:	86 df       	rcall	.-244    	; 0xe0a <read_mem>
     efe:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
     f02:	81 11       	cpse	r24, r1
     f04:	fc cf       	rjmp	.-8      	; 0xefe <load_entry_count+0xe>
     f06:	08 95       	ret

00000f08 <load_starting_addresses>:
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	bc 01       	movw	r22, r24
     f16:	6e 5f       	subi	r22, 0xFE	; 254
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	28 e0       	ldi	r18, 0x08	; 8
     f20:	44 e6       	ldi	r20, 0x64	; 100
     f22:	50 e2       	ldi	r21, 0x20	; 32
     f24:	72 df       	rcall	.-284    	; 0xe0a <read_mem>
     f26:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
     f2a:	81 11       	cpse	r24, r1
     f2c:	fc cf       	rjmp	.-8      	; 0xf26 <load_starting_addresses+0x1e>
     f2e:	08 95       	ret

00000f30 <load_wav_metadata>:
     f30:	60 91 64 20 	lds	r22, 0x2064	; 0x802064 <_addresses>
     f34:	70 91 65 20 	lds	r23, 0x2065	; 0x802065 <_addresses+0x1>
     f38:	80 91 66 20 	lds	r24, 0x2066	; 0x802066 <_addresses+0x2>
     f3c:	90 91 67 20 	lds	r25, 0x2067	; 0x802067 <_addresses+0x3>
     f40:	29 e0       	ldi	r18, 0x09	; 9
     f42:	4c e6       	ldi	r20, 0x6C	; 108
     f44:	50 e2       	ldi	r21, 0x20	; 32
     f46:	61 df       	rcall	.-318    	; 0xe0a <read_mem>
     f48:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
     f4c:	81 11       	cpse	r24, r1
     f4e:	fc cf       	rjmp	.-8      	; 0xf48 <load_wav_metadata+0x18>
     f50:	e4 e6       	ldi	r30, 0x64	; 100
     f52:	f0 e2       	ldi	r31, 0x20	; 32
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	a2 81       	ldd	r26, Z+2	; 0x02
     f5a:	b3 81       	ldd	r27, Z+3	; 0x03
     f5c:	09 96       	adiw	r24, 0x09	; 9
     f5e:	a1 1d       	adc	r26, r1
     f60:	b1 1d       	adc	r27, r1
     f62:	80 83       	st	Z, r24
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	a2 83       	std	Z+2, r26	; 0x02
     f68:	b3 83       	std	Z+3, r27	; 0x03
     f6a:	80 91 71 20 	lds	r24, 0x2071	; 0x802071 <_wavMetadata+0x5>
     f6e:	90 91 72 20 	lds	r25, 0x2072	; 0x802072 <_wavMetadata+0x6>
     f72:	a0 91 73 20 	lds	r26, 0x2073	; 0x802073 <_wavMetadata+0x7>
     f76:	b0 91 74 20 	lds	r27, 0x2074	; 0x802074 <_wavMetadata+0x8>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	aa 1f       	adc	r26, r26
     f80:	bb 1f       	adc	r27, r27
     f82:	80 93 57 20 	sts	0x2057, r24	; 0x802057 <_totalSampleBytes>
     f86:	90 93 58 20 	sts	0x2058, r25	; 0x802058 <_totalSampleBytes+0x1>
     f8a:	a0 93 59 20 	sts	0x2059, r26	; 0x802059 <_totalSampleBytes+0x2>
     f8e:	b0 93 5a 20 	sts	0x205A, r27	; 0x80205a <_totalSampleBytes+0x3>
     f92:	08 95       	ret

00000f94 <load_light_sequenc_metadata>:
     f94:	60 91 68 20 	lds	r22, 0x2068	; 0x802068 <_addresses+0x4>
     f98:	70 91 69 20 	lds	r23, 0x2069	; 0x802069 <_addresses+0x5>
     f9c:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <_addresses+0x6>
     fa0:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <_addresses+0x7>
     fa4:	24 e0       	ldi	r18, 0x04	; 4
     fa6:	46 e7       	ldi	r20, 0x76	; 118
     fa8:	51 e2       	ldi	r21, 0x21	; 33
     faa:	2f df       	rcall	.-418    	; 0xe0a <read_mem>
     fac:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
     fb0:	81 11       	cpse	r24, r1
     fb2:	fc cf       	rjmp	.-8      	; 0xfac <load_light_sequenc_metadata+0x18>
     fb4:	e4 e6       	ldi	r30, 0x64	; 100
     fb6:	f0 e2       	ldi	r31, 0x20	; 32
     fb8:	84 81       	ldd	r24, Z+4	; 0x04
     fba:	95 81       	ldd	r25, Z+5	; 0x05
     fbc:	a6 81       	ldd	r26, Z+6	; 0x06
     fbe:	b7 81       	ldd	r27, Z+7	; 0x07
     fc0:	04 96       	adiw	r24, 0x04	; 4
     fc2:	a1 1d       	adc	r26, r1
     fc4:	b1 1d       	adc	r27, r1
     fc6:	84 83       	std	Z+4, r24	; 0x04
     fc8:	95 83       	std	Z+5, r25	; 0x05
     fca:	a6 83       	std	Z+6, r26	; 0x06
     fcc:	b7 83       	std	Z+7, r27	; 0x07
     fce:	08 95       	ret

00000fd0 <load_next_light_map>:
     fd0:	cf 93       	push	r28
     fd2:	c0 91 78 21 	lds	r28, 0x2178	; 0x802178 <_lightMetadata+0x2>
     fd6:	8c 2f       	mov	r24, r28
     fd8:	88 0f       	add	r24, r24
     fda:	c8 0f       	add	r28, r24
     fdc:	ce 5f       	subi	r28, 0xFE	; 254
     fde:	10 92 5d 20 	sts	0x205D, r1	; 0x80205d <_holdTimerCounter>
     fe2:	10 92 5e 20 	sts	0x205E, r1	; 0x80205e <_holdTimerCounter+0x1>
     fe6:	10 92 40 08 	sts	0x0840, r1	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f7840>
     fea:	60 91 68 20 	lds	r22, 0x2068	; 0x802068 <_addresses+0x4>
     fee:	70 91 69 20 	lds	r23, 0x2069	; 0x802069 <_addresses+0x5>
     ff2:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <_addresses+0x6>
     ff6:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <_addresses+0x7>
     ffa:	2c 2f       	mov	r18, r28
     ffc:	49 e6       	ldi	r20, 0x69	; 105
     ffe:	52 e2       	ldi	r21, 0x22	; 34
    1000:	04 df       	rcall	.-504    	; 0xe0a <read_mem>
    1002:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
    1006:	81 11       	cpse	r24, r1
    1008:	fc cf       	rjmp	.-8      	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
    100a:	e4 e6       	ldi	r30, 0x64	; 100
    100c:	f0 e2       	ldi	r31, 0x20	; 32
    100e:	84 81       	ldd	r24, Z+4	; 0x04
    1010:	95 81       	ldd	r25, Z+5	; 0x05
    1012:	a6 81       	ldd	r26, Z+6	; 0x06
    1014:	b7 81       	ldd	r27, Z+7	; 0x07
    1016:	8c 0f       	add	r24, r28
    1018:	91 1d       	adc	r25, r1
    101a:	a1 1d       	adc	r26, r1
    101c:	b1 1d       	adc	r27, r1
    101e:	84 83       	std	Z+4, r24	; 0x04
    1020:	95 83       	std	Z+5, r25	; 0x05
    1022:	a6 83       	std	Z+6, r26	; 0x06
    1024:	b7 83       	std	Z+7, r27	; 0x07
    1026:	e6 e7       	ldi	r30, 0x76	; 118
    1028:	f1 e2       	ldi	r31, 0x21	; 33
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	80 83       	st	Z, r24
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	86 e0       	ldi	r24, 0x06	; 6
    1036:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f7840>
    103a:	43 df       	rcall	.-378    	; 0xec2 <write_lights>
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <calc_clock_per>:
    1040:	ec e6       	ldi	r30, 0x6C	; 108
    1042:	f0 e2       	ldi	r31, 0x20	; 32
    1044:	a4 81       	ldd	r26, Z+4	; 0x04
    1046:	20 81       	ld	r18, Z
    1048:	31 81       	ldd	r19, Z+1	; 0x01
    104a:	42 81       	ldd	r20, Z+2	; 0x02
    104c:	53 81       	ldd	r21, Z+3	; 0x03
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	c3 d6       	rcall	.+3462   	; 0x1dd8 <__muluhisi3>
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	78 e4       	ldi	r23, 0x48	; 72
    105a:	88 ee       	ldi	r24, 0xE8	; 232
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	9a d6       	rcall	.+3380   	; 0x1d94 <__udivmodsi4>
    1060:	20 93 55 20 	sts	0x2055, r18	; 0x802055 <_clkPer>
    1064:	30 93 56 20 	sts	0x2056, r19	; 0x802056 <_clkPer+0x1>
    1068:	08 95       	ret

0000106a <load_input_buffer>:
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <_memInBuff>
    1072:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <_memInBuff+0x1>
    1076:	80 e8       	ldi	r24, 0x80	; 128
    1078:	80 83       	st	Z, r24
    107a:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <_memInBuff>
    107e:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <_memInBuff+0x1>
    1082:	80 81       	ld	r24, Z
    1084:	40 91 57 20 	lds	r20, 0x2057	; 0x802057 <_totalSampleBytes>
    1088:	50 91 58 20 	lds	r21, 0x2058	; 0x802058 <_totalSampleBytes+0x1>
    108c:	60 91 59 20 	lds	r22, 0x2059	; 0x802059 <_totalSampleBytes+0x2>
    1090:	70 91 5a 20 	lds	r23, 0x205A	; 0x80205a <_totalSampleBytes+0x3>
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	48 17       	cp	r20, r24
    109c:	59 07       	cpc	r21, r25
    109e:	6a 07       	cpc	r22, r26
    10a0:	7b 07       	cpc	r23, r27
    10a2:	18 f4       	brcc	.+6      	; 0x10aa <load_input_buffer+0x40>
    10a4:	80 91 71 20 	lds	r24, 0x2071	; 0x802071 <_wavMetadata+0x5>
    10a8:	80 83       	st	Z, r24
    10aa:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <_memInBuff>
    10ae:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <_memInBuff+0x1>
    10b2:	80 81       	ld	r24, Z
    10b4:	40 91 57 20 	lds	r20, 0x2057	; 0x802057 <_totalSampleBytes>
    10b8:	50 91 58 20 	lds	r21, 0x2058	; 0x802058 <_totalSampleBytes+0x1>
    10bc:	60 91 59 20 	lds	r22, 0x2059	; 0x802059 <_totalSampleBytes+0x2>
    10c0:	70 91 5a 20 	lds	r23, 0x205A	; 0x80205a <_totalSampleBytes+0x3>
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a0 e0       	ldi	r26, 0x00	; 0
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	48 17       	cp	r20, r24
    10cc:	59 07       	cpc	r21, r25
    10ce:	6a 07       	cpc	r22, r26
    10d0:	7b 07       	cpc	r23, r27
    10d2:	48 f4       	brcc	.+18     	; 0x10e6 <load_input_buffer+0x7c>
    10d4:	10 92 57 20 	sts	0x2057, r1	; 0x802057 <_totalSampleBytes>
    10d8:	10 92 58 20 	sts	0x2058, r1	; 0x802058 <_totalSampleBytes+0x1>
    10dc:	10 92 59 20 	sts	0x2059, r1	; 0x802059 <_totalSampleBytes+0x2>
    10e0:	10 92 5a 20 	sts	0x205A, r1	; 0x80205a <_totalSampleBytes+0x3>
    10e4:	15 c0       	rjmp	.+42     	; 0x1110 <load_input_buffer+0xa6>
    10e6:	20 81       	ld	r18, Z
    10e8:	80 91 57 20 	lds	r24, 0x2057	; 0x802057 <_totalSampleBytes>
    10ec:	90 91 58 20 	lds	r25, 0x2058	; 0x802058 <_totalSampleBytes+0x1>
    10f0:	a0 91 59 20 	lds	r26, 0x2059	; 0x802059 <_totalSampleBytes+0x2>
    10f4:	b0 91 5a 20 	lds	r27, 0x205A	; 0x80205a <_totalSampleBytes+0x3>
    10f8:	82 1b       	sub	r24, r18
    10fa:	91 09       	sbc	r25, r1
    10fc:	a1 09       	sbc	r26, r1
    10fe:	b1 09       	sbc	r27, r1
    1100:	80 93 57 20 	sts	0x2057, r24	; 0x802057 <_totalSampleBytes>
    1104:	90 93 58 20 	sts	0x2058, r25	; 0x802058 <_totalSampleBytes+0x1>
    1108:	a0 93 59 20 	sts	0x2059, r26	; 0x802059 <_totalSampleBytes+0x2>
    110c:	b0 93 5a 20 	sts	0x205A, r27	; 0x80205a <_totalSampleBytes+0x3>
    1110:	21 91       	ld	r18, Z+
    1112:	af 01       	movw	r20, r30
    1114:	c4 e6       	ldi	r28, 0x64	; 100
    1116:	d0 e2       	ldi	r29, 0x20	; 32
    1118:	68 81       	ld	r22, Y
    111a:	79 81       	ldd	r23, Y+1	; 0x01
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	74 de       	rcall	.-792    	; 0xe0a <read_mem>
    1122:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <_memInBuff>
    1126:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <_memInBuff+0x1>
    112a:	20 81       	ld	r18, Z
    112c:	88 81       	ld	r24, Y
    112e:	99 81       	ldd	r25, Y+1	; 0x01
    1130:	aa 81       	ldd	r26, Y+2	; 0x02
    1132:	bb 81       	ldd	r27, Y+3	; 0x03
    1134:	82 0f       	add	r24, r18
    1136:	91 1d       	adc	r25, r1
    1138:	a1 1d       	adc	r26, r1
    113a:	b1 1d       	adc	r27, r1
    113c:	88 83       	st	Y, r24
    113e:	99 83       	std	Y+1, r25	; 0x01
    1140:	aa 83       	std	Y+2, r26	; 0x02
    1142:	bb 83       	std	Y+3, r27	; 0x03
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <swap_buffers>:
    114a:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <_memInBuff>
    114e:	90 91 7c 21 	lds	r25, 0x217C	; 0x80217c <_memInBuff+0x1>
    1152:	87 56       	subi	r24, 0x67	; 103
    1154:	93 42       	sbci	r25, 0x23	; 35
    1156:	69 f4       	brne	.+26     	; 0x1172 <swap_buffers+0x28>
    1158:	85 ef       	ldi	r24, 0xF5	; 245
    115a:	90 e2       	ldi	r25, 0x20	; 32
    115c:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <_memInBuff>
    1160:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <_memInBuff+0x1>
    1164:	87 e6       	ldi	r24, 0x67	; 103
    1166:	93 e2       	ldi	r25, 0x23	; 35
    1168:	80 93 e8 23 	sts	0x23E8, r24	; 0x8023e8 <_memOutBuff>
    116c:	90 93 e9 23 	sts	0x23E9, r25	; 0x8023e9 <_memOutBuff+0x1>
    1170:	08 95       	ret
    1172:	87 e6       	ldi	r24, 0x67	; 103
    1174:	93 e2       	ldi	r25, 0x23	; 35
    1176:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <_memInBuff>
    117a:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <_memInBuff+0x1>
    117e:	85 ef       	ldi	r24, 0xF5	; 245
    1180:	90 e2       	ldi	r25, 0x20	; 32
    1182:	80 93 e8 23 	sts	0x23E8, r24	; 0x8023e8 <_memOutBuff>
    1186:	90 93 e9 23 	sts	0x23E9, r25	; 0x8023e9 <_memOutBuff+0x1>
    118a:	08 95       	ret

0000118c <start_audio_output>:
    118c:	de df       	rcall	.-68     	; 0x114a <swap_buffers>
    118e:	6d df       	rcall	.-294    	; 0x106a <load_input_buffer>
    1190:	a0 91 e8 23 	lds	r26, 0x23E8	; 0x8023e8 <_memOutBuff>
    1194:	b0 91 e9 23 	lds	r27, 0x23E9	; 0x8023e9 <_memOutBuff+0x1>
    1198:	8d 91       	ld	r24, X+
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	e0 e0       	ldi	r30, 0x00	; 0
    119e:	f1 e0       	ldi	r31, 0x01	; 1
    11a0:	86 ab       	std	Z+54, r24	; 0x36
    11a2:	97 ab       	std	Z+55, r25	; 0x37
    11a4:	a0 af       	std	Z+56, r26	; 0x38
    11a6:	b1 af       	std	Z+57, r27	; 0x39
    11a8:	80 a9       	ldd	r24, Z+48	; 0x30
    11aa:	80 69       	ori	r24, 0x90	; 144
    11ac:	80 ab       	std	Z+48, r24	; 0x30
    11ae:	80 91 55 20 	lds	r24, 0x2055	; 0x802055 <_clkPer>
    11b2:	90 91 56 20 	lds	r25, 0x2056	; 0x802056 <_clkPer+0x1>
    11b6:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7f7826>
    11ba:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7f7827>
    11be:	08 95       	ret

000011c0 <play_entry>:
    11c0:	9c 01       	movw	r18, r24
    11c2:	90 91 54 20 	lds	r25, 0x2054	; 0x802054 <_readingMem>
    11c6:	91 11       	cpse	r25, r1
    11c8:	fc cf       	rjmp	.-8      	; 0x11c2 <play_entry+0x2>
    11ca:	10 92 26 08 	sts	0x0826, r1	; 0x800826 <__TEXT_REGION_LENGTH__+0x7f7826>
    11ce:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <__TEXT_REGION_LENGTH__+0x7f7827>
    11d2:	10 92 40 08 	sts	0x0840, r1	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f7840>
    11d6:	c9 01       	movw	r24, r18
    11d8:	97 de       	rcall	.-722    	; 0xf08 <load_starting_addresses>
    11da:	aa de       	rcall	.-684    	; 0xf30 <load_wav_metadata>
    11dc:	31 df       	rcall	.-414    	; 0x1040 <calc_clock_per>
    11de:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <_addresses+0x4>
    11e2:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <_addresses+0x5>
    11e6:	a0 91 6a 20 	lds	r26, 0x206A	; 0x80206a <_addresses+0x6>
    11ea:	b0 91 6b 20 	lds	r27, 0x206B	; 0x80206b <_addresses+0x7>
    11ee:	89 2b       	or	r24, r25
    11f0:	8a 2b       	or	r24, r26
    11f2:	8b 2b       	or	r24, r27
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <play_entry+0x38>
    11f6:	ce de       	rcall	.-612    	; 0xf94 <load_light_sequenc_metadata>
    11f8:	87 e6       	ldi	r24, 0x67	; 103
    11fa:	93 e2       	ldi	r25, 0x23	; 35
    11fc:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <_memInBuff>
    1200:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <_memInBuff+0x1>
    1204:	32 df       	rcall	.-412    	; 0x106a <load_input_buffer>
    1206:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
    120a:	81 11       	cpse	r24, r1
    120c:	fc cf       	rjmp	.-8      	; 0x1206 <play_entry+0x46>
    120e:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <_addresses+0x4>
    1212:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <_addresses+0x5>
    1216:	a0 91 6a 20 	lds	r26, 0x206A	; 0x80206a <_addresses+0x6>
    121a:	b0 91 6b 20 	lds	r27, 0x206B	; 0x80206b <_addresses+0x7>
    121e:	89 2b       	or	r24, r25
    1220:	8a 2b       	or	r24, r26
    1222:	8b 2b       	or	r24, r27
    1224:	09 f0       	breq	.+2      	; 0x1228 <play_entry+0x68>
    1226:	d4 de       	rcall	.-600    	; 0xfd0 <load_next_light_map>
    1228:	b1 cf       	rjmp	.-158    	; 0x118c <start_audio_output>
    122a:	08 95       	ret

0000122c <blank_lights>:
    122c:	84 e5       	ldi	r24, 0x54	; 84
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <_lightMetadata+0x2>
    1234:	90 93 79 21 	sts	0x2179, r25	; 0x802179 <_lightMetadata+0x3>
    1238:	eb e6       	ldi	r30, 0x6B	; 107
    123a:	f2 e2       	ldi	r31, 0x22	; 34
    123c:	87 e6       	ldi	r24, 0x67	; 103
    123e:	93 e2       	ldi	r25, 0x23	; 35
    1240:	11 92       	st	Z+, r1
    1242:	e8 17       	cp	r30, r24
    1244:	f9 07       	cpc	r31, r25
    1246:	e1 f7       	brne	.-8      	; 0x1240 <blank_lights+0x14>
    1248:	3c ce       	rjmp	.-904    	; 0xec2 <write_lights>
    124a:	08 95       	ret

0000124c <mem_read_prop>:


void mem_read_prop(uint8_t prop, uint8_t *buffer, uint8_t len)
{
	//6 bytes: 1 for command, 3 for data retrieval
	buffer[0] = prop;
    124c:	fb 01       	movw	r30, r22
    124e:	80 83       	st	Z, r24

	for (uint8_t i = 1; i < len; i++)
    1250:	42 30       	cpi	r20, 0x02	; 2
    1252:	60 f0       	brcs	.+24     	; 0x126c <mem_read_prop+0x20>
    1254:	31 96       	adiw	r30, 0x01	; 1
    1256:	8e ef       	ldi	r24, 0xFE	; 254
    1258:	84 0f       	add	r24, r20
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 96       	adiw	r24, 0x02	; 2
    125e:	86 0f       	add	r24, r22
    1260:	97 1f       	adc	r25, r23
	{
		buffer[i] = DUMMY_BYTE;
    1262:	25 e5       	ldi	r18, 0x55	; 85
    1264:	21 93       	st	Z+, r18
void mem_read_prop(uint8_t prop, uint8_t *buffer, uint8_t len)
{
	//6 bytes: 1 for command, 3 for data retrieval
	buffer[0] = prop;

	for (uint8_t i = 1; i < len; i++)
    1266:	e8 17       	cp	r30, r24
    1268:	f9 07       	cpc	r31, r25
    126a:	e1 f7       	brne	.-8      	; 0x1264 <mem_read_prop+0x18>
	{
		buffer[i] = DUMMY_BYTE;
	}


	PORTD.OUTCLR = PIN4_bm; //Set Pin 4 (CS) to low
    126c:	80 e1       	ldi	r24, 0x10	; 16
    126e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7f7666>
	
	_readingMem = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 93 54 20 	sts	0x2054, r24	; 0x802054 <_readingMem>
	_setCS = 1;
    1278:	80 93 53 20 	sts	0x2053, r24	; 0x802053 <_setCS>
	
	EDMA.CH0.TRFCNT = len;
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	e0 e0       	ldi	r30, 0x00	; 0
    1280:	f1 e0       	ldi	r31, 0x01	; 1
    1282:	46 8b       	std	Z+22, r20	; 0x16
    1284:	57 8b       	std	Z+23, r21	; 0x17
	EDMA.CH0.ADDR = (uint16_t)buffer;
    1286:	60 8f       	std	Z+24, r22	; 0x18
    1288:	71 8f       	std	Z+25, r23	; 0x19
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
    128a:	91 e3       	ldi	r25, 0x31	; 49
    128c:	92 8b       	std	Z+18, r25	; 0x12
	EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
    128e:	80 89       	ldd	r24, Z+16	; 0x10
    1290:	80 68       	ori	r24, 0x80	; 128
    1292:	80 8b       	std	Z+16, r24	; 0x10
	
	
	EDMA.CH1.TRFCNT = len;
    1294:	46 a3       	std	Z+38, r20	; 0x26
    1296:	57 a3       	std	Z+39, r21	; 0x27
	EDMA.CH1.ADDR = (uint16_t)buffer;;
    1298:	60 a7       	std	Z+40, r22	; 0x28
    129a:	71 a7       	std	Z+41, r23	; 0x29
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
    129c:	92 a3       	std	Z+34, r25	; 0x22
	EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
    129e:	80 a1       	ldd	r24, Z+32	; 0x20
    12a0:	80 69       	ori	r24, 0x90	; 144
    12a2:	80 a3       	std	Z+32, r24	; 0x20


	while(_readingMem);
    12a4:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
    12a8:	81 11       	cpse	r24, r1
    12aa:	fc cf       	rjmp	.-8      	; 0x12a4 <mem_read_prop+0x58>
	

	
}
    12ac:	08 95       	ret

000012ae <mem_write_prop>:

void mem_write_prop(uint8_t prop, uint8_t *buffer, uint8_t len)
{
	//6 bytes: 1 for command, 3 for data retrieval
	buffer[0] = prop;
    12ae:	fb 01       	movw	r30, r22
    12b0:	80 83       	st	Z, r24

	for (uint8_t i = 1; i < len; i++)
    12b2:	42 30       	cpi	r20, 0x02	; 2
    12b4:	60 f0       	brcs	.+24     	; 0x12ce <mem_write_prop+0x20>
    12b6:	31 96       	adiw	r30, 0x01	; 1
    12b8:	8e ef       	ldi	r24, 0xFE	; 254
    12ba:	84 0f       	add	r24, r20
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 96       	adiw	r24, 0x02	; 2
    12c0:	86 0f       	add	r24, r22
    12c2:	97 1f       	adc	r25, r23
	{
		buffer[i] = DUMMY_BYTE;
    12c4:	25 e5       	ldi	r18, 0x55	; 85
    12c6:	21 93       	st	Z+, r18
void mem_write_prop(uint8_t prop, uint8_t *buffer, uint8_t len)
{
	//6 bytes: 1 for command, 3 for data retrieval
	buffer[0] = prop;

	for (uint8_t i = 1; i < len; i++)
    12c8:	e8 17       	cp	r30, r24
    12ca:	f9 07       	cpc	r31, r25
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <mem_write_prop+0x18>
	{
		buffer[i] = DUMMY_BYTE;
	}


	PORTD.OUTCLR = PIN4_bm; //Set Pin 4 (CS) to low
    12ce:	80 e1       	ldi	r24, 0x10	; 16
    12d0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7f7666>
	
	_readingMem = 1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	80 93 54 20 	sts	0x2054, r24	; 0x802054 <_readingMem>
	_setCS = 1;
    12da:	80 93 53 20 	sts	0x2053, r24	; 0x802053 <_setCS>
	
	EDMA.CH0.TRFCNT = len;
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	e0 e0       	ldi	r30, 0x00	; 0
    12e2:	f1 e0       	ldi	r31, 0x01	; 1
    12e4:	46 8b       	std	Z+22, r20	; 0x16
    12e6:	57 8b       	std	Z+23, r21	; 0x17
	EDMA.CH0.ADDR = (uint16_t)buffer;
    12e8:	60 8f       	std	Z+24, r22	; 0x18
    12ea:	71 8f       	std	Z+25, r23	; 0x19
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
    12ec:	91 e3       	ldi	r25, 0x31	; 49
    12ee:	92 8b       	std	Z+18, r25	; 0x12
	EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
    12f0:	80 89       	ldd	r24, Z+16	; 0x10
    12f2:	80 68       	ori	r24, 0x80	; 128
    12f4:	80 8b       	std	Z+16, r24	; 0x10
	
	
	EDMA.CH1.TRFCNT = len;
    12f6:	46 a3       	std	Z+38, r20	; 0x26
    12f8:	57 a3       	std	Z+39, r21	; 0x27
	EDMA.CH1.ADDR = (uint16_t)buffer;;
    12fa:	60 a7       	std	Z+40, r22	; 0x28
    12fc:	71 a7       	std	Z+41, r23	; 0x29
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
    12fe:	92 a3       	std	Z+34, r25	; 0x22
	EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
    1300:	80 a1       	ldd	r24, Z+32	; 0x20
    1302:	80 69       	ori	r24, 0x90	; 144
    1304:	80 a3       	std	Z+32, r24	; 0x20


	while(_readingMem);
    1306:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
    130a:	81 11       	cpse	r24, r1
    130c:	fc cf       	rjmp	.-8      	; 0x1306 <mem_write_prop+0x58>
	

	
}
    130e:	08 95       	ret

00001310 <mem_write_data>:

void mem_write_data(uint32_t starting_address, uint8_t *buffer, uint8_t len)
{
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	25 97       	sbiw	r28, 0x05	; 5
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	de bf       	out	0x3e, r29	; 62
	
	volatile uint8_t write[4];
	volatile uint8_t trash;
	_setCS = 0;
    1326:	10 92 53 20 	sts	0x2053, r1	; 0x802053 <_setCS>
	_readingMem = 1;
    132a:	31 e0       	ldi	r19, 0x01	; 1
    132c:	30 93 54 20 	sts	0x2054, r19	; 0x802054 <_readingMem>
	PORTD.OUTCLR = PIN4_bm; //Set Pin 4 (CS) to low
    1330:	30 e1       	ldi	r19, 0x10	; 16
    1332:	30 93 66 06 	sts	0x0666, r19	; 0x800666 <__TEXT_REGION_LENGTH__+0x7f7666>
	
	write[0] = MEM_WRITE;
    1336:	32 e0       	ldi	r19, 0x02	; 2
    1338:	39 83       	std	Y+1, r19	; 0x01
	write[1] = (starting_address >> 16) & 0xFF;
    133a:	6c 01       	movw	r12, r24
    133c:	ee 24       	eor	r14, r14
    133e:	ff 24       	eor	r15, r15
    1340:	ca 82       	std	Y+2, r12	; 0x02
	write[2] = (starting_address >> 8) & 0xFF;
    1342:	c7 2e       	mov	r12, r23
    1344:	d8 2e       	mov	r13, r24
    1346:	e9 2e       	mov	r14, r25
    1348:	ff 24       	eor	r15, r15
    134a:	cb 82       	std	Y+3, r12	; 0x03
	write[3] = (starting_address >> 0) & 0xFF;
    134c:	6c 83       	std	Y+4, r22	; 0x04

	EDMA.CH0.TRFCNT = 4;
    134e:	e0 e0       	ldi	r30, 0x00	; 0
    1350:	f1 e0       	ldi	r31, 0x01	; 1
    1352:	64 e0       	ldi	r22, 0x04	; 4
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	66 8b       	std	Z+22, r22	; 0x16
    1358:	77 8b       	std	Z+23, r23	; 0x17
	EDMA.CH0.ADDR = (uint16_t)&trash;
    135a:	ce 01       	movw	r24, r28
    135c:	05 96       	adiw	r24, 0x05	; 5
    135e:	80 8f       	std	Z+24, r24	; 0x18
    1360:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_FIXED_gc; //
    1362:	80 e3       	ldi	r24, 0x30	; 48
    1364:	82 8b       	std	Z+18, r24	; 0x12
	EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
    1366:	80 89       	ldd	r24, Z+16	; 0x10
    1368:	80 68       	ori	r24, 0x80	; 128
    136a:	80 8b       	std	Z+16, r24	; 0x10
	
	
	EDMA.CH1.TRFCNT = 4;
    136c:	66 a3       	std	Z+38, r22	; 0x26
    136e:	77 a3       	std	Z+39, r23	; 0x27
	EDMA.CH1.ADDR = write;
    1370:	ce 01       	movw	r24, r28
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	80 a7       	std	Z+40, r24	; 0x28
    1376:	91 a7       	std	Z+41, r25	; 0x29
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
    1378:	81 e3       	ldi	r24, 0x31	; 49
    137a:	82 a3       	std	Z+34, r24	; 0x22
	EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
    137c:	80 a1       	ldd	r24, Z+32	; 0x20
    137e:	80 69       	ori	r24, 0x90	; 144
    1380:	80 a3       	std	Z+32, r24	; 0x20
	
	while(_readingMem);
    1382:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
    1386:	81 11       	cpse	r24, r1
    1388:	fc cf       	rjmp	.-8      	; 0x1382 <mem_write_data+0x72>
	_readingMem = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 54 20 	sts	0x2054, r24	; 0x802054 <_readingMem>
	_setCS = 1;
    1390:	80 93 53 20 	sts	0x2053, r24	; 0x802053 <_setCS>
	EDMA.CH0.TRFCNT = len;
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	e0 e0       	ldi	r30, 0x00	; 0
    1398:	f1 e0       	ldi	r31, 0x01	; 1
    139a:	26 8b       	std	Z+22, r18	; 0x16
    139c:	37 8b       	std	Z+23, r19	; 0x17
	EDMA.CH0.ADDR = (uint16_t)&trash;
    139e:	ce 01       	movw	r24, r28
    13a0:	05 96       	adiw	r24, 0x05	; 5
    13a2:	80 8f       	std	Z+24, r24	; 0x18
    13a4:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_FIXED_gc; //
    13a6:	80 e3       	ldi	r24, 0x30	; 48
    13a8:	82 8b       	std	Z+18, r24	; 0x12
	EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
    13aa:	80 89       	ldd	r24, Z+16	; 0x10
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	80 8b       	std	Z+16, r24	; 0x10
	
	EDMA.CH1.TRFCNT = len;
    13b0:	26 a3       	std	Z+38, r18	; 0x26
    13b2:	37 a3       	std	Z+39, r19	; 0x27
	EDMA.CH1.ADDR = (uint16_t)buffer;
    13b4:	40 a7       	std	Z+40, r20	; 0x28
    13b6:	51 a7       	std	Z+41, r21	; 0x29
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
    13b8:	81 e3       	ldi	r24, 0x31	; 49
    13ba:	82 a3       	std	Z+34, r24	; 0x22
	EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
    13bc:	80 a1       	ldd	r24, Z+32	; 0x20
    13be:	80 69       	ori	r24, 0x90	; 144
    13c0:	80 a3       	std	Z+32, r24	; 0x20
	
	//while(_readingMem);

	//PORTD.OUTSET = PIN4_bm;
	
}
    13c2:	25 96       	adiw	r28, 0x05	; 5
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	08 95       	ret

000013d6 <mem_read_data>:

void mem_read_data(uint32_t starting_address, uint8_t *buffer, uint8_t len)
{
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	25 97       	sbiw	r28, 0x05	; 5
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	de bf       	out	0x3e, r29	; 62
	volatile uint8_t read[4];
	volatile uint8_t trash;
	_readingMem = 1;
    13ec:	31 e0       	ldi	r19, 0x01	; 1
    13ee:	30 93 54 20 	sts	0x2054, r19	; 0x802054 <_readingMem>
	_setCS = 0;
    13f2:	10 92 53 20 	sts	0x2053, r1	; 0x802053 <_setCS>
	PORTD.OUTCLR = PIN4_bm; //Set Pin 4 (CS) to low
    13f6:	30 e1       	ldi	r19, 0x10	; 16
    13f8:	30 93 66 06 	sts	0x0666, r19	; 0x800666 <__TEXT_REGION_LENGTH__+0x7f7666>
	
	read[0] = MEM_READ;
    13fc:	33 e0       	ldi	r19, 0x03	; 3
    13fe:	39 83       	std	Y+1, r19	; 0x01
	read[1] = (starting_address >> 16) & 0xFF;
    1400:	6c 01       	movw	r12, r24
    1402:	ee 24       	eor	r14, r14
    1404:	ff 24       	eor	r15, r15
    1406:	ca 82       	std	Y+2, r12	; 0x02
	read[2] = (starting_address >> 8) & 0xFF;
    1408:	c7 2e       	mov	r12, r23
    140a:	d8 2e       	mov	r13, r24
    140c:	e9 2e       	mov	r14, r25
    140e:	ff 24       	eor	r15, r15
    1410:	cb 82       	std	Y+3, r12	; 0x03
	read[3] = (starting_address >> 0) & 0xFF;
    1412:	6c 83       	std	Y+4, r22	; 0x04

	EDMA.CH0.TRFCNT = 4;
    1414:	e0 e0       	ldi	r30, 0x00	; 0
    1416:	f1 e0       	ldi	r31, 0x01	; 1
    1418:	64 e0       	ldi	r22, 0x04	; 4
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	66 8b       	std	Z+22, r22	; 0x16
    141e:	77 8b       	std	Z+23, r23	; 0x17
	EDMA.CH0.ADDR = (uint16_t)&trash;
    1420:	ce 01       	movw	r24, r28
    1422:	05 96       	adiw	r24, 0x05	; 5
    1424:	80 8f       	std	Z+24, r24	; 0x18
    1426:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_FIXED_gc; //
    1428:	80 e3       	ldi	r24, 0x30	; 48
    142a:	82 8b       	std	Z+18, r24	; 0x12
	EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
    142c:	80 89       	ldd	r24, Z+16	; 0x10
    142e:	80 68       	ori	r24, 0x80	; 128
    1430:	80 8b       	std	Z+16, r24	; 0x10
	
	
	EDMA.CH1.TRFCNT = 4;
    1432:	66 a3       	std	Z+38, r22	; 0x26
    1434:	77 a3       	std	Z+39, r23	; 0x27
	EDMA.CH1.ADDR = read;
    1436:	ce 01       	movw	r24, r28
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	80 a7       	std	Z+40, r24	; 0x28
    143c:	91 a7       	std	Z+41, r25	; 0x29
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
    143e:	81 e3       	ldi	r24, 0x31	; 49
    1440:	82 a3       	std	Z+34, r24	; 0x22
	EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
    1442:	80 a1       	ldd	r24, Z+32	; 0x20
    1444:	80 69       	ori	r24, 0x90	; 144
    1446:	80 a3       	std	Z+32, r24	; 0x20
	
	while(_readingMem);
    1448:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
    144c:	81 11       	cpse	r24, r1
    144e:	fc cf       	rjmp	.-8      	; 0x1448 <mem_read_data+0x72>
	_setCS = 1;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	80 93 53 20 	sts	0x2053, r24	; 0x802053 <_setCS>
	_readingMem = 1;
    1456:	80 93 54 20 	sts	0x2054, r24	; 0x802054 <_readingMem>
	
	EDMA.CH0.TRFCNT = len;
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	e0 e0       	ldi	r30, 0x00	; 0
    145e:	f1 e0       	ldi	r31, 0x01	; 1
    1460:	26 8b       	std	Z+22, r18	; 0x16
    1462:	37 8b       	std	Z+23, r19	; 0x17
	EDMA.CH0.ADDR = (uint16_t)buffer;
    1464:	40 8f       	std	Z+24, r20	; 0x18
    1466:	51 8f       	std	Z+25, r21	; 0x19
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
    1468:	81 e3       	ldi	r24, 0x31	; 49
    146a:	82 8b       	std	Z+18, r24	; 0x12
	EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
    146c:	80 89       	ldd	r24, Z+16	; 0x10
    146e:	80 68       	ori	r24, 0x80	; 128
    1470:	80 8b       	std	Z+16, r24	; 0x10
	
	EDMA.CH1.TRFCNT = len;
    1472:	26 a3       	std	Z+38, r18	; 0x26
    1474:	37 a3       	std	Z+39, r19	; 0x27
	EDMA.CH1.ADDR = (uint16_t)&_dummyByte;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e2       	ldi	r25, 0x20	; 32
    147a:	80 a7       	std	Z+40, r24	; 0x28
    147c:	91 a7       	std	Z+41, r25	; 0x29
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_FIXED_gc; //
    147e:	80 e3       	ldi	r24, 0x30	; 48
    1480:	82 a3       	std	Z+34, r24	; 0x22
	EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
    1482:	80 a1       	ldd	r24, Z+32	; 0x20
    1484:	80 69       	ori	r24, 0x90	; 144
    1486:	80 a3       	std	Z+32, r24	; 0x20
	
	while(_readingMem);
    1488:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
    148c:	81 11       	cpse	r24, r1
    148e:	fc cf       	rjmp	.-8      	; 0x1488 <mem_read_data+0xb2>

	
	
}
    1490:	25 96       	adiw	r28, 0x05	; 5
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	df 90       	pop	r13
    14a0:	cf 90       	pop	r12
    14a2:	08 95       	ret

000014a4 <get_data_from_uart>:

uint8_t get_data_from_uart(uint8_t *buffer, uint8_t len, uint8_t offset)
{
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29

	uint16_t i = 0;

	RTC.CNT = 0;
    14a8:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f7408>
    14ac:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x7f7409>



void enable_rtc()
{
	CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm; //Set the RTC clock source to the 1kHz ULP and enable it.
    14b0:	21 e0       	ldi	r18, 0x01	; 1
    14b2:	20 93 43 00 	sts	0x0043, r18	; 0x800043 <__TEXT_REGION_LENGTH__+0x7f7043>

	RTC.CNT = 0;
	enable_rtc();
	

	while(i < len)
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	61 15       	cp	r22, r1
    14ba:	71 05       	cpc	r23, r1
    14bc:	39 f1       	breq	.+78     	; 0x150c <get_data_from_uart+0x68>
    14be:	24 2f       	mov	r18, r20
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	ec 01       	movw	r28, r24
    14c4:	c2 0f       	add	r28, r18
    14c6:	d3 1f       	adc	r29, r19
    14c8:	62 0f       	add	r22, r18
    14ca:	73 1f       	adc	r23, r19
    14cc:	9c 01       	movw	r18, r24
    14ce:	26 0f       	add	r18, r22
    14d0:	37 1f       	adc	r19, r23
	{
		while(!(USARTC0.STATUS & USART_RXCIF_bm) && !(RTC.INTFLAGS & RTC_OVFIF_bm));
    14d2:	a0 ec       	ldi	r26, 0xC0	; 192
    14d4:	b8 e0       	ldi	r27, 0x08	; 8
    14d6:	e0 e0       	ldi	r30, 0x00	; 0
    14d8:	f4 e0       	ldi	r31, 0x04	; 4
    14da:	11 96       	adiw	r26, 0x01	; 1
    14dc:	9c 91       	ld	r25, X
    14de:	11 97       	sbiw	r26, 0x01	; 1
    14e0:	99 23       	and	r25, r25
    14e2:	1c f0       	brlt	.+6      	; 0x14ea <get_data_from_uart+0x46>
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	90 ff       	sbrs	r25, 0
    14e8:	f8 cf       	rjmp	.-16     	; 0x14da <get_data_from_uart+0x36>
		RTC.CNT = 0;
    14ea:	10 86       	std	Z+8, r1	; 0x08
    14ec:	11 86       	std	Z+9, r1	; 0x09
		if ((RTC.INTFLAGS & RTC_OVFIF_bm))
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	90 ff       	sbrs	r25, 0
    14f2:	07 c0       	rjmp	.+14     	; 0x1502 <get_data_from_uart+0x5e>
	CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm; //Set the RTC clock source to the 1kHz ULP and enable it.
}

void disable_rtc()
{
	CLK.RTCCTRL = 0;
    14f4:	10 92 43 00 	sts	0x0043, r1	; 0x800043 <__TEXT_REGION_LENGTH__+0x7f7043>
		while(!(USARTC0.STATUS & USART_RXCIF_bm) && !(RTC.INTFLAGS & RTC_OVFIF_bm));
		RTC.CNT = 0;
		if ((RTC.INTFLAGS & RTC_OVFIF_bm))
		{
			disable_rtc();
			RTC.INTFLAGS = RTC_OVFIF_bm;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <__TEXT_REGION_LENGTH__+0x7f7403>

			return 0;
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	08 c0       	rjmp	.+16     	; 0x1512 <get_data_from_uart+0x6e>
		}
		
		buffer[i + offset] = USARTC0.DATA;
    1502:	9c 91       	ld	r25, X
    1504:	99 93       	st	Y+, r25

	RTC.CNT = 0;
	enable_rtc();
	

	while(i < len)
    1506:	c2 17       	cp	r28, r18
    1508:	d3 07       	cpc	r29, r19
    150a:	39 f7       	brne	.-50     	; 0x14da <get_data_from_uart+0x36>
	CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm; //Set the RTC clock source to the 1kHz ULP and enable it.
}

void disable_rtc()
{
	CLK.RTCCTRL = 0;
    150c:	10 92 43 00 	sts	0x0043, r1	; 0x800043 <__TEXT_REGION_LENGTH__+0x7f7043>
		i++;
	}
	
	
	disable_rtc();
	return 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
}
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <get_uint_from_uart>:

uint8_t get_uint_from_uart(uint32_t *intVal)
{
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	00 d0       	rcall	.+0      	; 0x1522 <get_uint_from_uart+0xa>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <get_uint_from_uart+0xc>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	8c 01       	movw	r16, r24
	static volatile uint8_t arr[4];
	uint8_t i = 0;
	volatile uint32_t val;
	uint32_t *valPtr;

	if (!get_data_from_uart(arr, 4, 0))
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	64 e0       	ldi	r22, 0x04	; 4
    152e:	8f e4       	ldi	r24, 0x4F	; 79
    1530:	90 e2       	ldi	r25, 0x20	; 32
    1532:	b8 df       	rcall	.-144    	; 0x14a4 <get_data_from_uart>
    1534:	88 23       	and	r24, r24
    1536:	b1 f0       	breq	.+44     	; 0x1564 <get_uint_from_uart+0x4c>
		return 0;
	}
	
	
	valPtr = arr;
	val = *valPtr;
    1538:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <arr.4112>
    153c:	90 91 50 20 	lds	r25, 0x2050	; 0x802050 <arr.4112+0x1>
    1540:	a0 91 51 20 	lds	r26, 0x2051	; 0x802051 <arr.4112+0x2>
    1544:	b0 91 52 20 	lds	r27, 0x2052	; 0x802052 <arr.4112+0x3>
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	ab 83       	std	Y+3, r26	; 0x03
    154e:	bc 83       	std	Y+4, r27	; 0x04
	*intVal = val;
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	ab 81       	ldd	r26, Y+3	; 0x03
    1556:	bc 81       	ldd	r27, Y+4	; 0x04
    1558:	f8 01       	movw	r30, r16
    155a:	80 83       	st	Z, r24
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	a2 83       	std	Z+2, r26	; 0x02
    1560:	b3 83       	std	Z+3, r27	; 0x03
	return 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
}
    1564:	24 96       	adiw	r28, 0x04	; 4
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	08 95       	ret

00001574 <transmit_data>:


void transmit_data(uint8_t *data, uint8_t len, uint8_t offset)
{
	uint16_t i = 0;
	uint8_t trash = USARTC0.DATA; //make sure data is clear
    1574:	e0 ec       	ldi	r30, 0xC0	; 192
    1576:	f8 e0       	ldi	r31, 0x08	; 8
    1578:	20 81       	ld	r18, Z
	USARTC0.STATUS = USART_TXCIF_bm | USART_DREIF_bm ;
    157a:	20 e6       	ldi	r18, 0x60	; 96
    157c:	21 83       	std	Z+1, r18	; 0x01
	while(i < len)
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	61 15       	cp	r22, r1
    1582:	71 05       	cpc	r23, r1
    1584:	a1 f0       	breq	.+40     	; 0x15ae <transmit_data+0x3a>
    1586:	24 2f       	mov	r18, r20
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	dc 01       	movw	r26, r24
    158c:	a2 0f       	add	r26, r18
    158e:	b3 1f       	adc	r27, r19
    1590:	62 0f       	add	r22, r18
    1592:	73 1f       	adc	r23, r19
    1594:	9c 01       	movw	r18, r24
    1596:	26 0f       	add	r18, r22
    1598:	37 1f       	adc	r19, r23
	{

		USARTC0.DATA = data[offset + i];
		while(!(USARTC0.STATUS & USART_TXCIF_bm));
		USARTC0.STATUS = USART_TXCIF_bm | USART_DREIF_bm ;
    159a:	80 e6       	ldi	r24, 0x60	; 96
	uint8_t trash = USARTC0.DATA; //make sure data is clear
	USARTC0.STATUS = USART_TXCIF_bm | USART_DREIF_bm ;
	while(i < len)
	{

		USARTC0.DATA = data[offset + i];
    159c:	9d 91       	ld	r25, X+
    159e:	90 83       	st	Z, r25
		while(!(USARTC0.STATUS & USART_TXCIF_bm));
    15a0:	91 81       	ldd	r25, Z+1	; 0x01
    15a2:	96 ff       	sbrs	r25, 6
    15a4:	fd cf       	rjmp	.-6      	; 0x15a0 <transmit_data+0x2c>
		USARTC0.STATUS = USART_TXCIF_bm | USART_DREIF_bm ;
    15a6:	81 83       	std	Z+1, r24	; 0x01
void transmit_data(uint8_t *data, uint8_t len, uint8_t offset)
{
	uint16_t i = 0;
	uint8_t trash = USARTC0.DATA; //make sure data is clear
	USARTC0.STATUS = USART_TXCIF_bm | USART_DREIF_bm ;
	while(i < len)
    15a8:	a2 17       	cp	r26, r18
    15aa:	b3 07       	cpc	r27, r19
    15ac:	b9 f7       	brne	.-18     	; 0x159c <transmit_data+0x28>
    15ae:	08 95       	ret

000015b0 <transmit_status>:
	
}

void transmit_status(uint8_t status)
{
	_propBuff[0] = status;
    15b0:	80 93 7d 21 	sts	0x217D, r24	; 0x80217d <_propBuff>
	//Transmit status byte
	transmit_data(_propBuff, 1, 0);
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	8d e7       	ldi	r24, 0x7D	; 125
    15ba:	91 e2       	ldi	r25, 0x21	; 33
    15bc:	db cf       	rjmp	.-74     	; 0x1574 <transmit_data>
    15be:	08 95       	ret

000015c0 <transmit_status_and_data>:
	return;
}

void transmit_status_and_data(uint8_t status, uint32_t data)
{
	_propBuff[0] = status;
    15c0:	ed e7       	ldi	r30, 0x7D	; 125
    15c2:	f1 e2       	ldi	r31, 0x21	; 33
    15c4:	80 83       	st	Z, r24
	_propBuff[1] = (data >> 0) & 0xFF;
    15c6:	41 83       	std	Z+1, r20	; 0x01
	_propBuff[2] = (data >> 8) & 0xFF;
    15c8:	bb 27       	eor	r27, r27
    15ca:	a7 2f       	mov	r26, r23
    15cc:	96 2f       	mov	r25, r22
    15ce:	85 2f       	mov	r24, r21
    15d0:	82 83       	std	Z+2, r24	; 0x02
	_propBuff[3] = (data >> 16) & 0xFF;
    15d2:	cb 01       	movw	r24, r22
    15d4:	aa 27       	eor	r26, r26
    15d6:	bb 27       	eor	r27, r27
    15d8:	83 83       	std	Z+3, r24	; 0x03
	_propBuff[4] = (data >> 24) & 0xFF;
    15da:	47 2f       	mov	r20, r23
    15dc:	55 27       	eor	r21, r21
    15de:	66 27       	eor	r22, r22
    15e0:	77 27       	eor	r23, r23
    15e2:	44 83       	std	Z+4, r20	; 0x04

	//Transmit status byte
	transmit_data(_propBuff, 5, 0);
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	65 e0       	ldi	r22, 0x05	; 5
    15e8:	cf 01       	movw	r24, r30
    15ea:	c4 cf       	rjmp	.-120    	; 0x1574 <transmit_data>
    15ec:	08 95       	ret

000015ee <get_mem>:
	return;
}

void get_mem()
{
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	28 97       	sbiw	r28, 0x08	; 8
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	de bf       	out	0x3e, r29	; 62

	volatile uint32_t address;
	volatile uint32_t length;

	if (!get_uint_from_uart(&address) || !get_uint_from_uart(&length))
    15fc:	ce 01       	movw	r24, r28
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	8b df       	rcall	.-234    	; 0x1518 <get_uint_from_uart>
    1602:	88 23       	and	r24, r24
    1604:	29 f0       	breq	.+10     	; 0x1610 <get_mem+0x22>
    1606:	ce 01       	movw	r24, r28
    1608:	05 96       	adiw	r24, 0x05	; 5
    160a:	86 df       	rcall	.-244    	; 0x1518 <get_uint_from_uart>
    160c:	81 11       	cpse	r24, r1
    160e:	07 c0       	rjmp	.+14     	; 0x161e <get_mem+0x30>
	{
		transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	d2 df       	rcall	.-92     	; 0x15c0 <transmit_status_and_data>
		return;
    161c:	56 c0       	rjmp	.+172    	; 0x16ca <get_mem+0xdc>
	}

	transmit_status(OP_STATUS_SUCCESS);
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	c7 df       	rcall	.-114    	; 0x15b0 <transmit_status>
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
	while (length > 255)
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	af 81       	ldd	r26, Y+7	; 0x07
    1628:	b8 85       	ldd	r27, Y+8	; 0x08
    162a:	8f 3f       	cpi	r24, 0xFF	; 255
    162c:	91 05       	cpc	r25, r1
    162e:	a1 05       	cpc	r26, r1
    1630:	b1 05       	cpc	r27, r1
    1632:	81 f1       	breq	.+96     	; 0x1694 <get_mem+0xa6>
    1634:	78 f1       	brcs	.+94     	; 0x1694 <get_mem+0xa6>
    1636:	69 81       	ldd	r22, Y+1	; 0x01
	{
		mem_read_data(address, _buff0, 255);
    1638:	7a 81       	ldd	r23, Y+2	; 0x02
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	2f ef       	ldi	r18, 0xFF	; 255
    1640:	45 e7       	ldi	r20, 0x75	; 117
    1642:	50 e2       	ldi	r21, 0x20	; 32
    1644:	c8 de       	rcall	.-624    	; 0x13d6 <mem_read_data>
    1646:	89 81       	ldd	r24, Y+1	; 0x01
		address += 255;
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	ab 81       	ldd	r26, Y+3	; 0x03
    164c:	bc 81       	ldd	r27, Y+4	; 0x04
    164e:	81 50       	subi	r24, 0x01	; 1
    1650:	9f 4f       	sbci	r25, 0xFF	; 255
    1652:	af 4f       	sbci	r26, 0xFF	; 255
    1654:	bf 4f       	sbci	r27, 0xFF	; 255
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	9a 83       	std	Y+2, r25	; 0x02
    165a:	ab 83       	std	Y+3, r26	; 0x03
    165c:	bc 83       	std	Y+4, r27	; 0x04
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
		length -= 255;
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	af 81       	ldd	r26, Y+7	; 0x07
    1664:	b8 85       	ldd	r27, Y+8	; 0x08
    1666:	8f 5f       	subi	r24, 0xFF	; 255
    1668:	91 09       	sbc	r25, r1
    166a:	a1 09       	sbc	r26, r1
    166c:	b1 09       	sbc	r27, r1
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	af 83       	std	Y+7, r26	; 0x07
    1674:	b8 87       	std	Y+8, r27	; 0x08
		transmit_data(_buff0, 255, 0);
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	6f ef       	ldi	r22, 0xFF	; 255
    167a:	85 e7       	ldi	r24, 0x75	; 117
    167c:	90 e2       	ldi	r25, 0x20	; 32
    167e:	7a df       	rcall	.-268    	; 0x1574 <transmit_data>
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
		transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
		return;
	}

	transmit_status(OP_STATUS_SUCCESS);
	while (length > 255)
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	af 81       	ldd	r26, Y+7	; 0x07
    1686:	b8 85       	ldd	r27, Y+8	; 0x08
    1688:	8f 3f       	cpi	r24, 0xFF	; 255
    168a:	91 05       	cpc	r25, r1
    168c:	a1 05       	cpc	r26, r1
    168e:	b1 05       	cpc	r27, r1
    1690:	09 f0       	breq	.+2      	; 0x1694 <get_mem+0xa6>
    1692:	88 f6       	brcc	.-94     	; 0x1636 <get_mem+0x48>
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
		address += 255;
		length -= 255;
		transmit_data(_buff0, 255, 0);
	}
	
	if (length > 0)
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	af 81       	ldd	r26, Y+7	; 0x07
    169a:	b8 85       	ldd	r27, Y+8	; 0x08
    169c:	89 2b       	or	r24, r25
    169e:	8a 2b       	or	r24, r26
    16a0:	8b 2b       	or	r24, r27
    16a2:	99 f0       	breq	.+38     	; 0x16ca <get_mem+0xdc>
    16a4:	2d 81       	ldd	r18, Y+5	; 0x05
	{
		mem_read_data(address, _buff0, length);
    16a6:	3e 81       	ldd	r19, Y+6	; 0x06
    16a8:	4f 81       	ldd	r20, Y+7	; 0x07
    16aa:	58 85       	ldd	r21, Y+8	; 0x08
    16ac:	69 81       	ldd	r22, Y+1	; 0x01
    16ae:	7a 81       	ldd	r23, Y+2	; 0x02
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	45 e7       	ldi	r20, 0x75	; 117
    16b6:	50 e2       	ldi	r21, 0x20	; 32
    16b8:	8e de       	rcall	.-740    	; 0x13d6 <mem_read_data>
    16ba:	6d 81       	ldd	r22, Y+5	; 0x05
		transmit_data(_buff0, length, 0);
    16bc:	7e 81       	ldd	r23, Y+6	; 0x06
    16be:	8f 81       	ldd	r24, Y+7	; 0x07
    16c0:	98 85       	ldd	r25, Y+8	; 0x08
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	85 e7       	ldi	r24, 0x75	; 117
    16c6:	90 e2       	ldi	r25, 0x20	; 32
    16c8:	55 df       	rcall	.-342    	; 0x1574 <transmit_data>
    16ca:	28 96       	adiw	r28, 0x08	; 8
	}
	
}
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <get_mem_id>:
    16d6:	46 e0       	ldi	r20, 0x06	; 6

void get_mem_id()
{
	mem_read_prop(MEM_READ_ID, _propBuff, 6);
    16d8:	6d e7       	ldi	r22, 0x7D	; 125
    16da:	71 e2       	ldi	r23, 0x21	; 33
    16dc:	8b e4       	ldi	r24, 0x4B	; 75
    16de:	b6 dd       	rcall	.-1172   	; 0x124c <mem_read_prop>
	transmit_status(OP_STATUS_SUCCESS);
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	66 df       	rcall	.-308    	; 0x15b0 <transmit_status>
	transmit_data(_propBuff, 2, 4);
    16e4:	44 e0       	ldi	r20, 0x04	; 4
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	8d e7       	ldi	r24, 0x7D	; 125
    16ea:	91 e2       	ldi	r25, 0x21	; 33
    16ec:	43 cf       	rjmp	.-378    	; 0x1574 <transmit_data>
    16ee:	08 95       	ret

000016f0 <get_mem_jedec>:
}

void get_mem_jedec()
{
	mem_read_prop(MEM_READ_JEDEC, _propBuff, 4);
    16f0:	44 e0       	ldi	r20, 0x04	; 4
    16f2:	6d e7       	ldi	r22, 0x7D	; 125
    16f4:	71 e2       	ldi	r23, 0x21	; 33
    16f6:	8f e9       	ldi	r24, 0x9F	; 159
    16f8:	a9 dd       	rcall	.-1198   	; 0x124c <mem_read_prop>
	transmit_status(OP_STATUS_SUCCESS);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	59 df       	rcall	.-334    	; 0x15b0 <transmit_status>
	transmit_data(_propBuff, 3, 1);
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	63 e0       	ldi	r22, 0x03	; 3
    1702:	8d e7       	ldi	r24, 0x7D	; 125
    1704:	91 e2       	ldi	r25, 0x21	; 33
    1706:	36 cf       	rjmp	.-404    	; 0x1574 <transmit_data>
    1708:	08 95       	ret

0000170a <get_mem_status>:
}

void get_mem_status()
{
	mem_read_prop(MEM_READ_STATUS, _propBuff, 2);
    170a:	42 e0       	ldi	r20, 0x02	; 2
    170c:	6d e7       	ldi	r22, 0x7D	; 125
    170e:	71 e2       	ldi	r23, 0x21	; 33
    1710:	85 e0       	ldi	r24, 0x05	; 5
    1712:	9c dd       	rcall	.-1224   	; 0x124c <mem_read_prop>
	transmit_status(OP_STATUS_SUCCESS);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	4c df       	rcall	.-360    	; 0x15b0 <transmit_status>
	transmit_data(_propBuff, 1, 1);
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	61 e0       	ldi	r22, 0x01	; 1
    171c:	8d e7       	ldi	r24, 0x7D	; 125
    171e:	91 e2       	ldi	r25, 0x21	; 33
    1720:	29 cf       	rjmp	.-430    	; 0x1574 <transmit_data>
    1722:	08 95       	ret

00001724 <mem_enable_write>:
}

uint8_t mem_enable_write()
{
    1724:	cf 93       	push	r28
	uint8_t retryCount = 0;
	mem_write_prop(MEM_ENABLE_WRITE, _propBuff, 1);
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	6d e7       	ldi	r22, 0x7D	; 125
    172a:	71 e2       	ldi	r23, 0x21	; 33
    172c:	86 e0       	ldi	r24, 0x06	; 6
    172e:	bf dd       	rcall	.-1154   	; 0x12ae <mem_write_prop>
    1730:	ca e0       	ldi	r28, 0x0A	; 10
	
	
	while(retryCount++ < RETRY_ATTEMPTS)
	{
		mem_read_prop(MEM_READ_STATUS, _propBuff, 2);
    1732:	42 e0       	ldi	r20, 0x02	; 2
    1734:	6d e7       	ldi	r22, 0x7D	; 125
    1736:	71 e2       	ldi	r23, 0x21	; 33
    1738:	85 e0       	ldi	r24, 0x05	; 5
    173a:	88 dd       	rcall	.-1264   	; 0x124c <mem_read_prop>
		if ((_propBuff[1] & MEM_WRITE_ENABLED_STATUS_BIT))
    173c:	80 91 7e 21 	lds	r24, 0x217E	; 0x80217e <_propBuff+0x1>
    1740:	81 fd       	sbrc	r24, 1
    1742:	0c c0       	rjmp	.+24     	; 0x175c <mem_enable_write+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1744:	2f ef       	ldi	r18, 0xFF	; 255
    1746:	89 e6       	ldi	r24, 0x69	; 105
    1748:	98 e1       	ldi	r25, 0x18	; 24
    174a:	21 50       	subi	r18, 0x01	; 1
    174c:	80 40       	sbci	r24, 0x00	; 0
    174e:	90 40       	sbci	r25, 0x00	; 0
    1750:	e1 f7       	brne	.-8      	; 0x174a <mem_enable_write+0x26>
    1752:	00 c0       	rjmp	.+0      	; 0x1754 <mem_enable_write+0x30>
    1754:	00 00       	nop
    1756:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t retryCount = 0;
	mem_write_prop(MEM_ENABLE_WRITE, _propBuff, 1);
	
	
	while(retryCount++ < RETRY_ATTEMPTS)
    1758:	61 f7       	brne	.-40     	; 0x1732 <mem_enable_write+0xe>
    175a:	01 c0       	rjmp	.+2      	; 0x175e <mem_enable_write+0x3a>
	{
		mem_read_prop(MEM_READ_STATUS, _propBuff, 2);
		if ((_propBuff[1] & MEM_WRITE_ENABLED_STATUS_BIT))
		{
			return 1;
    175c:	c1 e0       	ldi	r28, 0x01	; 1
		}
		_delay_ms(RETRY_MS);
	}
	
	return 0;
}
    175e:	8c 2f       	mov	r24, r28
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <erase_mem>:


void erase_mem()
{
	if (!mem_enable_write())
    1764:	df df       	rcall	.-66     	; 0x1724 <mem_enable_write>
    1766:	81 11       	cpse	r24, r1
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <erase_mem+0x12>
	{
		transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_NO_RESPONSE);
    176a:	42 e0       	ldi	r20, 0x02	; 2
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	26 cf       	rjmp	.-436    	; 0x15c0 <transmit_status_and_data>
		return;
    1774:	08 95       	ret
	}

	mem_write_prop(MEM_ERASE, _buff1, 1);
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	69 ee       	ldi	r22, 0xE9	; 233
    177a:	71 e2       	ldi	r23, 0x21	; 33
    177c:	87 ec       	ldi	r24, 0xC7	; 199
    177e:	97 dd       	rcall	.-1234   	; 0x12ae <mem_write_prop>
	RTC.PER = INPUT_TIMEOUT_PER_MS;
    1780:	88 ee       	ldi	r24, 0xE8	; 232
    1782:	93 e0       	ldi	r25, 0x03	; 3
    1784:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x7f740a>
    1788:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x7f740b>
	
	while(1)
	{
		mem_read_prop(MEM_READ_STATUS, _buff1, 2);
    178c:	42 e0       	ldi	r20, 0x02	; 2
    178e:	69 ee       	ldi	r22, 0xE9	; 233
    1790:	71 e2       	ldi	r23, 0x21	; 33
    1792:	85 e0       	ldi	r24, 0x05	; 5
    1794:	5b dd       	rcall	.-1354   	; 0x124c <mem_read_prop>
		if (!(_buff1[1] & MEM_BUSY_STATUS_BIT))
    1796:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <_buff1+0x1>
    179a:	80 fd       	sbrc	r24, 0
		{
			transmit_status(OP_STATUS_SUCCESS);
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <erase_mem+0x40>
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	07 cf       	rjmp	.-498    	; 0x15b0 <transmit_status>
			return;
    17a2:	08 95       	ret
    17a4:	2f ef       	ldi	r18, 0xFF	; 255
    17a6:	89 e6       	ldi	r24, 0x69	; 105
    17a8:	98 e1       	ldi	r25, 0x18	; 24
    17aa:	21 50       	subi	r18, 0x01	; 1
    17ac:	80 40       	sbci	r24, 0x00	; 0
    17ae:	90 40       	sbci	r25, 0x00	; 0
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <erase_mem+0x46>
    17b2:	00 c0       	rjmp	.+0      	; 0x17b4 <erase_mem+0x50>
		}
		_delay_ms(RETRY_MS);
		
		transmit_status(OP_STATUS_BUSY);
    17b4:	00 00       	nop
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	fb de       	rcall	.-522    	; 0x15b0 <transmit_status>
	}
    17ba:	e8 cf       	rjmp	.-48     	; 0x178c <erase_mem+0x28>

000017bc <swap_write_buffs>:
}

void swap_write_buffs()
{
	
	if (_memInBuff == _buff0)
    17bc:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <_memInBuff>
    17c0:	90 91 7c 21 	lds	r25, 0x217C	; 0x80217c <_memInBuff+0x1>
    17c4:	85 57       	subi	r24, 0x75	; 117
    17c6:	90 42       	sbci	r25, 0x20	; 32
    17c8:	69 f4       	brne	.+26     	; 0x17e4 <swap_write_buffs+0x28>
	{
		_memInBuff = _buff1;
    17ca:	89 ee       	ldi	r24, 0xE9	; 233
    17cc:	91 e2       	ldi	r25, 0x21	; 33
    17ce:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <_memInBuff>
    17d2:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <_memInBuff+0x1>
		_memOutBuff = _buff0;
    17d6:	85 e7       	ldi	r24, 0x75	; 117
    17d8:	90 e2       	ldi	r25, 0x20	; 32
    17da:	80 93 e8 23 	sts	0x23E8, r24	; 0x8023e8 <_memOutBuff>
    17de:	90 93 e9 23 	sts	0x23E9, r25	; 0x8023e9 <_memOutBuff+0x1>
    17e2:	08 95       	ret
	}
	else
	{
		_memInBuff = _buff0;
    17e4:	85 e7       	ldi	r24, 0x75	; 117
    17e6:	90 e2       	ldi	r25, 0x20	; 32
    17e8:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <_memInBuff>
    17ec:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <_memInBuff+0x1>
		_memOutBuff = _buff1;
    17f0:	89 ee       	ldi	r24, 0xE9	; 233
    17f2:	91 e2       	ldi	r25, 0x21	; 33
    17f4:	80 93 e8 23 	sts	0x23E8, r24	; 0x8023e8 <_memOutBuff>
    17f8:	90 93 e9 23 	sts	0x23E9, r25	; 0x8023e9 <_memOutBuff+0x1>
    17fc:	08 95       	ret

000017fe <small_write_mem>:
	}
}

uint8_t small_write_mem(uint8_t *buffer, uint32_t address, uint8_t length)
{
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	8c 01       	movw	r16, r24
    1810:	6a 01       	movw	r12, r20
    1812:	7b 01       	movw	r14, r22
    1814:	d2 2f       	mov	r29, r18
	
	if (!mem_enable_write())
    1816:	86 df       	rcall	.-244    	; 0x1724 <mem_enable_write>
    1818:	c8 2f       	mov	r28, r24
    181a:	81 11       	cpse	r24, r1
    181c:	07 c0       	rjmp	.+14     	; 0x182c <small_write_mem+0x2e>
	{
		transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_NO_RESPONSE);
    181e:	42 e0       	ldi	r20, 0x02	; 2
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	cb de       	rcall	.-618    	; 0x15c0 <transmit_status_and_data>
		return 0;
    182a:	06 c0       	rjmp	.+12     	; 0x1838 <small_write_mem+0x3a>
	}
	
	mem_write_data(address, buffer, length);
    182c:	2d 2f       	mov	r18, r29
    182e:	a8 01       	movw	r20, r16
    1830:	c7 01       	movw	r24, r14
    1832:	b6 01       	movw	r22, r12
    1834:	6d dd       	rcall	.-1318   	; 0x1310 <mem_write_data>

	return 1;
    1836:	c1 e0       	ldi	r28, 0x01	; 1
}
    1838:	8c 2f       	mov	r24, r28
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	08 95       	ret

0000184c <write_mem>:

void write_mem()
{
    184c:	8f 92       	push	r8
    184e:	9f 92       	push	r9
    1850:	af 92       	push	r10
    1852:	bf 92       	push	r11
    1854:	cf 92       	push	r12
    1856:	df 92       	push	r13
    1858:	ef 92       	push	r14
    185a:	ff 92       	push	r15
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	28 97       	sbiw	r28, 0x08	; 8
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	de bf       	out	0x3e, r29	; 62
	uint32_t leftToRead = length;
	uint32_t leftToWrite = length;
	uint8_t transLen;
	uint8_t lengthOffset;
	
	if (!get_uint_from_uart(&address) || !get_uint_from_uart(&length))
    186e:	ce 01       	movw	r24, r28
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	52 de       	rcall	.-860    	; 0x1518 <get_uint_from_uart>
    1874:	88 23       	and	r24, r24
    1876:	29 f0       	breq	.+10     	; 0x1882 <write_mem+0x36>
    1878:	ce 01       	movw	r24, r28
    187a:	05 96       	adiw	r24, 0x05	; 5
    187c:	4d de       	rcall	.-870    	; 0x1518 <get_uint_from_uart>
    187e:	81 11       	cpse	r24, r1
    1880:	07 c0       	rjmp	.+14     	; 0x1890 <write_mem+0x44>
	{
		transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	99 de       	rcall	.-718    	; 0x15c0 <transmit_status_and_data>
		return;
    188e:	06 c1       	rjmp	.+524    	; 0x1a9c <write_mem+0x250>
	}


	
	lengthOffset = WRITE_CHUNK_SIZE - (address % WRITE_CHUNK_SIZE);
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	8f 77       	andi	r24, 0x7F	; 127
    1894:	10 e8       	ldi	r17, 0x80	; 128
    1896:	18 1b       	sub	r17, r24
	
	//because of timing (needing to read everything from the UART), if the length is small, handle the write in one or two ops first
	if (length < WRITE_CHUNK_SIZE)
    1898:	cd 80       	ldd	r12, Y+5	; 0x05
    189a:	de 80       	ldd	r13, Y+6	; 0x06
    189c:	ef 80       	ldd	r14, Y+7	; 0x07
    189e:	f8 84       	ldd	r15, Y+8	; 0x08
    18a0:	80 e8       	ldi	r24, 0x80	; 128
    18a2:	c8 16       	cp	r12, r24
    18a4:	d1 04       	cpc	r13, r1
    18a6:	e1 04       	cpc	r14, r1
    18a8:	f1 04       	cpc	r15, r1
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <write_mem+0x62>
    18ac:	50 c0       	rjmp	.+160    	; 0x194e <write_mem+0x102>
	{
		if (!get_data_from_uart(_buff0, length, 0))
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	6c 2d       	mov	r22, r12
    18b2:	85 e7       	ldi	r24, 0x75	; 117
    18b4:	90 e2       	ldi	r25, 0x20	; 32
    18b6:	f6 dd       	rcall	.-1044   	; 0x14a4 <get_data_from_uart>
    18b8:	81 11       	cpse	r24, r1
    18ba:	06 c0       	rjmp	.+12     	; 0x18c8 <write_mem+0x7c>
		{
			transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	7d de       	rcall	.-774    	; 0x15c0 <transmit_status_and_data>
			return;
    18c6:	ea c0       	rjmp	.+468    	; 0x1a9c <write_mem+0x250>
		}
		
		//if the data will still fit within a page boundary, even with the address offset, set the lengthOffset to 0 so we just write the data normally
		if (lengthOffset > length)
    18c8:	81 2f       	mov	r24, r17
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a0 e0       	ldi	r26, 0x00	; 0
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	4d 81       	ldd	r20, Y+5	; 0x05
    18d2:	5e 81       	ldd	r21, Y+6	; 0x06
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	48 17       	cp	r20, r24
    18da:	59 07       	cpc	r21, r25
    18dc:	6a 07       	cpc	r22, r26
    18de:	7b 07       	cpc	r23, r27
    18e0:	c0 f0       	brcs	.+48     	; 0x1912 <write_mem+0xc6>
		{
			lengthOffset = 0;
		}
		
		//If the data is going to go over a page boundary
		if (lengthOffset > 0)
    18e2:	11 23       	and	r17, r17
    18e4:	b9 f0       	breq	.+46     	; 0x1914 <write_mem+0xc8>
		{
			
			
			if (!small_write_mem(_buff0, address, lengthOffset))
    18e6:	49 81       	ldd	r20, Y+1	; 0x01
    18e8:	5a 81       	ldd	r21, Y+2	; 0x02
    18ea:	6b 81       	ldd	r22, Y+3	; 0x03
    18ec:	7c 81       	ldd	r23, Y+4	; 0x04
    18ee:	21 2f       	mov	r18, r17
    18f0:	85 e7       	ldi	r24, 0x75	; 117
    18f2:	90 e2       	ldi	r25, 0x20	; 32
    18f4:	84 df       	rcall	.-248    	; 0x17fe <small_write_mem>
    18f6:	88 23       	and	r24, r24
    18f8:	09 f4       	brne	.+2      	; 0x18fc <write_mem+0xb0>
    18fa:	d0 c0       	rjmp	.+416    	; 0x1a9c <write_mem+0x250>
			{
				return;
			}
			while(_readingMem);
    18fc:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
    1900:	81 11       	cpse	r24, r1
    1902:	fc cf       	rjmp	.-8      	; 0x18fc <write_mem+0xb0>
    1904:	8f e3       	ldi	r24, 0x3F	; 63
    1906:	9f e1       	ldi	r25, 0x1F	; 31
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <write_mem+0xbc>
    190c:	00 c0       	rjmp	.+0      	; 0x190e <write_mem+0xc2>
    190e:	00 00       	nop
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <write_mem+0xc8>
		}
		
		//if the data will still fit within a page boundary, even with the address offset, set the lengthOffset to 0 so we just write the data normally
		if (lengthOffset > length)
		{
			lengthOffset = 0;
    1912:	10 e0       	ldi	r17, 0x00	; 0
			//We need to wait until the memory is ready for the last write
			_delay_ms(1);
		}
		
		//Send the rest. if lengthOffset was 0, then everything gets sent here
		if (!small_write_mem(_buff0 + lengthOffset, address + lengthOffset, length - lengthOffset))
    1914:	2d 81       	ldd	r18, Y+5	; 0x05
    1916:	21 1b       	sub	r18, r17
    1918:	49 81       	ldd	r20, Y+1	; 0x01
    191a:	5a 81       	ldd	r21, Y+2	; 0x02
    191c:	6b 81       	ldd	r22, Y+3	; 0x03
    191e:	7c 81       	ldd	r23, Y+4	; 0x04
    1920:	41 0f       	add	r20, r17
    1922:	51 1d       	adc	r21, r1
    1924:	61 1d       	adc	r22, r1
    1926:	71 1d       	adc	r23, r1
    1928:	81 2f       	mov	r24, r17
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	8b 58       	subi	r24, 0x8B	; 139
    192e:	9f 4d       	sbci	r25, 0xDF	; 223
    1930:	66 df       	rcall	.-308    	; 0x17fe <small_write_mem>
    1932:	88 23       	and	r24, r24
    1934:	09 f4       	brne	.+2      	; 0x1938 <write_mem+0xec>
    1936:	b2 c0       	rjmp	.+356    	; 0x1a9c <write_mem+0x250>
		{
			return;
		}
		
		while(_readingMem);
    1938:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
    193c:	81 11       	cpse	r24, r1
		
		transmit_status_and_data(OP_STATUS_SUCCESS, length);
    193e:	fc cf       	rjmp	.-8      	; 0x1938 <write_mem+0xec>
    1940:	4d 81       	ldd	r20, Y+5	; 0x05
    1942:	5e 81       	ldd	r21, Y+6	; 0x06
    1944:	6f 81       	ldd	r22, Y+7	; 0x07
    1946:	78 85       	ldd	r23, Y+8	; 0x08
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	3a de       	rcall	.-908    	; 0x15c0 <transmit_status_and_data>
		return;
    194c:	a7 c0       	rjmp	.+334    	; 0x1a9c <write_mem+0x250>


	leftToRead = length;
	leftToWrite = length;
	
	_memInBuff = _buff0;
    194e:	85 e7       	ldi	r24, 0x75	; 117
    1950:	90 e2       	ldi	r25, 0x20	; 32
    1952:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <_memInBuff>
    1956:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <_memInBuff+0x1>
	_memOutBuff = _buff1;
    195a:	89 ee       	ldi	r24, 0xE9	; 233
    195c:	91 e2       	ldi	r25, 0x21	; 33
    195e:	80 93 e8 23 	sts	0x23E8, r24	; 0x8023e8 <_memOutBuff>
    1962:	90 93 e9 23 	sts	0x23E9, r25	; 0x8023e9 <_memOutBuff+0x1>
	
	//Here we know that the size of the data is larger so get a chunck to handle the address offset and page-align the writes.
	if (lengthOffset > 0)
    1966:	11 23       	and	r17, r17
	{
		if (!get_data_from_uart(_memInBuff, lengthOffset, 0))
    1968:	79 f1       	breq	.+94     	; 0x19c8 <write_mem+0x17c>
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	61 2f       	mov	r22, r17
    196e:	85 e7       	ldi	r24, 0x75	; 117
    1970:	90 e2       	ldi	r25, 0x20	; 32
    1972:	98 dd       	rcall	.-1232   	; 0x14a4 <get_data_from_uart>
		{
			transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
    1974:	81 11       	cpse	r24, r1
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <write_mem+0x138>
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	70 e0       	ldi	r23, 0x00	; 0
			return;
    1980:	1f de       	rcall	.-962    	; 0x15c0 <transmit_status_and_data>
		}
		swap_write_buffs();
    1982:	8c c0       	rjmp	.+280    	; 0x1a9c <write_mem+0x250>
		
		if (!small_write_mem(_memOutBuff, address, lengthOffset))
    1984:	1b df       	rcall	.-458    	; 0x17bc <swap_write_buffs>
    1986:	49 81       	ldd	r20, Y+1	; 0x01
    1988:	5a 81       	ldd	r21, Y+2	; 0x02
    198a:	6b 81       	ldd	r22, Y+3	; 0x03
    198c:	7c 81       	ldd	r23, Y+4	; 0x04
    198e:	21 2f       	mov	r18, r17
    1990:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <_memOutBuff>
    1994:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <_memOutBuff+0x1>
    1998:	32 df       	rcall	.-412    	; 0x17fe <small_write_mem>
    199a:	88 23       	and	r24, r24
    199c:	09 f4       	brne	.+2      	; 0x19a0 <write_mem+0x154>
    199e:	7e c0       	rjmp	.+252    	; 0x1a9c <write_mem+0x250>
		{
			return;
		}
		
		leftToRead -= lengthOffset;
    19a0:	81 2f       	mov	r24, r17
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a0 e0       	ldi	r26, 0x00	; 0
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	c8 1a       	sub	r12, r24
    19aa:	d9 0a       	sbc	r13, r25
    19ac:	ea 0a       	sbc	r14, r26
    19ae:	fb 0a       	sbc	r15, r27
		leftToWrite -= lengthOffset;
		address += lengthOffset;
    19b0:	49 81       	ldd	r20, Y+1	; 0x01
    19b2:	5a 81       	ldd	r21, Y+2	; 0x02
    19b4:	6b 81       	ldd	r22, Y+3	; 0x03
    19b6:	7c 81       	ldd	r23, Y+4	; 0x04
    19b8:	84 0f       	add	r24, r20
    19ba:	95 1f       	adc	r25, r21
    19bc:	a6 1f       	adc	r26, r22
    19be:	b7 1f       	adc	r27, r23
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	ab 83       	std	Y+3, r26	; 0x03
    19c6:	bc 83       	std	Y+4, r27	; 0x04
		
		leftToRead -= transLen;
		
		if (leftToWrite > WRITE_CHUNK_SIZE)
		{
			transLen = WRITE_CHUNK_SIZE;
    19c8:	46 01       	movw	r8, r12
    19ca:	57 01       	movw	r10, r14
	{
		

		if (leftToRead > WRITE_CHUNK_SIZE)
		{
			transLen = WRITE_CHUNK_SIZE;
    19cc:	10 e8       	ldi	r17, 0x80	; 128
    19ce:	50 c0       	rjmp	.+160    	; 0x1a70 <write_mem+0x224>
	
	while (leftToRead > 0 || leftToWrite > 0)
	{
		

		if (leftToRead > WRITE_CHUNK_SIZE)
    19d0:	91 e8       	ldi	r25, 0x81	; 129
    19d2:	c9 16       	cp	r12, r25
    19d4:	d1 04       	cpc	r13, r1
    19d6:	e1 04       	cpc	r14, r1
    19d8:	f1 04       	cpc	r15, r1
		{
			transLen = WRITE_CHUNK_SIZE;
		}
		else
		{
			transLen = leftToRead;
    19da:	20 f4       	brcc	.+8      	; 0x19e4 <write_mem+0x198>
		}
		
		if (transLen > 0)
    19dc:	0c 2d       	mov	r16, r12
    19de:	cc 20       	and	r12, r12
    19e0:	a1 f0       	breq	.+40     	; 0x1a0a <write_mem+0x1be>
	{
		

		if (leftToRead > WRITE_CHUNK_SIZE)
		{
			transLen = WRITE_CHUNK_SIZE;
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <write_mem+0x19a>
			transLen = leftToRead;
		}
		
		if (transLen > 0)
		{
			if (!get_data_from_uart(_memInBuff, transLen, 0))
    19e4:	01 2f       	mov	r16, r17
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	60 2f       	mov	r22, r16
    19ea:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <_memInBuff>
    19ee:	90 91 7c 21 	lds	r25, 0x217C	; 0x80217c <_memInBuff+0x1>
    19f2:	58 dd       	rcall	.-1360   	; 0x14a4 <get_data_from_uart>
			{
				transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
    19f4:	81 11       	cpse	r24, r1
    19f6:	06 c0       	rjmp	.+12     	; 0x1a04 <write_mem+0x1b8>
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	70 e0       	ldi	r23, 0x00	; 0
				return;
    1a00:	df dd       	rcall	.-1090   	; 0x15c0 <transmit_status_and_data>
			}
			swap_write_buffs();
    1a02:	4c c0       	rjmp	.+152    	; 0x1a9c <write_mem+0x250>
    1a04:	db de       	rcall	.-586    	; 0x17bc <swap_write_buffs>
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <write_mem+0x1be>
		{
			transLen = WRITE_CHUNK_SIZE;
		}
		else
		{
			transLen = leftToRead;
    1a08:	00 e0       	ldi	r16, 0x00	; 0
				return;
			}
			swap_write_buffs();
		}
		
		leftToRead -= transLen;
    1a0a:	c0 1a       	sub	r12, r16
    1a0c:	d1 08       	sbc	r13, r1
    1a0e:	e1 08       	sbc	r14, r1
    1a10:	f1 08       	sbc	r15, r1
		
		if (leftToWrite > WRITE_CHUNK_SIZE)
    1a12:	81 e8       	ldi	r24, 0x81	; 129
    1a14:	88 16       	cp	r8, r24
    1a16:	91 04       	cpc	r9, r1
    1a18:	a1 04       	cpc	r10, r1
    1a1a:	b1 04       	cpc	r11, r1
    1a1c:	40 f4       	brcc	.+16     	; 0x1a2e <write_mem+0x1e2>
		{
			transLen = WRITE_CHUNK_SIZE;
		}
		else
		{
			transLen = leftToWrite;
    1a1e:	08 2d       	mov	r16, r8
    1a20:	8f e3       	ldi	r24, 0x3F	; 63
    1a22:	9f e1       	ldi	r25, 0x1F	; 31
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <write_mem+0x1d8>
    1a28:	00 c0       	rjmp	.+0      	; 0x1a2a <write_mem+0x1de>
    1a2a:	00 00       	nop
		
		leftToRead -= transLen;
		
		if (leftToWrite > WRITE_CHUNK_SIZE)
		{
			transLen = WRITE_CHUNK_SIZE;
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <write_mem+0x1e4>
			_delay_ms(1);
			
		}
		

		if (!small_write_mem(_memOutBuff, address, transLen))
    1a2e:	01 2f       	mov	r16, r17
    1a30:	49 81       	ldd	r20, Y+1	; 0x01
    1a32:	5a 81       	ldd	r21, Y+2	; 0x02
    1a34:	6b 81       	ldd	r22, Y+3	; 0x03
    1a36:	7c 81       	ldd	r23, Y+4	; 0x04
    1a38:	20 2f       	mov	r18, r16
    1a3a:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <_memOutBuff>
    1a3e:	90 91 e9 23 	lds	r25, 0x23E9	; 0x8023e9 <_memOutBuff+0x1>
    1a42:	dd de       	rcall	.-582    	; 0x17fe <small_write_mem>
    1a44:	88 23       	and	r24, r24
    1a46:	51 f1       	breq	.+84     	; 0x1a9c <write_mem+0x250>
		{
			return;
		}

		leftToWrite -= transLen;
    1a48:	80 2f       	mov	r24, r16
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 e0       	ldi	r26, 0x00	; 0
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	88 1a       	sub	r8, r24
    1a52:	99 0a       	sbc	r9, r25
    1a54:	aa 0a       	sbc	r10, r26
    1a56:	bb 0a       	sbc	r11, r27
		address += transLen;
    1a58:	49 81       	ldd	r20, Y+1	; 0x01
    1a5a:	5a 81       	ldd	r21, Y+2	; 0x02
    1a5c:	6b 81       	ldd	r22, Y+3	; 0x03
    1a5e:	7c 81       	ldd	r23, Y+4	; 0x04
    1a60:	84 0f       	add	r24, r20
    1a62:	95 1f       	adc	r25, r21
    1a64:	a6 1f       	adc	r26, r22
    1a66:	b7 1f       	adc	r27, r23
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	9a 83       	std	Y+2, r25	; 0x02
    1a6c:	ab 83       	std	Y+3, r26	; 0x03
    1a6e:	bc 83       	std	Y+4, r27	; 0x04
		leftToRead -= lengthOffset;
		leftToWrite -= lengthOffset;
		address += lengthOffset;
	}
	
	while (leftToRead > 0 || leftToWrite > 0)
    1a70:	c1 14       	cp	r12, r1
    1a72:	d1 04       	cpc	r13, r1
    1a74:	e1 04       	cpc	r14, r1
    1a76:	f1 04       	cpc	r15, r1
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <write_mem+0x230>
    1a7a:	aa cf       	rjmp	.-172    	; 0x19d0 <write_mem+0x184>
    1a7c:	81 14       	cp	r8, r1
    1a7e:	91 04       	cpc	r9, r1
    1a80:	a1 04       	cpc	r10, r1
    1a82:	b1 04       	cpc	r11, r1
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <write_mem+0x23c>
		address += transLen;

	}
	
	
	while(_readingMem);
    1a86:	c0 cf       	rjmp	.-128    	; 0x1a08 <write_mem+0x1bc>
    1a88:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <_readingMem>
    1a8c:	81 11       	cpse	r24, r1
	
	transmit_status_and_data(OP_STATUS_SUCCESS, length);
    1a8e:	fc cf       	rjmp	.-8      	; 0x1a88 <write_mem+0x23c>
    1a90:	4d 81       	ldd	r20, Y+5	; 0x05
    1a92:	5e 81       	ldd	r21, Y+6	; 0x06
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	92 dd       	rcall	.-1244   	; 0x15c0 <transmit_status_and_data>
	
}
    1a9c:	28 96       	adiw	r28, 0x08	; 8
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	df 90       	pop	r13
    1ab0:	cf 90       	pop	r12
    1ab2:	bf 90       	pop	r11
    1ab4:	af 90       	pop	r10
    1ab6:	9f 90       	pop	r9
    1ab8:	8f 90       	pop	r8
    1aba:	08 95       	ret

00001abc <get_uart_command>:

void get_uart_command()
{

	while(!(USARTC0.STATUS & USART_RXCIF_bm))
    1abc:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f78c1>
    1ac0:	88 23       	and	r24, r24
    1ac2:	3c f0       	brlt	.+14     	; 0x1ad2 <get_uart_command+0x16>
	USARTC0.STATUS = USART_RXCIF_bm;
    1ac4:	e0 ec       	ldi	r30, 0xC0	; 192
    1ac6:	f8 e0       	ldi	r31, 0x08	; 8
    1ac8:	90 e8       	ldi	r25, 0x80	; 128
    1aca:	91 83       	std	Z+1, r25	; 0x01
}

void get_uart_command()
{

	while(!(USARTC0.STATUS & USART_RXCIF_bm))
    1acc:	81 81       	ldd	r24, Z+1	; 0x01
    1ace:	88 23       	and	r24, r24
    1ad0:	e4 f7       	brge	.-8      	; 0x1aca <get_uart_command+0xe>
	USARTC0.STATUS = USART_RXCIF_bm;
	
	_currentOp = USARTC0.DATA;
    1ad2:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7f78c0>
    1ad6:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <_currentOp>
	switch(_currentOp)
    1ada:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <_currentOp>
    1ade:	8a 36       	cpi	r24, 0x6A	; 106
    1ae0:	a9 f0       	breq	.+42     	; 0x1b0c <get_uart_command+0x50>
    1ae2:	28 f4       	brcc	.+10     	; 0x1aee <get_uart_command+0x32>
    1ae4:	85 36       	cpi	r24, 0x65	; 101
    1ae6:	51 f0       	breq	.+20     	; 0x1afc <get_uart_command+0x40>
    1ae8:	89 36       	cpi	r24, 0x69	; 105
    1aea:	71 f0       	breq	.+28     	; 0x1b08 <get_uart_command+0x4c>
    1aec:	08 95       	ret
    1aee:	83 37       	cpi	r24, 0x73	; 115
    1af0:	79 f0       	breq	.+30     	; 0x1b10 <get_uart_command+0x54>
    1af2:	87 37       	cpi	r24, 0x77	; 119
    1af4:	29 f0       	breq	.+10     	; 0x1b00 <get_uart_command+0x44>
    1af6:	82 37       	cpi	r24, 0x72	; 114
    1af8:	61 f4       	brne	.+24     	; 0x1b12 <get_uart_command+0x56>
    1afa:	04 c0       	rjmp	.+8      	; 0x1b04 <get_uart_command+0x48>
	{
		
		case USART_ERASE_ALL:
		erase_mem();
    1afc:	33 ce       	rjmp	.-922    	; 0x1764 <erase_mem>
		break;
		case USART_WRITE:
		write_mem();
    1afe:	08 95       	ret
		break;
    1b00:	a5 ce       	rjmp	.-694    	; 0x184c <write_mem>
		case USART_READ:
		get_mem();
    1b02:	08 95       	ret
		break;
		case USART_READ_ID:
		get_mem_id();
    1b04:	74 cd       	rjmp	.-1304   	; 0x15ee <get_mem>
		break;
    1b06:	08 95       	ret
		case USART_READ_JEDEC:
		get_mem_jedec();
    1b08:	e6 cd       	rjmp	.-1076   	; 0x16d6 <get_mem_id>
    1b0a:	08 95       	ret
		break;
    1b0c:	f1 cd       	rjmp	.-1054   	; 0x16f0 <get_mem_jedec>
		case USART_GET_STATUS:
		get_mem_status();
    1b0e:	08 95       	ret
    1b10:	fc cd       	rjmp	.-1032   	; 0x170a <get_mem_status>
    1b12:	08 95       	ret

00001b14 <get_start_mode>:



uint8_t get_start_mode()
{
	if (PORTD.IN & PIN6_bm)
    1b14:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7f7668>
    1b18:	89 2f       	mov	r24, r25
    1b1a:	80 74       	andi	r24, 0x40	; 64
    1b1c:	96 ff       	sbrs	r25, 6
    1b1e:	05 c0       	rjmp	.+10     	; 0x1b2a <get_start_mode+0x16>
	{
		PORTD.OUTSET = PIN7_bm;
    1b20:	80 e8       	ldi	r24, 0x80	; 128
    1b22:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7f7665>
		return 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	08 95       	ret
	}
	else
	{
		PORTD.OUTCLR = PIN7_bm;
    1b2a:	90 e8       	ldi	r25, 0x80	; 128
    1b2c:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x7f7666>
		return 0;
	}
	
}
    1b30:	08 95       	ret

00001b32 <main>:


int main(void)
{
	init_start_mode_pins();
    1b32:	1f d8       	rcall	.-4034   	; 0xb72 <init_start_mode_pins>
	
	if (get_start_mode())
    1b34:	ef df       	rcall	.-34     	; 0x1b14 <get_start_mode>
    1b36:	88 23       	and	r24, r24
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <main+0xe>
	{
		//Start mem access mode
		init_mem_access_config();
    1b3a:	59 d9       	rcall	.-3406   	; 0xdee <init_mem_access_config>

		/* Replace with your application code */
		while (1)
		{
			get_uart_command();
    1b3c:	bf df       	rcall	.-130    	; 0x1abc <get_uart_command>
	{
		//status flags to indicate the re-burst for library
		uint16_t status_flag = 0;
		uint16_t burst_flag = 0;
	
		init_main_config();
    1b3e:	fe cf       	rjmp	.-4      	; 0x1b3c <main+0xa>
    1b40:	2c d9       	rcall	.-3496   	; 0xd9a <init_main_config>

		load_entry_count();
    1b42:	d6 d9       	rcall	.-3156   	; 0xef0 <load_entry_count>
    1b44:	0d e0       	ldi	r16, 0x0D	; 13
				do {
					/*  one time measure touch sensors    */
					status_flag = qt_measure_sensors( current_time_ms_touch );
					if (status_flag & QTLIB_STATUS_CHANGE)
					{
						if (qt_measure_data.qt_touch_status.sensor_states[0] == 1)
    1b46:	10 e2       	ldi	r17, 0x20	; 32
    1b48:	80 91 63 20 	lds	r24, 0x2063	; 0x802063 <time_to_measure_touch>

		load_entry_count();
	
		while (1)
		{
			if(time_to_measure_touch )
    1b4c:	88 23       	and	r24, r24
    1b4e:	e1 f3       	breq	.-8      	; 0x1b48 <main+0x16>
    1b50:	10 92 63 20 	sts	0x2063, r1	; 0x802063 <time_to_measure_touch>
			{

				/*  clear flag: it's time to measure touch  */
				time_to_measure_touch = 0u;
    1b54:	80 91 61 20 	lds	r24, 0x2061	; 0x802061 <current_time_ms_touch>

				do {
					/*  one time measure touch sensors    */
					status_flag = qt_measure_sensors( current_time_ms_touch );
    1b58:	90 91 62 20 	lds	r25, 0x2062	; 0x802062 <current_time_ms_touch+0x1>
    1b5c:	0e 94 b8 01 	call	0x370	; 0x370 <qt_measure_sensors>
    1b60:	ec 01       	movw	r28, r24
    1b62:	81 ff       	sbrs	r24, 1
					if (status_flag & QTLIB_STATUS_CHANGE)
    1b64:	4a c0       	rjmp	.+148    	; 0x1bfa <main+0xc8>
    1b66:	f8 01       	movw	r30, r16
					{
						if (qt_measure_data.qt_touch_status.sensor_states[0] == 1)
    1b68:	80 89       	ldd	r24, Z+16	; 0x10
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	31 f4       	brne	.+12     	; 0x1b7a <main+0x48>
						{
							play_entry(_entryIndex);
    1b6e:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <_entryIndex>
    1b72:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <_entryIndex+0x1>
    1b76:	24 db       	rcall	.-2488   	; 0x11c0 <play_entry>
    1b78:	40 c0       	rjmp	.+128    	; 0x1bfa <main+0xc8>
    1b7a:	82 30       	cpi	r24, 0x02	; 2
						}
						else if (qt_measure_data.qt_touch_status.sensor_states[0] == 2)
    1b7c:	f1 f4       	brne	.+60     	; 0x1bba <main+0x88>
    1b7e:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <_entryIndex>
						{
						
							_entryIndex++;
    1b82:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <_entryIndex+0x1>
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	80 93 5b 20 	sts	0x205B, r24	; 0x80205b <_entryIndex>
    1b8c:	90 93 5c 20 	sts	0x205C, r25	; 0x80205c <_entryIndex+0x1>
    1b90:	20 91 5b 20 	lds	r18, 0x205B	; 0x80205b <_entryIndex>
						
							if (_entryIndex == _entryCount)
    1b94:	30 91 5c 20 	lds	r19, 0x205C	; 0x80205c <_entryIndex+0x1>
    1b98:	80 91 5f 20 	lds	r24, 0x205F	; 0x80205f <_entryCount>
    1b9c:	90 91 60 20 	lds	r25, 0x2060	; 0x802060 <_entryCount+0x1>
    1ba0:	28 17       	cp	r18, r24
    1ba2:	39 07       	cpc	r19, r25
    1ba4:	21 f4       	brne	.+8      	; 0x1bae <main+0x7c>
    1ba6:	10 92 5b 20 	sts	0x205B, r1	; 0x80205b <_entryIndex>
							{
								_entryIndex = 0;
    1baa:	10 92 5c 20 	sts	0x205C, r1	; 0x80205c <_entryIndex+0x1>
							}
						
							play_entry(_entryIndex);
    1bae:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <_entryIndex>
    1bb2:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <_entryIndex+0x1>
    1bb6:	04 db       	rcall	.-2552   	; 0x11c0 <play_entry>
    1bb8:	20 c0       	rjmp	.+64     	; 0x1bfa <main+0xc8>
    1bba:	84 30       	cpi	r24, 0x04	; 4
						}
						else if (qt_measure_data.qt_touch_status.sensor_states[0] == 4)
    1bbc:	f1 f4       	brne	.+60     	; 0x1bfa <main+0xc8>
    1bbe:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <_entryIndex>
						{
							if (_entryIndex > 0)
    1bc2:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <_entryIndex+0x1>
    1bc6:	89 2b       	or	r24, r25
    1bc8:	51 f0       	breq	.+20     	; 0x1bde <main+0xac>
    1bca:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <_entryIndex>
							{
								_entryIndex--;
    1bce:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <_entryIndex+0x1>
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	80 93 5b 20 	sts	0x205B, r24	; 0x80205b <_entryIndex>
    1bd8:	90 93 5c 20 	sts	0x205C, r25	; 0x80205c <_entryIndex+0x1>
    1bdc:	09 c0       	rjmp	.+18     	; 0x1bf0 <main+0xbe>
    1bde:	80 91 5f 20 	lds	r24, 0x205F	; 0x80205f <_entryCount>
							}
							else
							{
								_entryIndex = _entryCount - 1;
    1be2:	90 91 60 20 	lds	r25, 0x2060	; 0x802060 <_entryCount+0x1>
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	80 93 5b 20 	sts	0x205B, r24	; 0x80205b <_entryIndex>
    1bec:	90 93 5c 20 	sts	0x205C, r25	; 0x80205c <_entryIndex+0x1>
							}
							play_entry(_entryIndex);
    1bf0:	80 91 5b 20 	lds	r24, 0x205B	; 0x80205b <_entryIndex>
    1bf4:	90 91 5c 20 	lds	r25, 0x205C	; 0x80205c <_entryIndex+0x1>
    1bf8:	e3 da       	rcall	.-2618   	; 0x11c0 <play_entry>
    1bfa:	d0 fd       	sbrc	r29, 0
				
					burst_flag = status_flag & QTLIB_BURST_AGAIN;

					/* Time-critical host application code goes here */

				}while (burst_flag) ;
    1bfc:	ab cf       	rjmp	.-170    	; 0x1b54 <main+0x22>
    1bfe:	a4 cf       	rjmp	.-184    	; 0x1b48 <main+0x16>

00001c00 <__vector_5>:
    1c00:	1f 92       	push	r1

}

//IRQ handled when data is done being send to the DAC
ISR(EDMA_CH2_vect)
{	
    1c02:	0f 92       	push	r0
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	0f 92       	push	r0
    1c08:	11 24       	eor	r1, r1
    1c0a:	2f 93       	push	r18
    1c0c:	3f 93       	push	r19
    1c0e:	4f 93       	push	r20
    1c10:	5f 93       	push	r21
    1c12:	6f 93       	push	r22
    1c14:	7f 93       	push	r23
    1c16:	8f 93       	push	r24
    1c18:	9f 93       	push	r25
    1c1a:	af 93       	push	r26
    1c1c:	bf 93       	push	r27
    1c1e:	ef 93       	push	r30
    1c20:	ff 93       	push	r31
	while( (EDMA.CH2.CTRLB & EDMA_CH_TRNIF_bm) == 0);
    1c22:	e0 e0       	ldi	r30, 0x00	; 0
    1c24:	f1 e0       	ldi	r31, 0x01	; 1
    1c26:	81 a9       	ldd	r24, Z+49	; 0x31
    1c28:	84 ff       	sbrs	r24, 4
    1c2a:	fd cf       	rjmp	.-6      	; 0x1c26 <__vector_5+0x26>
	//if number of sample bytes is <= 0 then we reached the end of the audio file
	if (_totalSampleBytes > 0)
    1c2c:	80 91 57 20 	lds	r24, 0x2057	; 0x802057 <_totalSampleBytes>
    1c30:	90 91 58 20 	lds	r25, 0x2058	; 0x802058 <_totalSampleBytes+0x1>
    1c34:	a0 91 59 20 	lds	r26, 0x2059	; 0x802059 <_totalSampleBytes+0x2>
    1c38:	b0 91 5a 20 	lds	r27, 0x205A	; 0x80205a <_totalSampleBytes+0x3>
    1c3c:	89 2b       	or	r24, r25
    1c3e:	8a 2b       	or	r24, r26
    1c40:	8b 2b       	or	r24, r27
    1c42:	29 f1       	breq	.+74     	; 0x1c8e <__vector_5+0x8e>
	{
		EDMA.CH2.CTRLB &= EDMA_CH_TRNIF_bm | 0x0F; //Only clear the TRNIF flag and not the INT LVLs
    1c44:	e0 e0       	ldi	r30, 0x00	; 0
    1c46:	f1 e0       	ldi	r31, 0x01	; 1
    1c48:	81 a9       	ldd	r24, Z+49	; 0x31
    1c4a:	8f 71       	andi	r24, 0x1F	; 31
    1c4c:	81 ab       	std	Z+49, r24	; 0x31
		

		//light file address of 0 means skip lights
		//_loadNextLightMap will be non-zero when we are ready to load the next light map
		//Also make sure we have not reached 0 in the map count
		if (_addresses.lightFileAddress != 0 && _holdTimerCounter > _lightMap.holdTime && _lightMetadata.mapCount)
    1c4e:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <_addresses+0x4>
    1c52:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <_addresses+0x5>
    1c56:	a0 91 6a 20 	lds	r26, 0x206A	; 0x80206a <_addresses+0x6>
    1c5a:	b0 91 6b 20 	lds	r27, 0x206B	; 0x80206b <_addresses+0x7>
    1c5e:	89 2b       	or	r24, r25
    1c60:	8a 2b       	or	r24, r26
    1c62:	8b 2b       	or	r24, r27
    1c64:	91 f0       	breq	.+36     	; 0x1c8a <__vector_5+0x8a>
    1c66:	80 91 5d 20 	lds	r24, 0x205D	; 0x80205d <_holdTimerCounter>
    1c6a:	90 91 5e 20 	lds	r25, 0x205E	; 0x80205e <_holdTimerCounter+0x1>
    1c6e:	20 91 69 22 	lds	r18, 0x2269	; 0x802269 <_lightMap>
    1c72:	30 91 6a 22 	lds	r19, 0x226A	; 0x80226a <_lightMap+0x1>
    1c76:	28 17       	cp	r18, r24
    1c78:	39 07       	cpc	r19, r25
    1c7a:	38 f4       	brcc	.+14     	; 0x1c8a <__vector_5+0x8a>
    1c7c:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <_lightMetadata>
    1c80:	90 91 77 21 	lds	r25, 0x2177	; 0x802177 <_lightMetadata+0x1>
    1c84:	89 2b       	or	r24, r25
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <__vector_5+0x8a>
		{
			load_next_light_map();		//This calls read_mem which can't be done within the IRQ handler
    1c88:	a3 d9       	rcall	.-3258   	; 0xfd0 <load_next_light_map>
			//_readLightMem = 1;
		}
	
		start_audio_output();
    1c8a:	80 da       	rcall	.-2816   	; 0x118c <start_audio_output>
    1c8c:	0c c0       	rjmp	.+24     	; 0x1ca6 <__vector_5+0xa6>
    1c8e:	e0 e0       	ldi	r30, 0x00	; 0
	}
	else
	{
		//Disable audio edma and timer
		EDMA.CH2.CTRLB |= EDMA_CH_TRNIF_bm;
    1c90:	f1 e0       	ldi	r31, 0x01	; 1
    1c92:	81 a9       	ldd	r24, Z+49	; 0x31
    1c94:	80 61       	ori	r24, 0x10	; 16
    1c96:	81 ab       	std	Z+49, r24	; 0x31
    1c98:	10 92 26 08 	sts	0x0826, r1	; 0x800826 <__TEXT_REGION_LENGTH__+0x7f7826>
		TCC4.PER = 0;
    1c9c:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <__TEXT_REGION_LENGTH__+0x7f7827>
    1ca0:	10 92 40 08 	sts	0x0840, r1	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f7840>
		//Disable light timer
		TCC5.CTRLA = 0;
		blank_lights();
    1ca4:	c3 da       	rcall	.-2682   	; 0x122c <blank_lights>
    1ca6:	ff 91       	pop	r31
	}

}
    1ca8:	ef 91       	pop	r30
    1caa:	bf 91       	pop	r27
    1cac:	af 91       	pop	r26
    1cae:	9f 91       	pop	r25
    1cb0:	8f 91       	pop	r24
    1cb2:	7f 91       	pop	r23
    1cb4:	6f 91       	pop	r22
    1cb6:	5f 91       	pop	r21
    1cb8:	4f 91       	pop	r20
    1cba:	3f 91       	pop	r19
    1cbc:	2f 91       	pop	r18
    1cbe:	0f 90       	pop	r0
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	0f 90       	pop	r0
    1cc4:	1f 90       	pop	r1
    1cc6:	18 95       	reti

00001cc8 <__vector_3>:
    1cc8:	1f 92       	push	r1

//IRQ handled when memory read is complete.
ISR(EDMA_CH0_vect)
{
    1cca:	0f 92       	push	r0
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	0f 92       	push	r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	8f 93       	push	r24
    1cd4:	ef 93       	push	r30
    1cd6:	ff 93       	push	r31

	//Light file read is started here so we can be sure we are not trying to do two memory reads at the same time
	//which could corrupt the data stream
	
	//End the read
	while(!(EDMA.CH0.CTRLB & EDMA_CH_TRNIF_bm) && !(EDMA.CH1.CTRLB & EDMA_CH_TRNIF_bm));
    1cd8:	e0 e0       	ldi	r30, 0x00	; 0
    1cda:	f1 e0       	ldi	r31, 0x01	; 1
    1cdc:	81 89       	ldd	r24, Z+17	; 0x11
    1cde:	84 fd       	sbrc	r24, 4
    1ce0:	03 c0       	rjmp	.+6      	; 0x1ce8 <__vector_3+0x20>
    1ce2:	81 a1       	ldd	r24, Z+33	; 0x21
    1ce4:	84 ff       	sbrs	r24, 4
    1ce6:	fa cf       	rjmp	.-12     	; 0x1cdc <__vector_3+0x14>

	//Clear interrupt flags

	EDMA.CH0.CTRLB &= EDMA_CH_TRNIF_bm | 0x0F; //Only clear the TRNIF flag and not the INT LVLs
    1ce8:	e0 e0       	ldi	r30, 0x00	; 0
    1cea:	f1 e0       	ldi	r31, 0x01	; 1
    1cec:	81 89       	ldd	r24, Z+17	; 0x11
    1cee:	8f 71       	andi	r24, 0x1F	; 31
    1cf0:	81 8b       	std	Z+17, r24	; 0x11
	EDMA.CH1.CTRLB &= EDMA_CH_TRNIF_bm | 0x0F; //Only clear the TRNIF flag and not the INT LVLs
    1cf2:	81 a1       	ldd	r24, Z+33	; 0x21
    1cf4:	8f 71       	andi	r24, 0x1F	; 31
    1cf6:	81 a3       	std	Z+33, r24	; 0x21

	
	if (_setCS)
    1cf8:	80 91 53 20 	lds	r24, 0x2053	; 0x802053 <_setCS>
    1cfc:	88 23       	and	r24, r24
    1cfe:	19 f0       	breq	.+6      	; 0x1d06 <__vector_3+0x3e>
	{
		//Set CS high
		PORTD.OUTSET = PIN4_bm;	
    1d00:	80 e1       	ldi	r24, 0x10	; 16
    1d02:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7f7665>
	}
	
	_readingMem = 0;
    1d06:	10 92 54 20 	sts	0x2054, r1	; 0x802054 <_readingMem>
}
    1d0a:	ff 91       	pop	r31
    1d0c:	ef 91       	pop	r30
    1d0e:	8f 91       	pop	r24
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	0f 90       	pop	r0
    1d16:	1f 90       	pop	r1
    1d18:	18 95       	reti

00001d1a <__vector_18>:

ISR(TCC5_OVF_vect)
{
    1d1a:	1f 92       	push	r1
    1d1c:	0f 92       	push	r0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	11 24       	eor	r1, r1
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
	TCC5.INTFLAGS = TC5_OVFIF_bm;  //clear the overflow flag
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <__TEXT_REGION_LENGTH__+0x7f784c>
	_holdTimerCounter++;
    1d2e:	80 91 5d 20 	lds	r24, 0x205D	; 0x80205d <_holdTimerCounter>
    1d32:	90 91 5e 20 	lds	r25, 0x205E	; 0x80205e <_holdTimerCounter+0x1>
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	80 93 5d 20 	sts	0x205D, r24	; 0x80205d <_holdTimerCounter>
    1d3c:	90 93 5e 20 	sts	0x205E, r25	; 0x80205e <_holdTimerCounter+0x1>
}
    1d40:	9f 91       	pop	r25
    1d42:	8f 91       	pop	r24
    1d44:	0f 90       	pop	r0
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	0f 90       	pop	r0
    1d4a:	1f 90       	pop	r1
    1d4c:	18 95       	reti

00001d4e <__vector_7>:

ISR(RTC_OVF_vect)
{
    1d4e:	1f 92       	push	r1
    1d50:	0f 92       	push	r0
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	0f 92       	push	r0
    1d56:	11 24       	eor	r1, r1
    1d58:	2f 93       	push	r18
    1d5a:	3f 93       	push	r19
    1d5c:	8f 93       	push	r24
    1d5e:	9f 93       	push	r25
	/*  set flag: it's time to measure touch    */
	time_to_measure_touch = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	80 93 63 20 	sts	0x2063, r24	; 0x802063 <time_to_measure_touch>

	/*  update the current time  */
	current_time_ms_touch += qt_measurement_period_msec;
    1d66:	20 91 61 20 	lds	r18, 0x2061	; 0x802061 <current_time_ms_touch>
    1d6a:	30 91 62 20 	lds	r19, 0x2062	; 0x802062 <current_time_ms_touch+0x1>
    1d6e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <qt_measurement_period_msec>
    1d72:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <qt_measurement_period_msec+0x1>
    1d76:	82 0f       	add	r24, r18
    1d78:	93 1f       	adc	r25, r19
    1d7a:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <current_time_ms_touch>
    1d7e:	90 93 62 20 	sts	0x2062, r25	; 0x802062 <current_time_ms_touch+0x1>

    1d82:	9f 91       	pop	r25
    1d84:	8f 91       	pop	r24
    1d86:	3f 91       	pop	r19
    1d88:	2f 91       	pop	r18
    1d8a:	0f 90       	pop	r0
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	0f 90       	pop	r0
    1d90:	1f 90       	pop	r1
    1d92:	18 95       	reti

00001d94 <__udivmodsi4>:
    1d94:	a1 e2       	ldi	r26, 0x21	; 33
    1d96:	1a 2e       	mov	r1, r26
    1d98:	aa 1b       	sub	r26, r26
    1d9a:	bb 1b       	sub	r27, r27
    1d9c:	fd 01       	movw	r30, r26
    1d9e:	0d c0       	rjmp	.+26     	; 0x1dba <__udivmodsi4_ep>

00001da0 <__udivmodsi4_loop>:
    1da0:	aa 1f       	adc	r26, r26
    1da2:	bb 1f       	adc	r27, r27
    1da4:	ee 1f       	adc	r30, r30
    1da6:	ff 1f       	adc	r31, r31
    1da8:	a2 17       	cp	r26, r18
    1daa:	b3 07       	cpc	r27, r19
    1dac:	e4 07       	cpc	r30, r20
    1dae:	f5 07       	cpc	r31, r21
    1db0:	20 f0       	brcs	.+8      	; 0x1dba <__udivmodsi4_ep>
    1db2:	a2 1b       	sub	r26, r18
    1db4:	b3 0b       	sbc	r27, r19
    1db6:	e4 0b       	sbc	r30, r20
    1db8:	f5 0b       	sbc	r31, r21

00001dba <__udivmodsi4_ep>:
    1dba:	66 1f       	adc	r22, r22
    1dbc:	77 1f       	adc	r23, r23
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	1a 94       	dec	r1
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <__udivmodsi4_loop>
    1dc6:	60 95       	com	r22
    1dc8:	70 95       	com	r23
    1dca:	80 95       	com	r24
    1dcc:	90 95       	com	r25
    1dce:	9b 01       	movw	r18, r22
    1dd0:	ac 01       	movw	r20, r24
    1dd2:	bd 01       	movw	r22, r26
    1dd4:	cf 01       	movw	r24, r30
    1dd6:	08 95       	ret

00001dd8 <__muluhisi3>:
    1dd8:	3a d0       	rcall	.+116    	; 0x1e4e <__umulhisi3>
    1dda:	a5 9f       	mul	r26, r21
    1ddc:	90 0d       	add	r25, r0
    1dde:	b4 9f       	mul	r27, r20
    1de0:	90 0d       	add	r25, r0
    1de2:	a4 9f       	mul	r26, r20
    1de4:	80 0d       	add	r24, r0
    1de6:	91 1d       	adc	r25, r1
    1de8:	11 24       	eor	r1, r1
    1dea:	08 95       	ret

00001dec <__prologue_saves__>:
    1dec:	2f 92       	push	r2
    1dee:	3f 92       	push	r3
    1df0:	4f 92       	push	r4
    1df2:	5f 92       	push	r5
    1df4:	6f 92       	push	r6
    1df6:	7f 92       	push	r7
    1df8:	8f 92       	push	r8
    1dfa:	9f 92       	push	r9
    1dfc:	af 92       	push	r10
    1dfe:	bf 92       	push	r11
    1e00:	cf 92       	push	r12
    1e02:	df 92       	push	r13
    1e04:	ef 92       	push	r14
    1e06:	ff 92       	push	r15
    1e08:	0f 93       	push	r16
    1e0a:	1f 93       	push	r17
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	ca 1b       	sub	r28, r26
    1e16:	db 0b       	sbc	r29, r27
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	09 94       	ijmp

00001e1e <__epilogue_restores__>:
    1e1e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e20:	39 88       	ldd	r3, Y+17	; 0x11
    1e22:	48 88       	ldd	r4, Y+16	; 0x10
    1e24:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e26:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e28:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e30:	b9 84       	ldd	r11, Y+9	; 0x09
    1e32:	c8 84       	ldd	r12, Y+8	; 0x08
    1e34:	df 80       	ldd	r13, Y+7	; 0x07
    1e36:	ee 80       	ldd	r14, Y+6	; 0x06
    1e38:	fd 80       	ldd	r15, Y+5	; 0x05
    1e3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e3c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1e40:	b9 81       	ldd	r27, Y+1	; 0x01
    1e42:	ce 0f       	add	r28, r30
    1e44:	d1 1d       	adc	r29, r1
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	ed 01       	movw	r28, r26
    1e4c:	08 95       	ret

00001e4e <__umulhisi3>:
    1e4e:	a2 9f       	mul	r26, r18
    1e50:	b0 01       	movw	r22, r0
    1e52:	b3 9f       	mul	r27, r19
    1e54:	c0 01       	movw	r24, r0
    1e56:	a3 9f       	mul	r26, r19
    1e58:	70 0d       	add	r23, r0
    1e5a:	81 1d       	adc	r24, r1
    1e5c:	11 24       	eor	r1, r1
    1e5e:	91 1d       	adc	r25, r1
    1e60:	b2 9f       	mul	r27, r18
    1e62:	70 0d       	add	r23, r0
    1e64:	81 1d       	adc	r24, r1
    1e66:	11 24       	eor	r1, r1
    1e68:	91 1d       	adc	r25, r1
    1e6a:	08 95       	ret

00001e6c <_exit>:
    1e6c:	f8 94       	cli

00001e6e <__stop_program>:
    1e6e:	ff cf       	rjmp	.-2      	; 0x1e6e <__stop_program>
