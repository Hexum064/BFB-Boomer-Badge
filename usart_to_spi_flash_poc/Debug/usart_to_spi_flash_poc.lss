
usart_to_spi_flash_poc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  00000b38  00000bcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000211  00802002  00802002  00000bce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003446  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e2b  00000000  00000000  00004186  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df9  00000000  00000000  00005fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00006dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001a94f  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f0  00000000  00000000  000219f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000222e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000079ba  00000000  00000000  000223d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__vector_3>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e8 e3       	ldi	r30, 0x38	; 56
  c0:	fb e0       	ldi	r31, 0x0B	; 11
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	22 e2       	ldi	r18, 0x22	; 34
  d0:	a2 e0       	ldi	r26, 0x02	; 2
  d2:	b0 e2       	ldi	r27, 0x20	; 32
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a3 31       	cpi	r26, 0x13	; 19
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 5d 05 	call	0xaba	; 0xaba <main>
  e2:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <enable_interrupts>:



void enable_interrupts()
{
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm 	;	  //  enable interrupts
  ea:	87 e0       	ldi	r24, 0x07	; 7
  ec:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f70a2>
  f0:	08 95       	ret

000000f2 <init_pins_mem_access>:
}

void init_pins_mem_access()
{
	PORTA.DIRSET = PIN0_bm | PIN2_bm;
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f7601>

	PORTD.DIRSET = PIN1_bm | PIN3_bm | PIN4_bm;
  f8:	e0 e6       	ldi	r30, 0x60	; 96
  fa:	f6 e0       	ldi	r31, 0x06	; 6
  fc:	8a e1       	ldi	r24, 0x1A	; 26
  fe:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	82 83       	std	Z+2, r24	; 0x02
	
	PORTC.DIRSET = PIN3_bm;
 104:	e0 e4       	ldi	r30, 0x40	; 64
 106:	f6 e0       	ldi	r31, 0x06	; 6
 108:	98 e0       	ldi	r25, 0x08	; 8
 10a:	91 83       	std	Z+1, r25	; 0x01
	PORTC.DIRCLR = PIN2_bm;
 10c:	82 83       	std	Z+2, r24	; 0x02
 10e:	08 95       	ret

00000110 <init_edma_mem_access>:
}

void init_edma_mem_access()
{
	//RX
	EDMA.CH0.CTRLA = EDMA_CH_SINGLE_bm;//no repeat, single shot, burst len = 1
 110:	e0 e0       	ldi	r30, 0x00	; 0
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	94 e0       	ldi	r25, 0x04	; 4
 116:	90 8b       	std	Z+16, r25	; 0x10
	EDMA.CH0.CTRLB = EDMA_CH_TRNINTLVL_HI_gc; //ERR level = 0, TRN int level hi
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	81 8b       	std	Z+17, r24	; 0x11
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
 11c:	81 e3       	ldi	r24, 0x31	; 49
 11e:	82 8b       	std	Z+18, r24	; 0x12
	EDMA.CH0.TRIGSRC = EDMA_CH_TRIGSRC_USARTD0_RXC_gc;
 120:	2c e6       	ldi	r18, 0x6C	; 108
 122:	24 8b       	std	Z+20, r18	; 0x14

	//TX
	EDMA.CH1.CTRLA = EDMA_CH_SINGLE_bm;//no repeat, single shot, burst len = 1
 124:	90 a3       	std	Z+32, r25	; 0x20
	EDMA.CH1.CTRLB =  0; //EDMA_CH_TRNINTLVL_HI_gc; //ERR level = 0, TRN int level hi
 126:	11 a2       	std	Z+33, r1	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
 128:	82 a3       	std	Z+34, r24	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTD0_DRE_gc;
 12a:	8d e6       	ldi	r24, 0x6D	; 109
 12c:	84 a3       	std	Z+36, r24	; 0x24
	
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_PRIMODE_RR123_gc; //perif mode, no double buff,  Ch0 > round robin
 12e:	81 e8       	ldi	r24, 0x81	; 129
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <init_usart_mem_access>:
void init_usart_mem_access()
{

	
	//Mem USART in SPI
	USARTD0.CTRLA = USART_TXCINTLVL_OFF_gc; //No interrupts
 134:	e0 ec       	ldi	r30, 0xC0	; 192
 136:	f9 e0       	ldi	r31, 0x09	; 9
 138:	12 82       	std	Z+2, r1	; 0x02
	USARTD0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;// | USART_CLK2X_bm;
 13a:	88 e1       	ldi	r24, 0x18	; 24
 13c:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.CTRLC = USART_CMODE_MSPI_gc;
 13e:	90 ec       	ldi	r25, 0xC0	; 192
 140:	94 83       	std	Z+4, r25	; 0x04
	USARTD0.CTRLD = 0; //No decoding or encoding
 142:	15 82       	std	Z+5, r1	; 0x05
	USARTD0_BAUDCTRLA = 1;
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	90 93 c6 09 	sts	0x09C6, r25	; 0x8009c6 <__TEXT_REGION_LENGTH__+0x7f79c6>
	USARTD0.BAUDCTRLB = 0;
 14a:	17 82       	std	Z+7, r1	; 0x07
	

	
	//interface
	USARTC0.BAUDCTRLA = 75;// 131;                                     
 14c:	e0 ec       	ldi	r30, 0xC0	; 192
 14e:	f8 e0       	ldi	r31, 0x08	; 8
 150:	9b e4       	ldi	r25, 0x4B	; 75
 152:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 0xA0;//-6 0xD0; //-3
 154:	90 ea       	ldi	r25, 0xA0	; 160
 156:	97 83       	std	Z+7, r25	; 0x07
	USARTC0.CTRLA = USART_TXCINTLVL_OFF_gc; //No interrupts
 158:	12 82       	std	Z+2, r1	; 0x02
	USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
 15a:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc; //Mode:Async,8,None,1
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	84 83       	std	Z+4, r24	; 0x04
	USARTC0.CTRLD = 0; //No decoding or encoding
 160:	15 82       	std	Z+5, r1	; 0x05
 162:	08 95       	ret

00000164 <init_clock_mem_access>:
}

void init_clock_mem_access()
{
	
	OSC_CTRL |= OSC_RC32MEN_bm; //Setup 32Mhz internal
 164:	e0 e5       	ldi	r30, 0x50	; 80
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	80 83       	st	Z, r24
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm));
 16e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7f7051>
 172:	81 ff       	sbrs	r24, 1
 174:	fc cf       	rjmp	.-8      	; 0x16e <init_clock_mem_access+0xa>
	
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
 176:	88 ed       	ldi	r24, 0xD8	; 216
 178:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz internal
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7f7040>
 180:	08 95       	ret

00000182 <init_input_timeout_timer>:
}


void init_input_timeout_timer()
{
	RTC.PER = INPUT_TIMEOUT_PER_MS;
 182:	e0 e0       	ldi	r30, 0x00	; 0
 184:	f4 e0       	ldi	r31, 0x04	; 4
 186:	88 ee       	ldi	r24, 0xE8	; 232
 188:	93 e0       	ldi	r25, 0x03	; 3
 18a:	82 87       	std	Z+10, r24	; 0x0a
 18c:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <enable_rtc>:

}

void enable_rtc()
{
	CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm; //Set the RTC clock source to the 1kHz ULP and enable it.
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x7f7043>
 19a:	08 95       	ret

0000019c <disable_rtc>:
}

void disable_rtc()
{
	CLK.RTCCTRL = 0;	
 19c:	10 92 43 00 	sts	0x0043, r1	; 0x800043 <__TEXT_REGION_LENGTH__+0x7f7043>
 1a0:	08 95       	ret

000001a2 <mem_read_prop>:


void mem_read_prop(uint8_t prop, uint8_t *buffer, uint8_t len)
{
	//6 bytes: 1 for command, 3 for data retrieval
	buffer[0] = prop;
 1a2:	fb 01       	movw	r30, r22
 1a4:	80 83       	st	Z, r24

	for (uint8_t i = 1; i < len; i++)
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	06 c0       	rjmp	.+12     	; 0x1b6 <mem_read_prop+0x14>
	{
		buffer[i] = DUMMY_BYTE;
 1aa:	fb 01       	movw	r30, r22
 1ac:	e8 0f       	add	r30, r24
 1ae:	f1 1d       	adc	r31, r1
 1b0:	95 e5       	ldi	r25, 0x55	; 85
 1b2:	90 83       	st	Z, r25
void mem_read_prop(uint8_t prop, uint8_t *buffer, uint8_t len)
{
	//6 bytes: 1 for command, 3 for data retrieval
	buffer[0] = prop;

	for (uint8_t i = 1; i < len; i++)
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	84 17       	cp	r24, r20
 1b8:	c0 f3       	brcs	.-16     	; 0x1aa <mem_read_prop+0x8>
	{
		buffer[i] = DUMMY_BYTE;
	}


	PORTD.OUTCLR = PIN4_bm; //Set Pin 4 (CS) to low
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7f7666>
	
	_readingMem = 1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <_readingMem>
	_setCS = 1;
 1c6:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_setCS>
	
	EDMA.CH0.TRFCNT = len;
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	e0 e0       	ldi	r30, 0x00	; 0
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	46 8b       	std	Z+22, r20	; 0x16
 1d2:	57 8b       	std	Z+23, r21	; 0x17
	EDMA.CH0.ADDR = (uint16_t)buffer;
 1d4:	60 8f       	std	Z+24, r22	; 0x18
 1d6:	71 8f       	std	Z+25, r23	; 0x19
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
 1d8:	91 e3       	ldi	r25, 0x31	; 49
 1da:	92 8b       	std	Z+18, r25	; 0x12
	EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
 1dc:	80 89       	ldd	r24, Z+16	; 0x10
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	80 8b       	std	Z+16, r24	; 0x10
	
	
	EDMA.CH1.TRFCNT = len;
 1e2:	46 a3       	std	Z+38, r20	; 0x26
 1e4:	57 a3       	std	Z+39, r21	; 0x27
	EDMA.CH1.ADDR = (uint16_t)buffer;;
 1e6:	60 a7       	std	Z+40, r22	; 0x28
 1e8:	71 a7       	std	Z+41, r23	; 0x29
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
 1ea:	92 a3       	std	Z+34, r25	; 0x22
	EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
 1ec:	80 a1       	ldd	r24, Z+32	; 0x20
 1ee:	80 69       	ori	r24, 0x90	; 144
 1f0:	80 a3       	std	Z+32, r24	; 0x20


	while(_readingMem);
 1f2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <_readingMem>
 1f6:	81 11       	cpse	r24, r1
 1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <mem_read_prop+0x50>
	

	
}
 1fa:	08 95       	ret

000001fc <mem_write_prop>:

void mem_write_prop(uint8_t prop, uint8_t *buffer, uint8_t len)
{
	//6 bytes: 1 for command, 3 for data retrieval
	buffer[0] = prop;
 1fc:	fb 01       	movw	r30, r22
 1fe:	80 83       	st	Z, r24

	for (uint8_t i = 1; i < len; i++)
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	06 c0       	rjmp	.+12     	; 0x210 <mem_write_prop+0x14>
	{
		buffer[i] = DUMMY_BYTE;
 204:	fb 01       	movw	r30, r22
 206:	e8 0f       	add	r30, r24
 208:	f1 1d       	adc	r31, r1
 20a:	95 e5       	ldi	r25, 0x55	; 85
 20c:	90 83       	st	Z, r25
void mem_write_prop(uint8_t prop, uint8_t *buffer, uint8_t len)
{
	//6 bytes: 1 for command, 3 for data retrieval
	buffer[0] = prop;

	for (uint8_t i = 1; i < len; i++)
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	84 17       	cp	r24, r20
 212:	c0 f3       	brcs	.-16     	; 0x204 <mem_write_prop+0x8>
	{
		buffer[i] = DUMMY_BYTE;
	}


	PORTD.OUTCLR = PIN4_bm; //Set Pin 4 (CS) to low
 214:	80 e1       	ldi	r24, 0x10	; 16
 216:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7f7666>
	
	_readingMem = 1;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <_readingMem>
	_setCS = 1;
 220:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_setCS>
	
	EDMA.CH0.TRFCNT = len;
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	e0 e0       	ldi	r30, 0x00	; 0
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	46 8b       	std	Z+22, r20	; 0x16
 22c:	57 8b       	std	Z+23, r21	; 0x17
	EDMA.CH0.ADDR = (uint16_t)buffer;
 22e:	60 8f       	std	Z+24, r22	; 0x18
 230:	71 8f       	std	Z+25, r23	; 0x19
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
 232:	91 e3       	ldi	r25, 0x31	; 49
 234:	92 8b       	std	Z+18, r25	; 0x12
	EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
 236:	80 89       	ldd	r24, Z+16	; 0x10
 238:	80 68       	ori	r24, 0x80	; 128
 23a:	80 8b       	std	Z+16, r24	; 0x10
	
	
	EDMA.CH1.TRFCNT = len;
 23c:	46 a3       	std	Z+38, r20	; 0x26
 23e:	57 a3       	std	Z+39, r21	; 0x27
	EDMA.CH1.ADDR = (uint16_t)buffer;;
 240:	60 a7       	std	Z+40, r22	; 0x28
 242:	71 a7       	std	Z+41, r23	; 0x29
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
 244:	92 a3       	std	Z+34, r25	; 0x22
	EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
 246:	80 a1       	ldd	r24, Z+32	; 0x20
 248:	80 69       	ori	r24, 0x90	; 144
 24a:	80 a3       	std	Z+32, r24	; 0x20


	while(_readingMem);
 24c:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <_readingMem>
 250:	81 11       	cpse	r24, r1
 252:	fc cf       	rjmp	.-8      	; 0x24c <mem_write_prop+0x50>
	

	
}
 254:	08 95       	ret

00000256 <mem_write_data>:

void mem_write_data(uint32_t starting_address, uint8_t *buffer, uint8_t len)
{
 256:	cf 92       	push	r12
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	25 97       	sbiw	r28, 0x05	; 5
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	de bf       	out	0x3e, r29	; 62
	
	volatile uint8_t write[4];
	volatile uint8_t trash;
	_setCS = 0;
 26c:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <_setCS>
	_readingMem = 1;
 270:	31 e0       	ldi	r19, 0x01	; 1
 272:	30 93 07 20 	sts	0x2007, r19	; 0x802007 <_readingMem>
	PORTD.OUTCLR = PIN4_bm; //Set Pin 4 (CS) to low
 276:	30 e1       	ldi	r19, 0x10	; 16
 278:	30 93 66 06 	sts	0x0666, r19	; 0x800666 <__TEXT_REGION_LENGTH__+0x7f7666>
		
	write[0] = MEM_WRITE;
 27c:	32 e0       	ldi	r19, 0x02	; 2
 27e:	39 83       	std	Y+1, r19	; 0x01
	write[1] = (starting_address >> 16) & 0xFF;
 280:	6c 01       	movw	r12, r24
 282:	ee 24       	eor	r14, r14
 284:	ff 24       	eor	r15, r15
 286:	ca 82       	std	Y+2, r12	; 0x02
	write[2] = (starting_address >> 8) & 0xFF;
 288:	c7 2e       	mov	r12, r23
 28a:	d8 2e       	mov	r13, r24
 28c:	e9 2e       	mov	r14, r25
 28e:	ff 24       	eor	r15, r15
 290:	cb 82       	std	Y+3, r12	; 0x03
	write[3] = (starting_address >> 0) & 0xFF;
 292:	6c 83       	std	Y+4, r22	; 0x04

	EDMA.CH0.TRFCNT = 4;
 294:	e0 e0       	ldi	r30, 0x00	; 0
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	66 8b       	std	Z+22, r22	; 0x16
 29e:	77 8b       	std	Z+23, r23	; 0x17
	EDMA.CH0.ADDR = (uint16_t)&trash;
 2a0:	ce 01       	movw	r24, r28
 2a2:	05 96       	adiw	r24, 0x05	; 5
 2a4:	80 8f       	std	Z+24, r24	; 0x18
 2a6:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_FIXED_gc; //
 2a8:	80 e3       	ldi	r24, 0x30	; 48
 2aa:	82 8b       	std	Z+18, r24	; 0x12
	EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
 2ac:	80 89       	ldd	r24, Z+16	; 0x10
 2ae:	80 68       	ori	r24, 0x80	; 128
 2b0:	80 8b       	std	Z+16, r24	; 0x10
		
		
	EDMA.CH1.TRFCNT = 4;
 2b2:	66 a3       	std	Z+38, r22	; 0x26
 2b4:	77 a3       	std	Z+39, r23	; 0x27
	EDMA.CH1.ADDR = write;
 2b6:	ce 01       	movw	r24, r28
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	80 a7       	std	Z+40, r24	; 0x28
 2bc:	91 a7       	std	Z+41, r25	; 0x29
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
 2be:	81 e3       	ldi	r24, 0x31	; 49
 2c0:	82 a3       	std	Z+34, r24	; 0x22
	EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
 2c2:	80 a1       	ldd	r24, Z+32	; 0x20
 2c4:	80 69       	ori	r24, 0x90	; 144
 2c6:	80 a3       	std	Z+32, r24	; 0x20
		
	while(_readingMem);
 2c8:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <_readingMem>
 2cc:	81 11       	cpse	r24, r1
 2ce:	fc cf       	rjmp	.-8      	; 0x2c8 <mem_write_data+0x72>
	_readingMem = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <_readingMem>
	_setCS = 1;
 2d6:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_setCS>
	EDMA.CH0.TRFCNT = len;
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	e0 e0       	ldi	r30, 0x00	; 0
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	26 8b       	std	Z+22, r18	; 0x16
 2e2:	37 8b       	std	Z+23, r19	; 0x17
	EDMA.CH0.ADDR = (uint16_t)&trash;
 2e4:	ce 01       	movw	r24, r28
 2e6:	05 96       	adiw	r24, 0x05	; 5
 2e8:	80 8f       	std	Z+24, r24	; 0x18
 2ea:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_FIXED_gc; //
 2ec:	80 e3       	ldi	r24, 0x30	; 48
 2ee:	82 8b       	std	Z+18, r24	; 0x12
	EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
 2f0:	80 89       	ldd	r24, Z+16	; 0x10
 2f2:	80 68       	ori	r24, 0x80	; 128
 2f4:	80 8b       	std	Z+16, r24	; 0x10
		
	EDMA.CH1.TRFCNT = len;
 2f6:	26 a3       	std	Z+38, r18	; 0x26
 2f8:	37 a3       	std	Z+39, r19	; 0x27
	EDMA.CH1.ADDR = (uint16_t)buffer;
 2fa:	40 a7       	std	Z+40, r20	; 0x28
 2fc:	51 a7       	std	Z+41, r21	; 0x29
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
 2fe:	81 e3       	ldi	r24, 0x31	; 49
 300:	82 a3       	std	Z+34, r24	; 0x22
	EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
 302:	80 a1       	ldd	r24, Z+32	; 0x20
 304:	80 69       	ori	r24, 0x90	; 144
 306:	80 a3       	std	Z+32, r24	; 0x20
		
	//while(_readingMem);

	//PORTD.OUTSET = PIN4_bm;
	
}
 308:	25 96       	adiw	r28, 0x05	; 5
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	df 90       	pop	r13
 318:	cf 90       	pop	r12
 31a:	08 95       	ret

0000031c <mem_read_data>:

void mem_read_data(uint32_t starting_address, uint8_t *buffer, uint8_t len)
{
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	25 97       	sbiw	r28, 0x05	; 5
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	de bf       	out	0x3e, r29	; 62
		volatile uint8_t read[4];
		volatile uint8_t trash;
		_readingMem = 1;
 332:	31 e0       	ldi	r19, 0x01	; 1
 334:	30 93 07 20 	sts	0x2007, r19	; 0x802007 <_readingMem>
		_setCS = 0;
 338:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <_setCS>
		PORTD.OUTCLR = PIN4_bm; //Set Pin 4 (CS) to low
 33c:	30 e1       	ldi	r19, 0x10	; 16
 33e:	30 93 66 06 	sts	0x0666, r19	; 0x800666 <__TEXT_REGION_LENGTH__+0x7f7666>
		
		read[0] = MEM_READ;
 342:	33 e0       	ldi	r19, 0x03	; 3
 344:	39 83       	std	Y+1, r19	; 0x01
		read[1] = (starting_address >> 16) & 0xFF;
 346:	6c 01       	movw	r12, r24
 348:	ee 24       	eor	r14, r14
 34a:	ff 24       	eor	r15, r15
 34c:	ca 82       	std	Y+2, r12	; 0x02
		read[2] = (starting_address >> 8) & 0xFF;
 34e:	c7 2e       	mov	r12, r23
 350:	d8 2e       	mov	r13, r24
 352:	e9 2e       	mov	r14, r25
 354:	ff 24       	eor	r15, r15
 356:	cb 82       	std	Y+3, r12	; 0x03
		read[3] = (starting_address >> 0) & 0xFF;
 358:	6c 83       	std	Y+4, r22	; 0x04

		EDMA.CH0.TRFCNT = 4;
 35a:	e0 e0       	ldi	r30, 0x00	; 0
 35c:	f1 e0       	ldi	r31, 0x01	; 1
 35e:	64 e0       	ldi	r22, 0x04	; 4
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	66 8b       	std	Z+22, r22	; 0x16
 364:	77 8b       	std	Z+23, r23	; 0x17
		EDMA.CH0.ADDR = (uint16_t)&trash;
 366:	ce 01       	movw	r24, r28
 368:	05 96       	adiw	r24, 0x05	; 5
 36a:	80 8f       	std	Z+24, r24	; 0x18
 36c:	91 8f       	std	Z+25, r25	; 0x19
		EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_FIXED_gc; //
 36e:	80 e3       	ldi	r24, 0x30	; 48
 370:	82 8b       	std	Z+18, r24	; 0x12
		EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
 372:	80 89       	ldd	r24, Z+16	; 0x10
 374:	80 68       	ori	r24, 0x80	; 128
 376:	80 8b       	std	Z+16, r24	; 0x10
		
		
		EDMA.CH1.TRFCNT = 4;
 378:	66 a3       	std	Z+38, r22	; 0x26
 37a:	77 a3       	std	Z+39, r23	; 0x27
		EDMA.CH1.ADDR = read;
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	80 a7       	std	Z+40, r24	; 0x28
 382:	91 a7       	std	Z+41, r25	; 0x29
		EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
 384:	81 e3       	ldi	r24, 0x31	; 49
 386:	82 a3       	std	Z+34, r24	; 0x22
		EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
 388:	80 a1       	ldd	r24, Z+32	; 0x20
 38a:	80 69       	ori	r24, 0x90	; 144
 38c:	80 a3       	std	Z+32, r24	; 0x20
		
		while(_readingMem);
 38e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <_readingMem>
 392:	81 11       	cpse	r24, r1
 394:	fc cf       	rjmp	.-8      	; 0x38e <mem_read_data+0x72>
		_setCS = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_setCS>
		_readingMem = 1;
 39c:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <_readingMem>
		
		EDMA.CH0.TRFCNT = len;
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	e0 e0       	ldi	r30, 0x00	; 0
 3a4:	f1 e0       	ldi	r31, 0x01	; 1
 3a6:	26 8b       	std	Z+22, r18	; 0x16
 3a8:	37 8b       	std	Z+23, r19	; 0x17
		EDMA.CH0.ADDR = (uint16_t)buffer;
 3aa:	40 8f       	std	Z+24, r20	; 0x18
 3ac:	51 8f       	std	Z+25, r21	; 0x19
		EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc; //
 3ae:	81 e3       	ldi	r24, 0x31	; 49
 3b0:	82 8b       	std	Z+18, r24	; 0x12
		EDMA.CH0.CTRLA |= EDMA_CH_ENABLE_bm;
 3b2:	80 89       	ldd	r24, Z+16	; 0x10
 3b4:	80 68       	ori	r24, 0x80	; 128
 3b6:	80 8b       	std	Z+16, r24	; 0x10
		
		EDMA.CH1.TRFCNT = len;
 3b8:	26 a3       	std	Z+38, r18	; 0x26
 3ba:	37 a3       	std	Z+39, r19	; 0x27
		EDMA.CH1.ADDR = (uint16_t)&_dummyByte;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e2       	ldi	r25, 0x20	; 32
 3c0:	80 a7       	std	Z+40, r24	; 0x28
 3c2:	91 a7       	std	Z+41, r25	; 0x29
		EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_FIXED_gc; //
 3c4:	80 e3       	ldi	r24, 0x30	; 48
 3c6:	82 a3       	std	Z+34, r24	; 0x22
		EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_TRFREQ_bm;
 3c8:	80 a1       	ldd	r24, Z+32	; 0x20
 3ca:	80 69       	ori	r24, 0x90	; 144
 3cc:	80 a3       	std	Z+32, r24	; 0x20
		
		while(_readingMem);
 3ce:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <_readingMem>
 3d2:	81 11       	cpse	r24, r1
 3d4:	fc cf       	rjmp	.-8      	; 0x3ce <mem_read_data+0xb2>

		
	
}
 3d6:	25 96       	adiw	r28, 0x05	; 5
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	ff 90       	pop	r15
 3e2:	ef 90       	pop	r14
 3e4:	df 90       	pop	r13
 3e6:	cf 90       	pop	r12
 3e8:	08 95       	ret

000003ea <get_data_from_uart>:

uint8_t get_data_from_uart(uint8_t *buffer, uint8_t len, uint8_t offset)
{
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
 3f4:	16 2f       	mov	r17, r22
 3f6:	04 2f       	mov	r16, r20

	uint16_t i = 0;

	RTC.CNT = 0;
 3f8:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f7408>
 3fc:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x7f7409>
	enable_rtc();
 400:	0e 94 ca 00 	call	0x194	; 0x194 <enable_rtc>
}

uint8_t get_data_from_uart(uint8_t *buffer, uint8_t len, uint8_t offset)
{

	uint16_t i = 0;
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0

	RTC.CNT = 0;
	enable_rtc();
	

	while(i < len)
 408:	20 c0       	rjmp	.+64     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
	{
		while(!(USARTC0.STATUS & USART_RXCIF_bm) && !(RTC.INTFLAGS & RTC_OVFIF_bm));
 40a:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f78c1>
 40e:	88 23       	and	r24, r24
 410:	24 f0       	brlt	.+8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 412:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <__TEXT_REGION_LENGTH__+0x7f7403>
 416:	80 ff       	sbrs	r24, 0
 418:	f8 cf       	rjmp	.-16     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		RTC.CNT = 0;
 41a:	e0 e0       	ldi	r30, 0x00	; 0
 41c:	f4 e0       	ldi	r31, 0x04	; 4
 41e:	10 86       	std	Z+8, r1	; 0x08
 420:	11 86       	std	Z+9, r1	; 0x09
		if ((RTC.INTFLAGS & RTC_OVFIF_bm))
 422:	83 81       	ldd	r24, Z+3	; 0x03
 424:	80 ff       	sbrs	r24, 0
 426:	07 c0       	rjmp	.+14     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		{
			disable_rtc();
 428:	0e 94 ce 00 	call	0x19c	; 0x19c <disable_rtc>
			RTC.INTFLAGS = RTC_OVFIF_bm;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <__TEXT_REGION_LENGTH__+0x7f7403>

			return 0;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	12 c0       	rjmp	.+36     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		}
		
		buffer[i + offset] = USARTC0.DATA;
 436:	f9 01       	movw	r30, r18
 438:	e0 0f       	add	r30, r16
 43a:	f1 1d       	adc	r31, r1
 43c:	ec 0f       	add	r30, r28
 43e:	fd 1f       	adc	r31, r29
 440:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7f78c0>
 444:	80 83       	st	Z, r24
		i++;
 446:	2f 5f       	subi	r18, 0xFF	; 255
 448:	3f 4f       	sbci	r19, 0xFF	; 255

	RTC.CNT = 0;
	enable_rtc();
	

	while(i < len)
 44a:	81 2f       	mov	r24, r17
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	28 17       	cp	r18, r24
 450:	39 07       	cpc	r19, r25
 452:	d8 f2       	brcs	.-74     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		buffer[i + offset] = USARTC0.DATA;
		i++;
	}
	
	
	disable_rtc();	
 454:	0e 94 ce 00 	call	0x19c	; 0x19c <disable_rtc>
	return 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <get_uint_from_uart>:

uint8_t get_uint_from_uart(uint32_t *intVal)
{
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	00 d0       	rcall	.+0      	; 0x46e <get_uint_from_uart+0xa>
 46e:	00 d0       	rcall	.+0      	; 0x470 <get_uint_from_uart+0xc>
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	8c 01       	movw	r16, r24
	static volatile uint8_t arr[4];
	uint8_t i = 0;
	volatile uint32_t val;
	uint32_t *valPtr;

	if (!get_data_from_uart(arr, 4, 0))
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	64 e0       	ldi	r22, 0x04	; 4
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	90 e2       	ldi	r25, 0x20	; 32
 47e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <get_data_from_uart>
 482:	88 23       	and	r24, r24
 484:	b1 f0       	breq	.+44     	; 0x4b2 <get_uint_from_uart+0x4e>
		return 0;
	}
	
	
	valPtr = arr;
	val = *valPtr;
 486:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <__data_end>
 48a:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <__data_end+0x1>
 48e:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <__data_end+0x2>
 492:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <__data_end+0x3>
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	9a 83       	std	Y+2, r25	; 0x02
 49a:	ab 83       	std	Y+3, r26	; 0x03
 49c:	bc 83       	std	Y+4, r27	; 0x04
	*intVal = val;
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	9a 81       	ldd	r25, Y+2	; 0x02
 4a2:	ab 81       	ldd	r26, Y+3	; 0x03
 4a4:	bc 81       	ldd	r27, Y+4	; 0x04
 4a6:	f8 01       	movw	r30, r16
 4a8:	80 83       	st	Z, r24
 4aa:	91 83       	std	Z+1, r25	; 0x01
 4ac:	a2 83       	std	Z+2, r26	; 0x02
 4ae:	b3 83       	std	Z+3, r27	; 0x03
	return 1;
 4b0:	81 e0       	ldi	r24, 0x01	; 1
}
 4b2:	24 96       	adiw	r28, 0x04	; 4
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	08 95       	ret

000004c2 <transmit_data>:



void transmit_data(uint8_t *data, uint8_t len, uint8_t offset)
{
 4c2:	dc 01       	movw	r26, r24
	uint16_t i = 0;
	uint8_t trash = USARTC0.DATA; //make sure data is clear
 4c4:	e0 ec       	ldi	r30, 0xC0	; 192
 4c6:	f8 e0       	ldi	r31, 0x08	; 8
 4c8:	80 81       	ld	r24, Z
	USARTC0.STATUS = USART_TXCIF_bm | USART_DREIF_bm ;
 4ca:	80 e6       	ldi	r24, 0x60	; 96
 4cc:	81 83       	std	Z+1, r24	; 0x01



void transmit_data(uint8_t *data, uint8_t len, uint8_t offset)
{
	uint16_t i = 0;
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t trash = USARTC0.DATA; //make sure data is clear
	USARTC0.STATUS = USART_TXCIF_bm | USART_DREIF_bm ;
	while(i < len)
 4d2:	11 c0       	rjmp	.+34     	; 0x4f6 <transmit_data+0x34>
	{

		USARTC0.DATA = data[offset + i];
 4d4:	fd 01       	movw	r30, r26
 4d6:	e2 0f       	add	r30, r18
 4d8:	f3 1f       	adc	r31, r19
 4da:	e4 0f       	add	r30, r20
 4dc:	f1 1d       	adc	r31, r1
 4de:	90 81       	ld	r25, Z
 4e0:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7f78c0>
		while(!(USARTC0.STATUS & USART_TXCIF_bm));
 4e4:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f78c1>
 4e8:	96 ff       	sbrs	r25, 6
 4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <transmit_data+0x22>
		USARTC0.STATUS = USART_TXCIF_bm | USART_DREIF_bm ;
 4ec:	90 e6       	ldi	r25, 0x60	; 96
 4ee:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f78c1>
		i++;
 4f2:	2f 5f       	subi	r18, 0xFF	; 255
 4f4:	3f 4f       	sbci	r19, 0xFF	; 255
void transmit_data(uint8_t *data, uint8_t len, uint8_t offset)
{
	uint16_t i = 0;
	uint8_t trash = USARTC0.DATA; //make sure data is clear
	USARTC0.STATUS = USART_TXCIF_bm | USART_DREIF_bm ;
	while(i < len)
 4f6:	e6 2f       	mov	r30, r22
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	2e 17       	cp	r18, r30
 4fc:	3f 07       	cpc	r19, r31
 4fe:	50 f3       	brcs	.-44     	; 0x4d4 <transmit_data+0x12>
		while(!(USARTC0.STATUS & USART_TXCIF_bm));
		USARTC0.STATUS = USART_TXCIF_bm | USART_DREIF_bm ;
		i++;
	}	
	
}
 500:	08 95       	ret

00000502 <transmit_status>:

void transmit_status(uint8_t status)
{
	_propBuff[0] = status;
 502:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <_propBuff>
	//Transmit status byte
	transmit_data(_propBuff, 1, 0);
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	8a e0       	ldi	r24, 0x0A	; 10
 50c:	91 e2       	ldi	r25, 0x21	; 33
 50e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <transmit_data>
 512:	08 95       	ret

00000514 <transmit_status_and_data>:
	return;
}

void transmit_status_and_data(uint8_t status, uint32_t data)
{
	_propBuff[0] = status;
 514:	ea e0       	ldi	r30, 0x0A	; 10
 516:	f1 e2       	ldi	r31, 0x21	; 33
 518:	80 83       	st	Z, r24
	_propBuff[1] = (data >> 0) & 0xFF;
 51a:	41 83       	std	Z+1, r20	; 0x01
	_propBuff[2] = (data >> 8) & 0xFF;
 51c:	bb 27       	eor	r27, r27
 51e:	a7 2f       	mov	r26, r23
 520:	96 2f       	mov	r25, r22
 522:	85 2f       	mov	r24, r21
 524:	82 83       	std	Z+2, r24	; 0x02
	_propBuff[3] = (data >> 16) & 0xFF;
 526:	cb 01       	movw	r24, r22
 528:	aa 27       	eor	r26, r26
 52a:	bb 27       	eor	r27, r27
 52c:	83 83       	std	Z+3, r24	; 0x03
	_propBuff[4] = (data >> 24) & 0xFF;
 52e:	47 2f       	mov	r20, r23
 530:	55 27       	eor	r21, r21
 532:	66 27       	eor	r22, r22
 534:	77 27       	eor	r23, r23
 536:	44 83       	std	Z+4, r20	; 0x04

	//Transmit status byte
	transmit_data(_propBuff, 5, 0);
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	65 e0       	ldi	r22, 0x05	; 5
 53c:	cf 01       	movw	r24, r30
 53e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <transmit_data>
 542:	08 95       	ret

00000544 <get_mem>:
	return;
}

void get_mem()
{
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	28 97       	sbiw	r28, 0x08	; 8
 54e:	cd bf       	out	0x3d, r28	; 61
 550:	de bf       	out	0x3e, r29	; 62

	volatile uint32_t address;
	volatile uint32_t length;

	if (!get_uint_from_uart(&address) || !get_uint_from_uart(&length))
 552:	ce 01       	movw	r24, r28
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	0e 94 32 02 	call	0x464	; 0x464 <get_uint_from_uart>
 55a:	88 23       	and	r24, r24
 55c:	31 f0       	breq	.+12     	; 0x56a <get_mem+0x26>
 55e:	ce 01       	movw	r24, r28
 560:	05 96       	adiw	r24, 0x05	; 5
 562:	0e 94 32 02 	call	0x464	; 0x464 <get_uint_from_uart>
 566:	81 11       	cpse	r24, r1
 568:	08 c0       	rjmp	.+16     	; 0x57a <get_mem+0x36>
	{	
		transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 8a 02 	call	0x514	; 0x514 <transmit_status_and_data>
		return;
 578:	52 c0       	rjmp	.+164    	; 0x61e <get_mem+0xda>
	}

	transmit_status(OP_STATUS_SUCCESS);
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 81 02 	call	0x502	; 0x502 <transmit_status>
	while (length > 255)
 580:	27 c0       	rjmp	.+78     	; 0x5d0 <get_mem+0x8c>
	{
		mem_read_data(address, _buff0, 255);
 582:	69 81       	ldd	r22, Y+1	; 0x01
 584:	7a 81       	ldd	r23, Y+2	; 0x02
 586:	8b 81       	ldd	r24, Y+3	; 0x03
 588:	9c 81       	ldd	r25, Y+4	; 0x04
 58a:	2f ef       	ldi	r18, 0xFF	; 255
 58c:	48 e0       	ldi	r20, 0x08	; 8
 58e:	50 e2       	ldi	r21, 0x20	; 32
 590:	0e 94 8e 01 	call	0x31c	; 0x31c <mem_read_data>
		address += 255;
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	9a 81       	ldd	r25, Y+2	; 0x02
 598:	ab 81       	ldd	r26, Y+3	; 0x03
 59a:	bc 81       	ldd	r27, Y+4	; 0x04
 59c:	81 50       	subi	r24, 0x01	; 1
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	af 4f       	sbci	r26, 0xFF	; 255
 5a2:	bf 4f       	sbci	r27, 0xFF	; 255
 5a4:	89 83       	std	Y+1, r24	; 0x01
 5a6:	9a 83       	std	Y+2, r25	; 0x02
 5a8:	ab 83       	std	Y+3, r26	; 0x03
 5aa:	bc 83       	std	Y+4, r27	; 0x04
		length -= 255;
 5ac:	8d 81       	ldd	r24, Y+5	; 0x05
 5ae:	9e 81       	ldd	r25, Y+6	; 0x06
 5b0:	af 81       	ldd	r26, Y+7	; 0x07
 5b2:	b8 85       	ldd	r27, Y+8	; 0x08
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
 5b6:	91 09       	sbc	r25, r1
 5b8:	a1 09       	sbc	r26, r1
 5ba:	b1 09       	sbc	r27, r1
 5bc:	8d 83       	std	Y+5, r24	; 0x05
 5be:	9e 83       	std	Y+6, r25	; 0x06
 5c0:	af 83       	std	Y+7, r26	; 0x07
 5c2:	b8 87       	std	Y+8, r27	; 0x08
		transmit_data(_buff0, 255, 0);
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	6f ef       	ldi	r22, 0xFF	; 255
 5c8:	88 e0       	ldi	r24, 0x08	; 8
 5ca:	90 e2       	ldi	r25, 0x20	; 32
 5cc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <transmit_data>
		transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
		return;
	}

	transmit_status(OP_STATUS_SUCCESS);
	while (length > 255)
 5d0:	8d 81       	ldd	r24, Y+5	; 0x05
 5d2:	9e 81       	ldd	r25, Y+6	; 0x06
 5d4:	af 81       	ldd	r26, Y+7	; 0x07
 5d6:	b8 85       	ldd	r27, Y+8	; 0x08
 5d8:	8f 3f       	cpi	r24, 0xFF	; 255
 5da:	91 05       	cpc	r25, r1
 5dc:	a1 05       	cpc	r26, r1
 5de:	b1 05       	cpc	r27, r1
 5e0:	09 f0       	breq	.+2      	; 0x5e4 <get_mem+0xa0>
 5e2:	78 f6       	brcc	.-98     	; 0x582 <get_mem+0x3e>
		address += 255;
		length -= 255;
		transmit_data(_buff0, 255, 0);
	}
	
	if (length > 0)
 5e4:	8d 81       	ldd	r24, Y+5	; 0x05
 5e6:	9e 81       	ldd	r25, Y+6	; 0x06
 5e8:	af 81       	ldd	r26, Y+7	; 0x07
 5ea:	b8 85       	ldd	r27, Y+8	; 0x08
 5ec:	89 2b       	or	r24, r25
 5ee:	8a 2b       	or	r24, r26
 5f0:	8b 2b       	or	r24, r27
 5f2:	a9 f0       	breq	.+42     	; 0x61e <get_mem+0xda>
	{
		mem_read_data(address, _buff0, length);
 5f4:	2d 81       	ldd	r18, Y+5	; 0x05
 5f6:	3e 81       	ldd	r19, Y+6	; 0x06
 5f8:	4f 81       	ldd	r20, Y+7	; 0x07
 5fa:	58 85       	ldd	r21, Y+8	; 0x08
 5fc:	69 81       	ldd	r22, Y+1	; 0x01
 5fe:	7a 81       	ldd	r23, Y+2	; 0x02
 600:	8b 81       	ldd	r24, Y+3	; 0x03
 602:	9c 81       	ldd	r25, Y+4	; 0x04
 604:	48 e0       	ldi	r20, 0x08	; 8
 606:	50 e2       	ldi	r21, 0x20	; 32
 608:	0e 94 8e 01 	call	0x31c	; 0x31c <mem_read_data>
		transmit_data(_buff0, length, 0);
 60c:	6d 81       	ldd	r22, Y+5	; 0x05
 60e:	7e 81       	ldd	r23, Y+6	; 0x06
 610:	8f 81       	ldd	r24, Y+7	; 0x07
 612:	98 85       	ldd	r25, Y+8	; 0x08
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	88 e0       	ldi	r24, 0x08	; 8
 618:	90 e2       	ldi	r25, 0x20	; 32
 61a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <transmit_data>
	}
		
}
 61e:	28 96       	adiw	r28, 0x08	; 8
 620:	cd bf       	out	0x3d, r28	; 61
 622:	de bf       	out	0x3e, r29	; 62
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	08 95       	ret

0000062a <get_mem_id>:

void get_mem_id()
{
	mem_read_prop(MEM_READ_ID, _propBuff, 6);
 62a:	46 e0       	ldi	r20, 0x06	; 6
 62c:	6a e0       	ldi	r22, 0x0A	; 10
 62e:	71 e2       	ldi	r23, 0x21	; 33
 630:	8b e4       	ldi	r24, 0x4B	; 75
 632:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mem_read_prop>
	transmit_status(OP_STATUS_SUCCESS);
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	0e 94 81 02 	call	0x502	; 0x502 <transmit_status>
	transmit_data(_propBuff, 2, 4);
 63c:	44 e0       	ldi	r20, 0x04	; 4
 63e:	62 e0       	ldi	r22, 0x02	; 2
 640:	8a e0       	ldi	r24, 0x0A	; 10
 642:	91 e2       	ldi	r25, 0x21	; 33
 644:	0e 94 61 02 	call	0x4c2	; 0x4c2 <transmit_data>
 648:	08 95       	ret

0000064a <get_mem_jedec>:
}

void get_mem_jedec()
{
	mem_read_prop(MEM_READ_JEDEC, _propBuff, 4);
 64a:	44 e0       	ldi	r20, 0x04	; 4
 64c:	6a e0       	ldi	r22, 0x0A	; 10
 64e:	71 e2       	ldi	r23, 0x21	; 33
 650:	8f e9       	ldi	r24, 0x9F	; 159
 652:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mem_read_prop>
	transmit_status(OP_STATUS_SUCCESS);
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 81 02 	call	0x502	; 0x502 <transmit_status>
	transmit_data(_propBuff, 3, 1);
 65c:	41 e0       	ldi	r20, 0x01	; 1
 65e:	63 e0       	ldi	r22, 0x03	; 3
 660:	8a e0       	ldi	r24, 0x0A	; 10
 662:	91 e2       	ldi	r25, 0x21	; 33
 664:	0e 94 61 02 	call	0x4c2	; 0x4c2 <transmit_data>
 668:	08 95       	ret

0000066a <get_mem_status>:
}

void get_mem_status()
{
	mem_read_prop(MEM_READ_STATUS, _propBuff, 2);
 66a:	42 e0       	ldi	r20, 0x02	; 2
 66c:	6a e0       	ldi	r22, 0x0A	; 10
 66e:	71 e2       	ldi	r23, 0x21	; 33
 670:	85 e0       	ldi	r24, 0x05	; 5
 672:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mem_read_prop>
	transmit_status(OP_STATUS_SUCCESS);
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 81 02 	call	0x502	; 0x502 <transmit_status>
	transmit_data(_propBuff, 1, 1);
 67c:	41 e0       	ldi	r20, 0x01	; 1
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	8a e0       	ldi	r24, 0x0A	; 10
 682:	91 e2       	ldi	r25, 0x21	; 33
 684:	0e 94 61 02 	call	0x4c2	; 0x4c2 <transmit_data>
 688:	08 95       	ret

0000068a <mem_enable_write>:
}

uint8_t mem_enable_write()
{
 68a:	cf 93       	push	r28
	uint8_t retryCount = 0;
	mem_write_prop(MEM_ENABLE_WRITE, _propBuff, 1);
 68c:	41 e0       	ldi	r20, 0x01	; 1
 68e:	6a e0       	ldi	r22, 0x0A	; 10
 690:	71 e2       	ldi	r23, 0x21	; 33
 692:	86 e0       	ldi	r24, 0x06	; 6
 694:	0e 94 fe 00 	call	0x1fc	; 0x1fc <mem_write_prop>
	transmit_data(_propBuff, 1, 1);
}

uint8_t mem_enable_write()
{
	uint8_t retryCount = 0;
 698:	80 e0       	ldi	r24, 0x00	; 0
	mem_write_prop(MEM_ENABLE_WRITE, _propBuff, 1);
	
	
	while(retryCount++ < RETRY_ATTEMPTS)
 69a:	14 c0       	rjmp	.+40     	; 0x6c4 <mem_enable_write+0x3a>
	{
		mem_read_prop(MEM_READ_STATUS, _propBuff, 2);
 69c:	42 e0       	ldi	r20, 0x02	; 2
 69e:	6a e0       	ldi	r22, 0x0A	; 10
 6a0:	71 e2       	ldi	r23, 0x21	; 33
 6a2:	85 e0       	ldi	r24, 0x05	; 5
 6a4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mem_read_prop>
		if ((_propBuff[1] & MEM_WRITE_ENABLED_STATUS_BIT))
 6a8:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <_propBuff+0x1>
 6ac:	81 fd       	sbrc	r24, 1
 6ae:	10 c0       	rjmp	.+32     	; 0x6d0 <mem_enable_write+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6b0:	2f ef       	ldi	r18, 0xFF	; 255
 6b2:	89 e6       	ldi	r24, 0x69	; 105
 6b4:	98 e1       	ldi	r25, 0x18	; 24
 6b6:	21 50       	subi	r18, 0x01	; 1
 6b8:	80 40       	sbci	r24, 0x00	; 0
 6ba:	90 40       	sbci	r25, 0x00	; 0
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <mem_enable_write+0x2c>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <mem_enable_write+0x36>
 6c0:	00 00       	nop
{
	uint8_t retryCount = 0;
	mem_write_prop(MEM_ENABLE_WRITE, _propBuff, 1);
	
	
	while(retryCount++ < RETRY_ATTEMPTS)
 6c2:	8c 2f       	mov	r24, r28
 6c4:	c1 e0       	ldi	r28, 0x01	; 1
 6c6:	c8 0f       	add	r28, r24
 6c8:	8a 30       	cpi	r24, 0x0A	; 10
 6ca:	40 f3       	brcs	.-48     	; 0x69c <mem_enable_write+0x12>
			return 1;
		}
		_delay_ms(RETRY_MS);
	}
	
	return 0;
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <mem_enable_write+0x48>
	while(retryCount++ < RETRY_ATTEMPTS)
	{
		mem_read_prop(MEM_READ_STATUS, _propBuff, 2);
		if ((_propBuff[1] & MEM_WRITE_ENABLED_STATUS_BIT))
		{
			return 1;
 6d0:	81 e0       	ldi	r24, 0x01	; 1
		}
		_delay_ms(RETRY_MS);
	}
	
	return 0;
}
 6d2:	cf 91       	pop	r28
 6d4:	08 95       	ret

000006d6 <erase_mem>:


void erase_mem()
{
	if (!mem_enable_write())
 6d6:	0e 94 45 03 	call	0x68a	; 0x68a <mem_enable_write>
 6da:	81 11       	cpse	r24, r1
 6dc:	07 c0       	rjmp	.+14     	; 0x6ec <erase_mem+0x16>
	{
		transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_NO_RESPONSE);
 6de:	42 e0       	ldi	r20, 0x02	; 2
 6e0:	50 e0       	ldi	r21, 0x00	; 0
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	0e 94 8a 02 	call	0x514	; 0x514 <transmit_status_and_data>
		return;
 6ea:	08 95       	ret
	}

	mem_write_prop(MEM_ERASE, _buff1, 1);
 6ec:	41 e0       	ldi	r20, 0x01	; 1
 6ee:	62 e1       	ldi	r22, 0x12	; 18
 6f0:	71 e2       	ldi	r23, 0x21	; 33
 6f2:	87 ec       	ldi	r24, 0xC7	; 199
 6f4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <mem_write_prop>
	RTC.PER = INPUT_TIMEOUT_PER_MS;
 6f8:	88 ee       	ldi	r24, 0xE8	; 232
 6fa:	93 e0       	ldi	r25, 0x03	; 3
 6fc:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x7f740a>
 700:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x7f740b>
	
	while(1)
	{
		mem_read_prop(MEM_READ_STATUS, _buff1, 2);
 704:	42 e0       	ldi	r20, 0x02	; 2
 706:	62 e1       	ldi	r22, 0x12	; 18
 708:	71 e2       	ldi	r23, 0x21	; 33
 70a:	85 e0       	ldi	r24, 0x05	; 5
 70c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mem_read_prop>
		if (!(_buff1[1] & MEM_BUSY_STATUS_BIT))
 710:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <_buff1+0x1>
 714:	80 fd       	sbrc	r24, 0
 716:	04 c0       	rjmp	.+8      	; 0x720 <erase_mem+0x4a>
		{
			transmit_status(OP_STATUS_SUCCESS);
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 81 02 	call	0x502	; 0x502 <transmit_status>
			return;	
 71e:	08 95       	ret
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	89 e6       	ldi	r24, 0x69	; 105
 724:	98 e1       	ldi	r25, 0x18	; 24
 726:	21 50       	subi	r18, 0x01	; 1
 728:	80 40       	sbci	r24, 0x00	; 0
 72a:	90 40       	sbci	r25, 0x00	; 0
 72c:	e1 f7       	brne	.-8      	; 0x726 <erase_mem+0x50>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <erase_mem+0x5a>
 730:	00 00       	nop
		}
		_delay_ms(RETRY_MS);
		
		transmit_status(OP_STATUS_BUSY);			
 732:	82 e0       	ldi	r24, 0x02	; 2
 734:	0e 94 81 02 	call	0x502	; 0x502 <transmit_status>
	}
 738:	e5 cf       	rjmp	.-54     	; 0x704 <erase_mem+0x2e>

0000073a <swap_write_buffs>:
}

void swap_write_buffs()
{
	
	if (_memInBuff == _buff0)
 73a:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <_memInBuff>
 73e:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <_memInBuff+0x1>
 742:	88 50       	subi	r24, 0x08	; 8
 744:	90 42       	sbci	r25, 0x20	; 32
 746:	69 f4       	brne	.+26     	; 0x762 <swap_write_buffs+0x28>
	{
		_memInBuff = _buff1;
 748:	82 e1       	ldi	r24, 0x12	; 18
 74a:	91 e2       	ldi	r25, 0x21	; 33
 74c:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <_memInBuff>
 750:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <_memInBuff+0x1>
		_memOutBuff = _buff0;
 754:	88 e0       	ldi	r24, 0x08	; 8
 756:	90 e2       	ldi	r25, 0x20	; 32
 758:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <_memOutBuff>
 75c:	90 93 12 22 	sts	0x2212, r25	; 0x802212 <_memOutBuff+0x1>
 760:	08 95       	ret
	}
	else
	{
		_memInBuff = _buff0;
 762:	88 e0       	ldi	r24, 0x08	; 8
 764:	90 e2       	ldi	r25, 0x20	; 32
 766:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <_memInBuff>
 76a:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <_memInBuff+0x1>
		_memOutBuff = _buff1;
 76e:	82 e1       	ldi	r24, 0x12	; 18
 770:	91 e2       	ldi	r25, 0x21	; 33
 772:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <_memOutBuff>
 776:	90 93 12 22 	sts	0x2212, r25	; 0x802212 <_memOutBuff+0x1>
 77a:	08 95       	ret

0000077c <small_write_mem>:
	}
}

uint8_t small_write_mem(uint8_t *buffer, uint32_t address, uint8_t length)
{
 77c:	cf 92       	push	r12
 77e:	df 92       	push	r13
 780:	ef 92       	push	r14
 782:	ff 92       	push	r15
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	8c 01       	movw	r16, r24
 78e:	6a 01       	movw	r12, r20
 790:	7b 01       	movw	r14, r22
 792:	d2 2f       	mov	r29, r18
		
	if (!mem_enable_write())
 794:	0e 94 45 03 	call	0x68a	; 0x68a <mem_enable_write>
 798:	c8 2f       	mov	r28, r24
 79a:	81 11       	cpse	r24, r1
 79c:	08 c0       	rjmp	.+16     	; 0x7ae <small_write_mem+0x32>
	{
		transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_NO_RESPONSE);
 79e:	42 e0       	ldi	r20, 0x02	; 2
 7a0:	50 e0       	ldi	r21, 0x00	; 0
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	0e 94 8a 02 	call	0x514	; 0x514 <transmit_status_and_data>
		return 0;
 7ac:	07 c0       	rjmp	.+14     	; 0x7bc <small_write_mem+0x40>
	}
		
	mem_write_data(address, buffer, length);
 7ae:	2d 2f       	mov	r18, r29
 7b0:	a8 01       	movw	r20, r16
 7b2:	c7 01       	movw	r24, r14
 7b4:	b6 01       	movw	r22, r12
 7b6:	0e 94 2b 01 	call	0x256	; 0x256 <mem_write_data>

	return 1;	
 7ba:	c1 e0       	ldi	r28, 0x01	; 1
}
 7bc:	8c 2f       	mov	r24, r28
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	1f 91       	pop	r17
 7c4:	0f 91       	pop	r16
 7c6:	ff 90       	pop	r15
 7c8:	ef 90       	pop	r14
 7ca:	df 90       	pop	r13
 7cc:	cf 90       	pop	r12
 7ce:	08 95       	ret

000007d0 <write_mem>:

void write_mem()
{
 7d0:	8f 92       	push	r8
 7d2:	9f 92       	push	r9
 7d4:	af 92       	push	r10
 7d6:	bf 92       	push	r11
 7d8:	cf 92       	push	r12
 7da:	df 92       	push	r13
 7dc:	ef 92       	push	r14
 7de:	ff 92       	push	r15
 7e0:	1f 93       	push	r17
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	28 97       	sbiw	r28, 0x08	; 8
 7ec:	cd bf       	out	0x3d, r28	; 61
 7ee:	de bf       	out	0x3e, r29	; 62
	uint32_t leftToRead = length;
	uint32_t leftToWrite = length;
	uint8_t transLen;
	uint8_t lengthOffset;
	
	if (!get_uint_from_uart(&address) || !get_uint_from_uart(&length))
 7f0:	ce 01       	movw	r24, r28
 7f2:	01 96       	adiw	r24, 0x01	; 1
 7f4:	0e 94 32 02 	call	0x464	; 0x464 <get_uint_from_uart>
 7f8:	88 23       	and	r24, r24
 7fa:	31 f0       	breq	.+12     	; 0x808 <write_mem+0x38>
 7fc:	ce 01       	movw	r24, r28
 7fe:	05 96       	adiw	r24, 0x05	; 5
 800:	0e 94 32 02 	call	0x464	; 0x464 <get_uint_from_uart>
 804:	81 11       	cpse	r24, r1
 806:	08 c0       	rjmp	.+16     	; 0x818 <write_mem+0x48>
	{
		transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
 808:	41 e0       	ldi	r20, 0x01	; 1
 80a:	50 e0       	ldi	r21, 0x00	; 0
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	0e 94 8a 02 	call	0x514	; 0x514 <transmit_status_and_data>
		return;
 816:	13 c1       	rjmp	.+550    	; 0xa3e <write_mem+0x26e>
	}


	
	lengthOffset = WRITE_CHUNK_SIZE - (address % WRITE_CHUNK_SIZE);
 818:	89 81       	ldd	r24, Y+1	; 0x01
 81a:	8f 77       	andi	r24, 0x7F	; 127
 81c:	10 e8       	ldi	r17, 0x80	; 128
 81e:	18 1b       	sub	r17, r24
	
	//because of timing (needing to read everything from the UART), if the length is small, handle the write in one or two ops first
	if (length < WRITE_CHUNK_SIZE)
 820:	cd 80       	ldd	r12, Y+5	; 0x05
 822:	de 80       	ldd	r13, Y+6	; 0x06
 824:	ef 80       	ldd	r14, Y+7	; 0x07
 826:	f8 84       	ldd	r15, Y+8	; 0x08
 828:	80 e8       	ldi	r24, 0x80	; 128
 82a:	c8 16       	cp	r12, r24
 82c:	d1 04       	cpc	r13, r1
 82e:	e1 04       	cpc	r14, r1
 830:	f1 04       	cpc	r15, r1
 832:	08 f0       	brcs	.+2      	; 0x836 <write_mem+0x66>
 834:	54 c0       	rjmp	.+168    	; 0x8de <write_mem+0x10e>
	{
		if (!get_data_from_uart(_buff0, length, 0))
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	6c 2d       	mov	r22, r12
 83a:	88 e0       	ldi	r24, 0x08	; 8
 83c:	90 e2       	ldi	r25, 0x20	; 32
 83e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <get_data_from_uart>
 842:	81 11       	cpse	r24, r1
 844:	07 c0       	rjmp	.+14     	; 0x854 <write_mem+0x84>
		{
			transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
 846:	41 e0       	ldi	r20, 0x01	; 1
 848:	50 e0       	ldi	r21, 0x00	; 0
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	70 e0       	ldi	r23, 0x00	; 0
 84e:	0e 94 8a 02 	call	0x514	; 0x514 <transmit_status_and_data>
			return;
 852:	f5 c0       	rjmp	.+490    	; 0xa3e <write_mem+0x26e>
		}
		
		//if the data will still fit within a page boundary, even with the address offset, set the lengthOffset to 0 so we just write the data normally
		if (lengthOffset > length)
 854:	81 2f       	mov	r24, r17
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	a0 e0       	ldi	r26, 0x00	; 0
 85a:	b0 e0       	ldi	r27, 0x00	; 0
 85c:	4d 81       	ldd	r20, Y+5	; 0x05
 85e:	5e 81       	ldd	r21, Y+6	; 0x06
 860:	6f 81       	ldd	r22, Y+7	; 0x07
 862:	78 85       	ldd	r23, Y+8	; 0x08
 864:	48 17       	cp	r20, r24
 866:	59 07       	cpc	r21, r25
 868:	6a 07       	cpc	r22, r26
 86a:	7b 07       	cpc	r23, r27
 86c:	08 f4       	brcc	.+2      	; 0x870 <write_mem+0xa0>
		{
			lengthOffset = 0;
 86e:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		//If the data is going to go over a page boundary
		if (lengthOffset > 0)
 870:	11 23       	and	r17, r17
 872:	b1 f0       	breq	.+44     	; 0x8a0 <write_mem+0xd0>
		{
			
		
			if (!small_write_mem(_buff0, address, lengthOffset))
 874:	49 81       	ldd	r20, Y+1	; 0x01
 876:	5a 81       	ldd	r21, Y+2	; 0x02
 878:	6b 81       	ldd	r22, Y+3	; 0x03
 87a:	7c 81       	ldd	r23, Y+4	; 0x04
 87c:	21 2f       	mov	r18, r17
 87e:	88 e0       	ldi	r24, 0x08	; 8
 880:	90 e2       	ldi	r25, 0x20	; 32
 882:	0e 94 be 03 	call	0x77c	; 0x77c <small_write_mem>
 886:	88 23       	and	r24, r24
 888:	09 f4       	brne	.+2      	; 0x88c <write_mem+0xbc>
 88a:	d9 c0       	rjmp	.+434    	; 0xa3e <write_mem+0x26e>
			{
				return;
			}
			while(_readingMem);
 88c:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <_readingMem>
 890:	81 11       	cpse	r24, r1
 892:	fc cf       	rjmp	.-8      	; 0x88c <write_mem+0xbc>
 894:	8f e3       	ldi	r24, 0x3F	; 63
 896:	9f e1       	ldi	r25, 0x1F	; 31
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	f1 f7       	brne	.-4      	; 0x898 <write_mem+0xc8>
 89c:	00 c0       	rjmp	.+0      	; 0x89e <write_mem+0xce>
 89e:	00 00       	nop
			//We need to wait until the memory is ready for the last write
			_delay_ms(1);
		}
		
		//Send the rest. if lengthOffset was 0, then everything gets sent here
		if (!small_write_mem(_buff0 + lengthOffset, address + lengthOffset, length - lengthOffset))
 8a0:	2d 81       	ldd	r18, Y+5	; 0x05
 8a2:	21 1b       	sub	r18, r17
 8a4:	49 81       	ldd	r20, Y+1	; 0x01
 8a6:	5a 81       	ldd	r21, Y+2	; 0x02
 8a8:	6b 81       	ldd	r22, Y+3	; 0x03
 8aa:	7c 81       	ldd	r23, Y+4	; 0x04
 8ac:	41 0f       	add	r20, r17
 8ae:	51 1d       	adc	r21, r1
 8b0:	61 1d       	adc	r22, r1
 8b2:	71 1d       	adc	r23, r1
 8b4:	81 2f       	mov	r24, r17
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	88 5f       	subi	r24, 0xF8	; 248
 8ba:	9f 4d       	sbci	r25, 0xDF	; 223
 8bc:	0e 94 be 03 	call	0x77c	; 0x77c <small_write_mem>
 8c0:	88 23       	and	r24, r24
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <write_mem+0xf6>
 8c4:	bc c0       	rjmp	.+376    	; 0xa3e <write_mem+0x26e>
		{
			return;
		}	
		
		while(_readingMem);
 8c6:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <_readingMem>
 8ca:	81 11       	cpse	r24, r1
 8cc:	fc cf       	rjmp	.-8      	; 0x8c6 <write_mem+0xf6>
		
		transmit_status_and_data(OP_STATUS_SUCCESS, length);	
 8ce:	4d 81       	ldd	r20, Y+5	; 0x05
 8d0:	5e 81       	ldd	r21, Y+6	; 0x06
 8d2:	6f 81       	ldd	r22, Y+7	; 0x07
 8d4:	78 85       	ldd	r23, Y+8	; 0x08
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	0e 94 8a 02 	call	0x514	; 0x514 <transmit_status_and_data>
		return;	
 8dc:	b0 c0       	rjmp	.+352    	; 0xa3e <write_mem+0x26e>


	leftToRead = length;
	leftToWrite = length;
	
	_memInBuff = _buff0;
 8de:	88 e0       	ldi	r24, 0x08	; 8
 8e0:	90 e2       	ldi	r25, 0x20	; 32
 8e2:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <_memInBuff>
 8e6:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <_memInBuff+0x1>
	_memOutBuff = _buff1;
 8ea:	82 e1       	ldi	r24, 0x12	; 18
 8ec:	91 e2       	ldi	r25, 0x21	; 33
 8ee:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <_memOutBuff>
 8f2:	90 93 12 22 	sts	0x2212, r25	; 0x802212 <_memOutBuff+0x1>
	
	//Here we know that the size of the data is larger so get a chunck to handle the address offset and page-align the writes.
	if (lengthOffset > 0)
 8f6:	11 23       	and	r17, r17
 8f8:	b1 f1       	breq	.+108    	; 0x966 <write_mem+0x196>
	{
		if (!get_data_from_uart(_memInBuff, lengthOffset, 0))
 8fa:	40 e0       	ldi	r20, 0x00	; 0
 8fc:	61 2f       	mov	r22, r17
 8fe:	88 e0       	ldi	r24, 0x08	; 8
 900:	90 e2       	ldi	r25, 0x20	; 32
 902:	0e 94 f5 01 	call	0x3ea	; 0x3ea <get_data_from_uart>
 906:	81 11       	cpse	r24, r1
 908:	07 c0       	rjmp	.+14     	; 0x918 <write_mem+0x148>
		{
			transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	50 e0       	ldi	r21, 0x00	; 0
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	0e 94 8a 02 	call	0x514	; 0x514 <transmit_status_and_data>
			return;
 916:	93 c0       	rjmp	.+294    	; 0xa3e <write_mem+0x26e>
		}
		swap_write_buffs();
 918:	0e 94 9d 03 	call	0x73a	; 0x73a <swap_write_buffs>
		
		if (!small_write_mem(_memOutBuff, address, lengthOffset))
 91c:	49 81       	ldd	r20, Y+1	; 0x01
 91e:	5a 81       	ldd	r21, Y+2	; 0x02
 920:	6b 81       	ldd	r22, Y+3	; 0x03
 922:	7c 81       	ldd	r23, Y+4	; 0x04
 924:	21 2f       	mov	r18, r17
 926:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <_memOutBuff>
 92a:	90 91 12 22 	lds	r25, 0x2212	; 0x802212 <_memOutBuff+0x1>
 92e:	0e 94 be 03 	call	0x77c	; 0x77c <small_write_mem>
 932:	88 23       	and	r24, r24
 934:	09 f4       	brne	.+2      	; 0x938 <write_mem+0x168>
 936:	83 c0       	rjmp	.+262    	; 0xa3e <write_mem+0x26e>
		{
			return; 		
		}
		
		leftToRead -= lengthOffset;
 938:	81 2f       	mov	r24, r17
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	a0 e0       	ldi	r26, 0x00	; 0
 93e:	b0 e0       	ldi	r27, 0x00	; 0
 940:	c8 1a       	sub	r12, r24
 942:	d9 0a       	sbc	r13, r25
 944:	ea 0a       	sbc	r14, r26
 946:	fb 0a       	sbc	r15, r27
		leftToWrite -= lengthOffset;
		address += lengthOffset;
 948:	49 81       	ldd	r20, Y+1	; 0x01
 94a:	5a 81       	ldd	r21, Y+2	; 0x02
 94c:	6b 81       	ldd	r22, Y+3	; 0x03
 94e:	7c 81       	ldd	r23, Y+4	; 0x04
 950:	84 0f       	add	r24, r20
 952:	95 1f       	adc	r25, r21
 954:	a6 1f       	adc	r26, r22
 956:	b7 1f       	adc	r27, r23
 958:	89 83       	std	Y+1, r24	; 0x01
 95a:	9a 83       	std	Y+2, r25	; 0x02
 95c:	ab 83       	std	Y+3, r26	; 0x03
 95e:	bc 83       	std	Y+4, r27	; 0x04
		{
			return; 		
		}
		
		leftToRead -= lengthOffset;
		leftToWrite -= lengthOffset;
 960:	46 01       	movw	r8, r12
 962:	57 01       	movw	r10, r14
 964:	55 c0       	rjmp	.+170    	; 0xa10 <write_mem+0x240>
		return;	
	}


	leftToRead = length;
	leftToWrite = length;
 966:	46 01       	movw	r8, r12
 968:	57 01       	movw	r10, r14
 96a:	52 c0       	rjmp	.+164    	; 0xa10 <write_mem+0x240>
	
	while (leftToRead > 0 || leftToWrite > 0)
	{
	

		if (leftToRead > WRITE_CHUNK_SIZE)
 96c:	91 e8       	ldi	r25, 0x81	; 129
 96e:	c9 16       	cp	r12, r25
 970:	d1 04       	cpc	r13, r1
 972:	e1 04       	cpc	r14, r1
 974:	f1 04       	cpc	r15, r1
 976:	10 f4       	brcc	.+4      	; 0x97c <write_mem+0x1ac>
		{
			transLen = WRITE_CHUNK_SIZE;
		}
		else
		{
			transLen = leftToRead;
 978:	1c 2d       	mov	r17, r12
 97a:	01 c0       	rjmp	.+2      	; 0x97e <write_mem+0x1ae>
	{
	

		if (leftToRead > WRITE_CHUNK_SIZE)
		{
			transLen = WRITE_CHUNK_SIZE;
 97c:	10 e8       	ldi	r17, 0x80	; 128
		else
		{
			transLen = leftToRead;
		}
			
		if (transLen > 0)
 97e:	11 23       	and	r17, r17
 980:	99 f0       	breq	.+38     	; 0x9a8 <write_mem+0x1d8>
		{					
			if (!get_data_from_uart(_memInBuff, transLen, 0))
 982:	40 e0       	ldi	r20, 0x00	; 0
 984:	61 2f       	mov	r22, r17
 986:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <_memInBuff>
 98a:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <_memInBuff+0x1>
 98e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <get_data_from_uart>
 992:	81 11       	cpse	r24, r1
 994:	07 c0       	rjmp	.+14     	; 0x9a4 <write_mem+0x1d4>
			{
				transmit_status_and_data(OP_STATUS_FAILD, OP_FAILED_BAD_INPUT);
 996:	41 e0       	ldi	r20, 0x01	; 1
 998:	50 e0       	ldi	r21, 0x00	; 0
 99a:	60 e0       	ldi	r22, 0x00	; 0
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	0e 94 8a 02 	call	0x514	; 0x514 <transmit_status_and_data>
				return;
 9a2:	4d c0       	rjmp	.+154    	; 0xa3e <write_mem+0x26e>
			}
			swap_write_buffs();
 9a4:	0e 94 9d 03 	call	0x73a	; 0x73a <swap_write_buffs>
		}
		
		leftToRead -= transLen;
 9a8:	c1 1a       	sub	r12, r17
 9aa:	d1 08       	sbc	r13, r1
 9ac:	e1 08       	sbc	r14, r1
 9ae:	f1 08       	sbc	r15, r1
		
		if (leftToWrite > WRITE_CHUNK_SIZE)
 9b0:	81 e8       	ldi	r24, 0x81	; 129
 9b2:	88 16       	cp	r8, r24
 9b4:	91 04       	cpc	r9, r1
 9b6:	a1 04       	cpc	r10, r1
 9b8:	b1 04       	cpc	r11, r1
 9ba:	40 f4       	brcc	.+16     	; 0x9cc <write_mem+0x1fc>
		{
			transLen = WRITE_CHUNK_SIZE;
		}
		else
		{
			transLen = leftToWrite;
 9bc:	18 2d       	mov	r17, r8
 9be:	8f e3       	ldi	r24, 0x3F	; 63
 9c0:	9f e1       	ldi	r25, 0x1F	; 31
 9c2:	01 97       	sbiw	r24, 0x01	; 1
 9c4:	f1 f7       	brne	.-4      	; 0x9c2 <write_mem+0x1f2>
 9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <write_mem+0x1f8>
 9c8:	00 00       	nop
 9ca:	01 c0       	rjmp	.+2      	; 0x9ce <write_mem+0x1fe>
		
		leftToRead -= transLen;
		
		if (leftToWrite > WRITE_CHUNK_SIZE)
		{
			transLen = WRITE_CHUNK_SIZE;
 9cc:	10 e8       	ldi	r17, 0x80	; 128
			_delay_ms(1);
			
		}
		

		if (!small_write_mem(_memOutBuff, address, transLen))
 9ce:	49 81       	ldd	r20, Y+1	; 0x01
 9d0:	5a 81       	ldd	r21, Y+2	; 0x02
 9d2:	6b 81       	ldd	r22, Y+3	; 0x03
 9d4:	7c 81       	ldd	r23, Y+4	; 0x04
 9d6:	21 2f       	mov	r18, r17
 9d8:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <_memOutBuff>
 9dc:	90 91 12 22 	lds	r25, 0x2212	; 0x802212 <_memOutBuff+0x1>
 9e0:	0e 94 be 03 	call	0x77c	; 0x77c <small_write_mem>
 9e4:	88 23       	and	r24, r24
 9e6:	59 f1       	breq	.+86     	; 0xa3e <write_mem+0x26e>
		{
			return; 		
		}

		leftToWrite -= transLen;
 9e8:	81 2f       	mov	r24, r17
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	a0 e0       	ldi	r26, 0x00	; 0
 9ee:	b0 e0       	ldi	r27, 0x00	; 0
 9f0:	88 1a       	sub	r8, r24
 9f2:	99 0a       	sbc	r9, r25
 9f4:	aa 0a       	sbc	r10, r26
 9f6:	bb 0a       	sbc	r11, r27
		address += transLen;
 9f8:	49 81       	ldd	r20, Y+1	; 0x01
 9fa:	5a 81       	ldd	r21, Y+2	; 0x02
 9fc:	6b 81       	ldd	r22, Y+3	; 0x03
 9fe:	7c 81       	ldd	r23, Y+4	; 0x04
 a00:	84 0f       	add	r24, r20
 a02:	95 1f       	adc	r25, r21
 a04:	a6 1f       	adc	r26, r22
 a06:	b7 1f       	adc	r27, r23
 a08:	89 83       	std	Y+1, r24	; 0x01
 a0a:	9a 83       	std	Y+2, r25	; 0x02
 a0c:	ab 83       	std	Y+3, r26	; 0x03
 a0e:	bc 83       	std	Y+4, r27	; 0x04
		leftToRead -= lengthOffset;
		leftToWrite -= lengthOffset;
		address += lengthOffset;
	}
	
	while (leftToRead > 0 || leftToWrite > 0)
 a10:	c1 14       	cp	r12, r1
 a12:	d1 04       	cpc	r13, r1
 a14:	e1 04       	cpc	r14, r1
 a16:	f1 04       	cpc	r15, r1
 a18:	09 f0       	breq	.+2      	; 0xa1c <write_mem+0x24c>
 a1a:	a8 cf       	rjmp	.-176    	; 0x96c <write_mem+0x19c>
 a1c:	81 14       	cp	r8, r1
 a1e:	91 04       	cpc	r9, r1
 a20:	a1 04       	cpc	r10, r1
 a22:	b1 04       	cpc	r11, r1
 a24:	09 f0       	breq	.+2      	; 0xa28 <write_mem+0x258>
 a26:	a2 cf       	rjmp	.-188    	; 0x96c <write_mem+0x19c>
		address += transLen;

	}
	
	
	while(_readingMem);
 a28:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <_readingMem>
 a2c:	81 11       	cpse	r24, r1
 a2e:	fc cf       	rjmp	.-8      	; 0xa28 <write_mem+0x258>
	
	transmit_status_and_data(OP_STATUS_SUCCESS, length);
 a30:	4d 81       	ldd	r20, Y+5	; 0x05
 a32:	5e 81       	ldd	r21, Y+6	; 0x06
 a34:	6f 81       	ldd	r22, Y+7	; 0x07
 a36:	78 85       	ldd	r23, Y+8	; 0x08
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	0e 94 8a 02 	call	0x514	; 0x514 <transmit_status_and_data>
	
}
 a3e:	28 96       	adiw	r28, 0x08	; 8
 a40:	cd bf       	out	0x3d, r28	; 61
 a42:	de bf       	out	0x3e, r29	; 62
 a44:	df 91       	pop	r29
 a46:	cf 91       	pop	r28
 a48:	1f 91       	pop	r17
 a4a:	ff 90       	pop	r15
 a4c:	ef 90       	pop	r14
 a4e:	df 90       	pop	r13
 a50:	cf 90       	pop	r12
 a52:	bf 90       	pop	r11
 a54:	af 90       	pop	r10
 a56:	9f 90       	pop	r9
 a58:	8f 90       	pop	r8
 a5a:	08 95       	ret

00000a5c <get_uart_command>:

void get_uart_command()
{

	while(!(USARTC0.STATUS & USART_RXCIF_bm))
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <get_uart_command+0x8>
	USARTC0.STATUS = USART_RXCIF_bm;
 a5e:	80 e8       	ldi	r24, 0x80	; 128
 a60:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f78c1>
}

void get_uart_command()
{

	while(!(USARTC0.STATUS & USART_RXCIF_bm))
 a64:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7f78c1>
 a68:	88 23       	and	r24, r24
 a6a:	cc f7       	brge	.-14     	; 0xa5e <get_uart_command+0x2>
	USARTC0.STATUS = USART_RXCIF_bm;
			
	_currentOp = USARTC0.DATA;
 a6c:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7f78c0>
 a70:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <_currentOp>
	switch(_currentOp)
 a74:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <_currentOp>
 a78:	8a 36       	cpi	r24, 0x6A	; 106
 a7a:	c9 f0       	breq	.+50     	; 0xaae <get_uart_command+0x52>
 a7c:	28 f4       	brcc	.+10     	; 0xa88 <get_uart_command+0x2c>
 a7e:	85 36       	cpi	r24, 0x65	; 101
 a80:	51 f0       	breq	.+20     	; 0xa96 <get_uart_command+0x3a>
 a82:	89 36       	cpi	r24, 0x69	; 105
 a84:	89 f0       	breq	.+34     	; 0xaa8 <get_uart_command+0x4c>
 a86:	08 95       	ret
 a88:	83 37       	cpi	r24, 0x73	; 115
 a8a:	a1 f0       	breq	.+40     	; 0xab4 <get_uart_command+0x58>
 a8c:	87 37       	cpi	r24, 0x77	; 119
 a8e:	31 f0       	breq	.+12     	; 0xa9c <get_uart_command+0x40>
 a90:	82 37       	cpi	r24, 0x72	; 114
 a92:	91 f4       	brne	.+36     	; 0xab8 <get_uart_command+0x5c>
 a94:	06 c0       	rjmp	.+12     	; 0xaa2 <get_uart_command+0x46>
	{
		
		case USART_ERASE_ALL:
			erase_mem();
 a96:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <erase_mem>
			break;
 a9a:	08 95       	ret
		case USART_WRITE:
			write_mem();
 a9c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <write_mem>
			break;
 aa0:	08 95       	ret
		case USART_READ:
			get_mem();
 aa2:	0e 94 a2 02 	call	0x544	; 0x544 <get_mem>
			break;
 aa6:	08 95       	ret
		case USART_READ_ID:
			get_mem_id();
 aa8:	0e 94 15 03 	call	0x62a	; 0x62a <get_mem_id>
			break;
 aac:	08 95       	ret
		case USART_READ_JEDEC:
			get_mem_jedec();
 aae:	0e 94 25 03 	call	0x64a	; 0x64a <get_mem_jedec>
			break;
 ab2:	08 95       	ret
		case USART_GET_STATUS:
			get_mem_status();
 ab4:	0e 94 35 03 	call	0x66a	; 0x66a <get_mem_status>
 ab8:	08 95       	ret

00000aba <main>:
	}	
}

int main(void)
{
	enable_interrupts();
 aba:	0e 94 75 00 	call	0xea	; 0xea <enable_interrupts>
	init_pins_mem_access();
 abe:	0e 94 79 00 	call	0xf2	; 0xf2 <init_pins_mem_access>
	
	cli();
 ac2:	f8 94       	cli
	
	init_clock_mem_access();
 ac4:	0e 94 b2 00 	call	0x164	; 0x164 <init_clock_mem_access>
	init_usart_mem_access();
 ac8:	0e 94 9a 00 	call	0x134	; 0x134 <init_usart_mem_access>
	init_edma_mem_access();
 acc:	0e 94 88 00 	call	0x110	; 0x110 <init_edma_mem_access>
	init_input_timeout_timer();
 ad0:	0e 94 c1 00 	call	0x182	; 0x182 <init_input_timeout_timer>
	
	sei();
 ad4:	78 94       	sei
	PORTD.OUTSET = PIN4_bm;	
 ad6:	80 e1       	ldi	r24, 0x10	; 16
 ad8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7f7665>


    /* Replace with your application code */
    while (1) 
    {
		get_uart_command();
 adc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <get_uart_command>
 ae0:	fd cf       	rjmp	.-6      	; 0xadc <main+0x22>

00000ae2 <__vector_3>:
    }
}

//IRQ handled when memory read is complete.
ISR(EDMA_CH0_vect)
{
 ae2:	1f 92       	push	r1
 ae4:	0f 92       	push	r0
 ae6:	0f b6       	in	r0, 0x3f	; 63
 ae8:	0f 92       	push	r0
 aea:	11 24       	eor	r1, r1
 aec:	8f 93       	push	r24
 aee:	ef 93       	push	r30
 af0:	ff 93       	push	r31
	
	//End the read
	while(!(EDMA.CH0.CTRLB & EDMA_CH_TRNIF_bm) && !(EDMA.CH1.CTRLB & EDMA_CH_TRNIF_bm));
 af2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7f7111>
 af6:	84 fd       	sbrc	r24, 4
 af8:	04 c0       	rjmp	.+8      	; 0xb02 <__vector_3+0x20>
 afa:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x7f7121>
 afe:	84 ff       	sbrs	r24, 4
 b00:	f8 cf       	rjmp	.-16     	; 0xaf2 <__vector_3+0x10>

	//Clear interrupt flags

	EDMA.CH0.CTRLB &= EDMA_CH_TRNIF_bm | 0x0F; //Only clear the TRNIF flag and not the INT LVLs
 b02:	e0 e0       	ldi	r30, 0x00	; 0
 b04:	f1 e0       	ldi	r31, 0x01	; 1
 b06:	81 89       	ldd	r24, Z+17	; 0x11
 b08:	8f 71       	andi	r24, 0x1F	; 31
 b0a:	81 8b       	std	Z+17, r24	; 0x11
	EDMA.CH1.CTRLB &= EDMA_CH_TRNIF_bm | 0x0F; //Only clear the TRNIF flag and not the INT LVLs
 b0c:	81 a1       	ldd	r24, Z+33	; 0x21
 b0e:	8f 71       	andi	r24, 0x1F	; 31
 b10:	81 a3       	std	Z+33, r24	; 0x21

	
	_readingMem = 0;
 b12:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <_readingMem>
	
	if (_setCS)
 b16:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_setCS>
 b1a:	88 23       	and	r24, r24
 b1c:	19 f0       	breq	.+6      	; 0xb24 <__vector_3+0x42>
	{
		PORTD.OUTSET = PIN4_bm; //Set Pin 4 (CS) to high
 b1e:	80 e1       	ldi	r24, 0x10	; 16
 b20:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7f7665>
	}

}
 b24:	ff 91       	pop	r31
 b26:	ef 91       	pop	r30
 b28:	8f 91       	pop	r24
 b2a:	0f 90       	pop	r0
 b2c:	0f be       	out	0x3f, r0	; 63
 b2e:	0f 90       	pop	r0
 b30:	1f 90       	pop	r1
 b32:	18 95       	reti

00000b34 <_exit>:
 b34:	f8 94       	cli

00000b36 <__stop_program>:
 b36:	ff cf       	rjmp	.-2      	; 0xb36 <__stop_program>
